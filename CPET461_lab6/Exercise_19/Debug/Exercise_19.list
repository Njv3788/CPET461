
Exercise_19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005564  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08005704  08005704  00015704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800577c  0800577c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800577c  0800577c  0001577c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005784  08005784  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005784  08005784  00015784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005788  08005788  00015788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800578c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004148  20000010  0800579c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004158  0800579c  00024158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a1c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003241  00000000  00000000  00037a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001570  00000000  00000000  0003aca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001418  00000000  00000000  0003c210  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000181f4  00000000  00000000  0003d628  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010882  00000000  00000000  0005581c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00098055  00000000  00000000  0006609e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fe0f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a58  00000000  00000000  000fe170  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080056ec 	.word	0x080056ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	080056ec 	.word	0x080056ec

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	2000002c 	.word	0x2000002c
 8000510:	20000080 	.word	0x20000080

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b092      	sub	sp, #72	; 0x48
 8000518:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fd73 	bl	8001004 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f84d 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f991 	bl	8000848 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000526:	f000 f8cd 	bl	80006c4 <MX_I2C1_Init>
  MX_I2S2_Init();
 800052a:	f000 f8f9 	bl	8000720 <MX_I2S2_Init>
  MX_I2S3_Init();
 800052e:	f000 f925 	bl	800077c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000532:	f000 f953 	bl	80007dc <MX_SPI1_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of QS2A */
  osMessageQDef(QS2A, 1, uint16_t);
 8000536:	4b1b      	ldr	r3, [pc, #108]	; (80005a4 <main+0x90>)
 8000538:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800053c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800053e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  QS2AHandle = osMessageCreate(osMessageQ(QS2A), NULL);
 8000542:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f002 ff00 	bl	800334e <osMessageCreate>
 800054e:	4602      	mov	r2, r0
 8000550:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <main+0x94>)
 8000552:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Monitor */
  osThreadDef(Monitor, Start_Monitor, osPriorityNormal, 0, 128);
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <main+0x98>)
 8000556:	f107 041c 	add.w	r4, r7, #28
 800055a:	461d      	mov	r5, r3
 800055c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000560:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000564:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MonitorHandle = osThreadCreate(osThread(Monitor), NULL);
 8000568:	f107 031c 	add.w	r3, r7, #28
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f002 fe8d 	bl	800328e <osThreadCreate>
 8000574:	4602      	mov	r2, r0
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <main+0x9c>)
 8000578:	601a      	str	r2, [r3, #0]

  /* definition and creation of Alarm */
  osThreadDef(Alarm, Start_Alarm, osPriorityNormal, 0, 128);
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <main+0xa0>)
 800057c:	463c      	mov	r4, r7
 800057e:	461d      	mov	r5, r3
 8000580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000584:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000588:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AlarmHandle = osThreadCreate(osThread(Alarm), NULL);
 800058c:	463b      	mov	r3, r7
 800058e:	2100      	movs	r1, #0
 8000590:	4618      	mov	r0, r3
 8000592:	f002 fe7c 	bl	800328e <osThreadCreate>
 8000596:	4602      	mov	r2, r0
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <main+0xa4>)
 800059a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800059c:	f002 fe70 	bl	8003280 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <main+0x8c>
 80005a2:	bf00      	nop
 80005a4:	08005704 	.word	0x08005704
 80005a8:	20004020 	.word	0x20004020
 80005ac:	0800571c 	.word	0x0800571c
 80005b0:	20004080 	.word	0x20004080
 80005b4:	08005740 	.word	0x08005740
 80005b8:	20004024 	.word	0x20004024

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b09a      	sub	sp, #104	; 0x68
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f005 f885 	bl	80056da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
 80005f0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	4b31      	ldr	r3, [pc, #196]	; (80006bc <SystemClock_Config+0x100>)
 80005f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fa:	4a30      	ldr	r2, [pc, #192]	; (80006bc <SystemClock_Config+0x100>)
 80005fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000600:	6413      	str	r3, [r2, #64]	; 0x40
 8000602:	4b2e      	ldr	r3, [pc, #184]	; (80006bc <SystemClock_Config+0x100>)
 8000604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	4b2b      	ldr	r3, [pc, #172]	; (80006c0 <SystemClock_Config+0x104>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a2a      	ldr	r2, [pc, #168]	; (80006c0 <SystemClock_Config+0x104>)
 8000618:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800061c:	6013      	str	r3, [r2, #0]
 800061e:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <SystemClock_Config+0x104>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800062a:	2301      	movs	r3, #1
 800062c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000634:	2302      	movs	r3, #2
 8000636:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000638:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800063c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 800063e:	2304      	movs	r3, #4
 8000640:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000642:	23c0      	movs	r3, #192	; 0xc0
 8000644:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000646:	2304      	movs	r3, #4
 8000648:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800064a:	2308      	movs	r3, #8
 800064c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fd86 	bl	8002164 <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800065e:	f000 fa83 	bl	8000b68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2302      	movs	r3, #2
 8000668:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800066e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000672:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800067c:	2103      	movs	r1, #3
 800067e:	4618      	mov	r0, r3
 8000680:	f001 ffe0 	bl	8002644 <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800068a:	f000 fa6d 	bl	8000b68 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800068e:	2301      	movs	r3, #1
 8000690:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000692:	23c8      	movs	r3, #200	; 0xc8
 8000694:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000696:	2305      	movs	r3, #5
 8000698:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800069a:	2302      	movs	r3, #2
 800069c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 f9f2 	bl	8002a8c <HAL_RCCEx_PeriphCLKConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80006ae:	f000 fa5b 	bl	8000b68 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3768      	adds	r7, #104	; 0x68
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_I2C1_Init+0x50>)
 80006ca:	4a13      	ldr	r2, [pc, #76]	; (8000718 <MX_I2C1_Init+0x54>)
 80006cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_I2C1_Init+0x50>)
 80006d0:	4a12      	ldr	r2, [pc, #72]	; (800071c <MX_I2C1_Init+0x58>)
 80006d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_I2C1_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_I2C1_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_I2C1_Init+0x50>)
 80006e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <MX_I2C1_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_I2C1_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <MX_I2C1_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_I2C1_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_I2C1_Init+0x50>)
 8000702:	f000 ff57 	bl	80015b4 <HAL_I2C_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800070c:	f000 fa2c 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20003fcc 	.word	0x20003fcc
 8000718:	40005400 	.word	0x40005400
 800071c:	000186a0 	.word	0x000186a0

08000720 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_I2S2_Init+0x50>)
 8000726:	4a13      	ldr	r2, [pc, #76]	; (8000774 <MX_I2S2_Init+0x54>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_I2S2_Init+0x50>)
 800072c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000730:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000732:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_I2S2_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <MX_I2S2_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_I2S2_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <MX_I2S2_Init+0x50>)
 8000746:	4a0c      	ldr	r2, [pc, #48]	; (8000778 <MX_I2S2_Init+0x58>)
 8000748:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_I2S2_Init+0x50>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <MX_I2S2_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_I2S2_Init+0x50>)
 8000758:	2201      	movs	r2, #1
 800075a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <MX_I2S2_Init+0x50>)
 800075e:	f001 f861 	bl	8001824 <HAL_I2S_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000768:	f000 f9fe 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20004084 	.word	0x20004084
 8000774:	40003800 	.word	0x40003800
 8000778:	00017700 	.word	0x00017700

0800077c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000780:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <MX_I2S3_Init+0x54>)
 8000782:	4a14      	ldr	r2, [pc, #80]	; (80007d4 <MX_I2S3_Init+0x58>)
 8000784:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_I2S3_Init+0x54>)
 8000788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800078c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <MX_I2S3_Init+0x54>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000794:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_I2S3_Init+0x54>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800079a:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <MX_I2S3_Init+0x54>)
 800079c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_I2S3_Init+0x54>)
 80007a4:	4a0c      	ldr	r2, [pc, #48]	; (80007d8 <MX_I2S3_Init+0x5c>)
 80007a6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_I2S3_Init+0x54>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_I2S3_Init+0x54>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_I2S3_Init+0x54>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_I2S3_Init+0x54>)
 80007bc:	f001 f832 	bl	8001824 <HAL_I2S_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007c6:	f000 f9cf 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200040cc 	.word	0x200040cc
 80007d4:	40003c00 	.word	0x40003c00
 80007d8:	00017700 	.word	0x00017700

080007dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_SPI1_Init+0x64>)
 80007e2:	4a18      	ldr	r2, [pc, #96]	; (8000844 <MX_SPI1_Init+0x68>)
 80007e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007e6:	4b16      	ldr	r3, [pc, #88]	; (8000840 <MX_SPI1_Init+0x64>)
 80007e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_SPI1_Init+0x64>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_SPI1_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_SPI1_Init+0x64>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_SPI1_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_SPI1_Init+0x64>)
 8000808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800080c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800080e:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_SPI1_Init+0x64>)
 8000810:	2200      	movs	r2, #0
 8000812:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000814:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <MX_SPI1_Init+0x64>)
 8000816:	2200      	movs	r2, #0
 8000818:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_SPI1_Init+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000820:	4b07      	ldr	r3, [pc, #28]	; (8000840 <MX_SPI1_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_SPI1_Init+0x64>)
 8000828:	220a      	movs	r2, #10
 800082a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800082c:	4804      	ldr	r0, [pc, #16]	; (8000840 <MX_SPI1_Init+0x64>)
 800082e:	f002 fa7b 	bl	8002d28 <HAL_SPI_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000838:	f000 f996 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20004028 	.word	0x20004028
 8000844:	40013000 	.word	0x40013000

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08c      	sub	sp, #48	; 0x30
 800084c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
 8000862:	4b6f      	ldr	r3, [pc, #444]	; (8000a20 <MX_GPIO_Init+0x1d8>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a6e      	ldr	r2, [pc, #440]	; (8000a20 <MX_GPIO_Init+0x1d8>)
 8000868:	f043 0310 	orr.w	r3, r3, #16
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b6c      	ldr	r3, [pc, #432]	; (8000a20 <MX_GPIO_Init+0x1d8>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0310 	and.w	r3, r3, #16
 8000876:	61bb      	str	r3, [r7, #24]
 8000878:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
 800087e:	4b68      	ldr	r3, [pc, #416]	; (8000a20 <MX_GPIO_Init+0x1d8>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a67      	ldr	r2, [pc, #412]	; (8000a20 <MX_GPIO_Init+0x1d8>)
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b65      	ldr	r3, [pc, #404]	; (8000a20 <MX_GPIO_Init+0x1d8>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	4b61      	ldr	r3, [pc, #388]	; (8000a20 <MX_GPIO_Init+0x1d8>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a60      	ldr	r2, [pc, #384]	; (8000a20 <MX_GPIO_Init+0x1d8>)
 80008a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b5e      	ldr	r3, [pc, #376]	; (8000a20 <MX_GPIO_Init+0x1d8>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	4b5a      	ldr	r3, [pc, #360]	; (8000a20 <MX_GPIO_Init+0x1d8>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a59      	ldr	r2, [pc, #356]	; (8000a20 <MX_GPIO_Init+0x1d8>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b57      	ldr	r3, [pc, #348]	; (8000a20 <MX_GPIO_Init+0x1d8>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	4b53      	ldr	r3, [pc, #332]	; (8000a20 <MX_GPIO_Init+0x1d8>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a52      	ldr	r2, [pc, #328]	; (8000a20 <MX_GPIO_Init+0x1d8>)
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b50      	ldr	r3, [pc, #320]	; (8000a20 <MX_GPIO_Init+0x1d8>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b4c      	ldr	r3, [pc, #304]	; (8000a20 <MX_GPIO_Init+0x1d8>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a4b      	ldr	r2, [pc, #300]	; (8000a20 <MX_GPIO_Init+0x1d8>)
 80008f4:	f043 0308 	orr.w	r3, r3, #8
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b49      	ldr	r3, [pc, #292]	; (8000a20 <MX_GPIO_Init+0x1d8>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0308 	and.w	r3, r3, #8
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2108      	movs	r1, #8
 800090a:	4846      	ldr	r0, [pc, #280]	; (8000a24 <MX_GPIO_Init+0x1dc>)
 800090c:	f000 fe38 	bl	8001580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000910:	2201      	movs	r2, #1
 8000912:	2101      	movs	r1, #1
 8000914:	4844      	ldr	r0, [pc, #272]	; (8000a28 <MX_GPIO_Init+0x1e0>)
 8000916:	f000 fe33 	bl	8001580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin 
 800091a:	2200      	movs	r2, #0
 800091c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000920:	4842      	ldr	r0, [pc, #264]	; (8000a2c <MX_GPIO_Init+0x1e4>)
 8000922:	f000 fe2d 	bl	8001580 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000926:	2304      	movs	r3, #4
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	483a      	ldr	r0, [pc, #232]	; (8000a24 <MX_GPIO_Init+0x1dc>)
 800093a:	f000 fc87 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800093e:	2308      	movs	r3, #8
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4833      	ldr	r0, [pc, #204]	; (8000a24 <MX_GPIO_Init+0x1dc>)
 8000956:	f000 fc79 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800095a:	2332      	movs	r3, #50	; 0x32
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800095e:	4b34      	ldr	r3, [pc, #208]	; (8000a30 <MX_GPIO_Init+0x1e8>)
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	482d      	ldr	r0, [pc, #180]	; (8000a24 <MX_GPIO_Init+0x1dc>)
 800096e:	f000 fc6d 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000972:	2301      	movs	r3, #1
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4827      	ldr	r0, [pc, #156]	; (8000a28 <MX_GPIO_Init+0x1e0>)
 800098a:	f000 fc5f 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSH_BUTTON_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 800098e:	2301      	movs	r3, #1
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000992:	4b27      	ldr	r3, [pc, #156]	; (8000a30 <MX_GPIO_Init+0x1e8>)
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4824      	ldr	r0, [pc, #144]	; (8000a34 <MX_GPIO_Init+0x1ec>)
 80009a2:	f000 fc53 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin ORANGE_LED_Pin RED_LED_Pin BLUE_LED_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin 
 80009a6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009aa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	481b      	ldr	r0, [pc, #108]	; (8000a2c <MX_GPIO_Init+0x1e4>)
 80009c0:	f000 fc44 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4816      	ldr	r0, [pc, #88]	; (8000a34 <MX_GPIO_Init+0x1ec>)
 80009da:	f000 fc37 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009de:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e4:	2302      	movs	r3, #2
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009f0:	230a      	movs	r3, #10
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	480e      	ldr	r0, [pc, #56]	; (8000a34 <MX_GPIO_Init+0x1ec>)
 80009fc:	f000 fc26 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a00:	2320      	movs	r3, #32
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	4806      	ldr	r0, [pc, #24]	; (8000a2c <MX_GPIO_Init+0x1e4>)
 8000a14:	f000 fc1a 	bl	800124c <HAL_GPIO_Init>

}
 8000a18:	bf00      	nop
 8000a1a:	3730      	adds	r7, #48	; 0x30
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40021000 	.word	0x40021000
 8000a28:	40020800 	.word	0x40020800
 8000a2c:	40020c00 	.word	0x40020c00
 8000a30:	10120000 	.word	0x10120000
 8000a34:	40020000 	.word	0x40020000

08000a38 <Start_Monitor>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_Start_Monitor */
void Start_Monitor(void const * argument)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  alarm_status_t SensorState = ALARM_OFF;
 8000a40:	2301      	movs	r3, #1
 8000a42:	73fb      	strb	r3, [r7, #15]
  GPIO_PinState bitstatus,newbitstatus;
  bitstatus = HAL_GPIO_ReadPin(PUSH_BUTTON_GPIO_Port, PUSH_BUTTON_Pin);
 8000a44:	2101      	movs	r1, #1
 8000a46:	4823      	ldr	r0, [pc, #140]	; (8000ad4 <Start_Monitor+0x9c>)
 8000a48:	f000 fd82 	bl	8001550 <HAL_GPIO_ReadPin>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	73bb      	strb	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {

    newbitstatus = HAL_GPIO_ReadPin(PUSH_BUTTON_GPIO_Port, PUSH_BUTTON_Pin);
 8000a50:	2101      	movs	r1, #1
 8000a52:	4820      	ldr	r0, [pc, #128]	; (8000ad4 <Start_Monitor+0x9c>)
 8000a54:	f000 fd7c 	bl	8001550 <HAL_GPIO_ReadPin>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	737b      	strb	r3, [r7, #13]
    if((bitstatus != newbitstatus) &&(GPIO_PIN_SET == newbitstatus))
 8000a5c:	7bba      	ldrb	r2, [r7, #14]
 8000a5e:	7b7b      	ldrb	r3, [r7, #13]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d011      	beq.n	8000a88 <Start_Monitor+0x50>
 8000a64:	7b7b      	ldrb	r3, [r7, #13]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d10e      	bne.n	8000a88 <Start_Monitor+0x50>
    {
      if(SensorState == ALARM_OFF)
 8000a6a:	7bfb      	ldrb	r3, [r7, #15]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d102      	bne.n	8000a76 <Start_Monitor+0x3e>
      {
    	 SensorState = ALARM_ON;
 8000a70:	2300      	movs	r3, #0
 8000a72:	73fb      	strb	r3, [r7, #15]
 8000a74:	e001      	b.n	8000a7a <Start_Monitor+0x42>
      }
      else
      {
        SensorState = ALARM_OFF;
 8000a76:	2301      	movs	r3, #1
 8000a78:	73fb      	strb	r3, [r7, #15]
      }
      osMessagePut(QS2AHandle,SensorState,0);
 8000a7a:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <Start_Monitor+0xa0>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	7bf9      	ldrb	r1, [r7, #15]
 8000a80:	2200      	movs	r2, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f002 fc8c 	bl	80033a0 <osMessagePut>
    }

    bitstatus = newbitstatus;
 8000a88:	7b7b      	ldrb	r3, [r7, #13]
 8000a8a:	73bb      	strb	r3, [r7, #14]

    if(GPIO_PIN_SET == bitstatus)
 8000a8c:	7bbb      	ldrb	r3, [r7, #14]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d106      	bne.n	8000aa0 <Start_Monitor+0x68>
    {
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin,GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a98:	4810      	ldr	r0, [pc, #64]	; (8000adc <Start_Monitor+0xa4>)
 8000a9a:	f000 fd71 	bl	8001580 <HAL_GPIO_WritePin>
 8000a9e:	e005      	b.n	8000aac <Start_Monitor+0x74>
    }
    else
    {
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin,GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aa6:	480d      	ldr	r0, [pc, #52]	; (8000adc <Start_Monitor+0xa4>)
 8000aa8:	f000 fd6a 	bl	8001580 <HAL_GPIO_WritePin>
    }

    if(ALARM_ON == SensorState)
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d106      	bne.n	8000ac0 <Start_Monitor+0x88>
    {
      HAL_GPIO_WritePin(ORANGE_LED_GPIO_Port,ORANGE_LED_Pin,GPIO_PIN_SET);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ab8:	4808      	ldr	r0, [pc, #32]	; (8000adc <Start_Monitor+0xa4>)
 8000aba:	f000 fd61 	bl	8001580 <HAL_GPIO_WritePin>
 8000abe:	e005      	b.n	8000acc <Start_Monitor+0x94>
    }
    else
    {
      HAL_GPIO_WritePin(ORANGE_LED_GPIO_Port,ORANGE_LED_Pin,GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <Start_Monitor+0xa4>)
 8000ac8:	f000 fd5a 	bl	8001580 <HAL_GPIO_WritePin>
    }
    osDelay(250);
 8000acc:	20fa      	movs	r0, #250	; 0xfa
 8000ace:	f002 fc2a 	bl	8003326 <osDelay>
    newbitstatus = HAL_GPIO_ReadPin(PUSH_BUTTON_GPIO_Port, PUSH_BUTTON_Pin);
 8000ad2:	e7bd      	b.n	8000a50 <Start_Monitor+0x18>
 8000ad4:	40020000 	.word	0x40020000
 8000ad8:	20004020 	.word	0x20004020
 8000adc:	40020c00 	.word	0x40020c00

08000ae0 <Start_Alarm>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Alarm */
void Start_Alarm(void const * argument)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b088      	sub	sp, #32
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Alarm */
  osEvent QueReadState;
  alarm_status_t SensorState;
  GPIO_TypeDef* GPIOx = RED_LED_GPIO_Port;
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <Start_Alarm+0x5c>)
 8000aea:	61fb      	str	r3, [r7, #28]
  uint16_t GPIO_Pin = RED_LED_Pin;
 8000aec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000af0:	837b      	strh	r3, [r7, #26]
  /* Infinite loop */
  for(;;)
  {
	QueReadState = osMessageGet(QS2AHandle, 0);
 8000af2:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <Start_Alarm+0x60>)
 8000af4:	6819      	ldr	r1, [r3, #0]
 8000af6:	f107 030c 	add.w	r3, r7, #12
 8000afa:	2200      	movs	r2, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f002 fc8f 	bl	8003420 <osMessageGet>

	if(osEventMessage == QueReadState.status)
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	2b10      	cmp	r3, #16
 8000b06:	d114      	bne.n	8000b32 <Start_Alarm+0x52>
	{
	  SensorState =  (alarm_status_t)QueReadState.value.v;
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	767b      	strb	r3, [r7, #25]
	  if(ALARM_ON == SensorState)
 8000b0c:	7e7b      	ldrb	r3, [r7, #25]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d106      	bne.n	8000b20 <Start_Alarm+0x40>
	  {
         HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000b12:	8b7b      	ldrh	r3, [r7, #26]
 8000b14:	2201      	movs	r2, #1
 8000b16:	4619      	mov	r1, r3
 8000b18:	69f8      	ldr	r0, [r7, #28]
 8000b1a:	f000 fd31 	bl	8001580 <HAL_GPIO_WritePin>
 8000b1e:	e008      	b.n	8000b32 <Start_Alarm+0x52>
	  }
	  else if(ALARM_OFF == SensorState)
 8000b20:	7e7b      	ldrb	r3, [r7, #25]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d105      	bne.n	8000b32 <Start_Alarm+0x52>
	  {
	     HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000b26:	8b7b      	ldrh	r3, [r7, #26]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	69f8      	ldr	r0, [r7, #28]
 8000b2e:	f000 fd27 	bl	8001580 <HAL_GPIO_WritePin>
	  }
	}
	osDelay(500);
 8000b32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b36:	f002 fbf6 	bl	8003326 <osDelay>
	QueReadState = osMessageGet(QS2AHandle, 0);
 8000b3a:	e7da      	b.n	8000af2 <Start_Alarm+0x12>
 8000b3c:	40020c00 	.word	0x40020c00
 8000b40:	20004020 	.word	0x20004020

08000b44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d101      	bne.n	8000b5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b56:	f000 fa77 	bl	8001048 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40010000 	.word	0x40010000

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
	...

08000b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <HAL_MspInit+0x54>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	4a11      	ldr	r2, [pc, #68]	; (8000bcc <HAL_MspInit+0x54>)
 8000b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <HAL_MspInit+0x54>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <HAL_MspInit+0x54>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <HAL_MspInit+0x54>)
 8000ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <HAL_MspInit+0x54>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	210f      	movs	r1, #15
 8000bba:	f06f 0001 	mvn.w	r0, #1
 8000bbe:	f000 fb1b 	bl	80011f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800

08000bd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a19      	ldr	r2, [pc, #100]	; (8000c54 <HAL_I2C_MspInit+0x84>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d12c      	bne.n	8000c4c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c0e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c14:	2312      	movs	r3, #18
 8000c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c20:	2304      	movs	r3, #4
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	480c      	ldr	r0, [pc, #48]	; (8000c5c <HAL_I2C_MspInit+0x8c>)
 8000c2c:	f000 fb0e 	bl	800124c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c38:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c4c:	bf00      	nop
 8000c4e:	3728      	adds	r7, #40	; 0x28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40005400 	.word	0x40005400
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020400 	.word	0x40020400

08000c60 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08e      	sub	sp, #56	; 0x38
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a59      	ldr	r2, [pc, #356]	; (8000de4 <HAL_I2S_MspInit+0x184>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d15b      	bne.n	8000d3a <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	623b      	str	r3, [r7, #32]
 8000c86:	4b58      	ldr	r3, [pc, #352]	; (8000de8 <HAL_I2S_MspInit+0x188>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	4a57      	ldr	r2, [pc, #348]	; (8000de8 <HAL_I2S_MspInit+0x188>)
 8000c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c90:	6413      	str	r3, [r2, #64]	; 0x40
 8000c92:	4b55      	ldr	r3, [pc, #340]	; (8000de8 <HAL_I2S_MspInit+0x188>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9a:	623b      	str	r3, [r7, #32]
 8000c9c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
 8000ca2:	4b51      	ldr	r3, [pc, #324]	; (8000de8 <HAL_I2S_MspInit+0x188>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a50      	ldr	r2, [pc, #320]	; (8000de8 <HAL_I2S_MspInit+0x188>)
 8000ca8:	f043 0304 	orr.w	r3, r3, #4
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b4e      	ldr	r3, [pc, #312]	; (8000de8 <HAL_I2S_MspInit+0x188>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0304 	and.w	r3, r3, #4
 8000cb6:	61fb      	str	r3, [r7, #28]
 8000cb8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61bb      	str	r3, [r7, #24]
 8000cbe:	4b4a      	ldr	r3, [pc, #296]	; (8000de8 <HAL_I2S_MspInit+0x188>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a49      	ldr	r2, [pc, #292]	; (8000de8 <HAL_I2S_MspInit+0x188>)
 8000cc4:	f043 0302 	orr.w	r3, r3, #2
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b47      	ldr	r3, [pc, #284]	; (8000de8 <HAL_I2S_MspInit+0x188>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	61bb      	str	r3, [r7, #24]
 8000cd4:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cd6:	2304      	movs	r3, #4
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000ce6:	2306      	movs	r3, #6
 8000ce8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cee:	4619      	mov	r1, r3
 8000cf0:	483e      	ldr	r0, [pc, #248]	; (8000dec <HAL_I2S_MspInit+0x18c>)
 8000cf2:	f000 faab 	bl	800124c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000cf6:	2308      	movs	r3, #8
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d06:	2305      	movs	r3, #5
 8000d08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4836      	ldr	r0, [pc, #216]	; (8000dec <HAL_I2S_MspInit+0x18c>)
 8000d12:	f000 fa9b 	bl	800124c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000d16:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d28:	2305      	movs	r3, #5
 8000d2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d30:	4619      	mov	r1, r3
 8000d32:	482f      	ldr	r0, [pc, #188]	; (8000df0 <HAL_I2S_MspInit+0x190>)
 8000d34:	f000 fa8a 	bl	800124c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d38:	e04f      	b.n	8000dda <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a2d      	ldr	r2, [pc, #180]	; (8000df4 <HAL_I2S_MspInit+0x194>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d14a      	bne.n	8000dda <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	4b27      	ldr	r3, [pc, #156]	; (8000de8 <HAL_I2S_MspInit+0x188>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	4a26      	ldr	r2, [pc, #152]	; (8000de8 <HAL_I2S_MspInit+0x188>)
 8000d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d52:	6413      	str	r3, [r2, #64]	; 0x40
 8000d54:	4b24      	ldr	r3, [pc, #144]	; (8000de8 <HAL_I2S_MspInit+0x188>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d5c:	617b      	str	r3, [r7, #20]
 8000d5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d60:	2300      	movs	r3, #0
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	4b20      	ldr	r3, [pc, #128]	; (8000de8 <HAL_I2S_MspInit+0x188>)
 8000d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d68:	4a1f      	ldr	r2, [pc, #124]	; (8000de8 <HAL_I2S_MspInit+0x188>)
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d70:	4b1d      	ldr	r3, [pc, #116]	; (8000de8 <HAL_I2S_MspInit+0x188>)
 8000d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <HAL_I2S_MspInit+0x188>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	4a18      	ldr	r2, [pc, #96]	; (8000de8 <HAL_I2S_MspInit+0x188>)
 8000d86:	f043 0304 	orr.w	r3, r3, #4
 8000d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8c:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <HAL_I2S_MspInit+0x188>)
 8000d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d90:	f003 0304 	and.w	r3, r3, #4
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d98:	2310      	movs	r3, #16
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000da8:	2306      	movs	r3, #6
 8000daa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db0:	4619      	mov	r1, r3
 8000db2:	4811      	ldr	r0, [pc, #68]	; (8000df8 <HAL_I2S_MspInit+0x198>)
 8000db4:	f000 fa4a 	bl	800124c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000db8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dca:	2306      	movs	r3, #6
 8000dcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4805      	ldr	r0, [pc, #20]	; (8000dec <HAL_I2S_MspInit+0x18c>)
 8000dd6:	f000 fa39 	bl	800124c <HAL_GPIO_Init>
}
 8000dda:	bf00      	nop
 8000ddc:	3738      	adds	r7, #56	; 0x38
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40003800 	.word	0x40003800
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020800 	.word	0x40020800
 8000df0:	40020400 	.word	0x40020400
 8000df4:	40003c00 	.word	0x40003c00
 8000df8:	40020000 	.word	0x40020000

08000dfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a19      	ldr	r2, [pc, #100]	; (8000e80 <HAL_SPI_MspInit+0x84>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d12b      	bne.n	8000e76 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <HAL_SPI_MspInit+0x88>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e26:	4a17      	ldr	r2, [pc, #92]	; (8000e84 <HAL_SPI_MspInit+0x88>)
 8000e28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <HAL_SPI_MspInit+0x88>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <HAL_SPI_MspInit+0x88>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a10      	ldr	r2, [pc, #64]	; (8000e84 <HAL_SPI_MspInit+0x88>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <HAL_SPI_MspInit+0x88>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e56:	23e0      	movs	r3, #224	; 0xe0
 8000e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e66:	2305      	movs	r3, #5
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4805      	ldr	r0, [pc, #20]	; (8000e88 <HAL_SPI_MspInit+0x8c>)
 8000e72:	f000 f9eb 	bl	800124c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	; 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40013000 	.word	0x40013000
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020000 	.word	0x40020000

08000e8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08c      	sub	sp, #48	; 0x30
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	2019      	movs	r0, #25
 8000ea2:	f000 f9a9 	bl	80011f8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000ea6:	2019      	movs	r0, #25
 8000ea8:	f000 f9c2 	bl	8001230 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	4b1e      	ldr	r3, [pc, #120]	; (8000f2c <HAL_InitTick+0xa0>)
 8000eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb4:	4a1d      	ldr	r2, [pc, #116]	; (8000f2c <HAL_InitTick+0xa0>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	6453      	str	r3, [r2, #68]	; 0x44
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <HAL_InitTick+0xa0>)
 8000ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ec8:	f107 0210 	add.w	r2, r7, #16
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4611      	mov	r1, r2
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f001 fda8 	bl	8002a28 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ed8:	f001 fd92 	bl	8002a00 <HAL_RCC_GetPCLK2Freq>
 8000edc:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee0:	4a13      	ldr	r2, [pc, #76]	; (8000f30 <HAL_InitTick+0xa4>)
 8000ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee6:	0c9b      	lsrs	r3, r3, #18
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <HAL_InitTick+0xa8>)
 8000eee:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <HAL_InitTick+0xac>)
 8000ef0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <HAL_InitTick+0xa8>)
 8000ef4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ef8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000efa:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <HAL_InitTick+0xa8>)
 8000efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000efe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <HAL_InitTick+0xa8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <HAL_InitTick+0xa8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f0c:	4809      	ldr	r0, [pc, #36]	; (8000f34 <HAL_InitTick+0xa8>)
 8000f0e:	f001 ff6f 	bl	8002df0 <HAL_TIM_Base_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d104      	bne.n	8000f22 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000f18:	4806      	ldr	r0, [pc, #24]	; (8000f34 <HAL_InitTick+0xa8>)
 8000f1a:	f001 ff9e 	bl	8002e5a <HAL_TIM_Base_Start_IT>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	e000      	b.n	8000f24 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3730      	adds	r7, #48	; 0x30
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	431bde83 	.word	0x431bde83
 8000f34:	20004114 	.word	0x20004114
 8000f38:	40010000 	.word	0x40010000

08000f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <HardFault_Handler+0x4>

08000f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <MemManage_Handler+0x4>

08000f56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f76:	f001 ff94 	bl	8002ea2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20004114 	.word	0x20004114

08000f84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <SystemInit+0x28>)
 8000f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f8e:	4a07      	ldr	r2, [pc, #28]	; (8000fac <SystemInit+0x28>)
 8000f90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <SystemInit+0x28>)
 8000f9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f9e:	609a      	str	r2, [r3, #8]
#endif
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fb4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fb6:	e003      	b.n	8000fc0 <LoopCopyDataInit>

08000fb8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fbc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fbe:	3104      	adds	r1, #4

08000fc0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fc0:	480b      	ldr	r0, [pc, #44]	; (8000ff0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fc4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fc6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fc8:	d3f6      	bcc.n	8000fb8 <CopyDataInit>
  ldr  r2, =_sbss
 8000fca:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fcc:	e002      	b.n	8000fd4 <LoopFillZerobss>

08000fce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fd0:	f842 3b04 	str.w	r3, [r2], #4

08000fd4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fd6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fd8:	d3f9      	bcc.n	8000fce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fda:	f7ff ffd3 	bl	8000f84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fde:	f004 fb4d 	bl	800567c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe2:	f7ff fa97 	bl	8000514 <main>
  bx  lr    
 8000fe6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fe8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000fec:	0800578c 	.word	0x0800578c
  ldr  r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ff4:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000ff8:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000ffc:	20004158 	.word	0x20004158

08001000 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001000:	e7fe      	b.n	8001000 <ADC_IRQHandler>
	...

08001004 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001008:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <HAL_Init+0x40>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <HAL_Init+0x40>)
 800100e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001012:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <HAL_Init+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <HAL_Init+0x40>)
 800101a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800101e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <HAL_Init+0x40>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a07      	ldr	r2, [pc, #28]	; (8001044 <HAL_Init+0x40>)
 8001026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800102c:	2003      	movs	r0, #3
 800102e:	f000 f8d8 	bl	80011e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001032:	2000      	movs	r0, #0
 8001034:	f7ff ff2a 	bl	8000e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001038:	f7ff fd9e 	bl	8000b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023c00 	.word	0x40023c00

08001048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x20>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_IncTick+0x24>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4413      	add	r3, r2
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <HAL_IncTick+0x24>)
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000008 	.word	0x20000008
 800106c:	20004154 	.word	0x20004154

08001070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return uwTick;
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <HAL_GetTick+0x14>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20004154 	.word	0x20004154

08001088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a4:	4013      	ands	r3, r2
 80010a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ba:	4a04      	ldr	r2, [pc, #16]	; (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	60d3      	str	r3, [r2, #12]
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <__NVIC_GetPriorityGrouping+0x18>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	0a1b      	lsrs	r3, r3, #8
 80010da:	f003 0307 	and.w	r3, r3, #7
}
 80010de:	4618      	mov	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	db0b      	blt.n	8001116 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	f003 021f 	and.w	r2, r3, #31
 8001104:	4907      	ldr	r1, [pc, #28]	; (8001124 <__NVIC_EnableIRQ+0x38>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	095b      	lsrs	r3, r3, #5
 800110c:	2001      	movs	r0, #1
 800110e:	fa00 f202 	lsl.w	r2, r0, r2
 8001112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000e100 	.word	0xe000e100

08001128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	2b00      	cmp	r3, #0
 800113a:	db0a      	blt.n	8001152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	b2da      	uxtb	r2, r3
 8001140:	490c      	ldr	r1, [pc, #48]	; (8001174 <__NVIC_SetPriority+0x4c>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	0112      	lsls	r2, r2, #4
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	440b      	add	r3, r1
 800114c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001150:	e00a      	b.n	8001168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4908      	ldr	r1, [pc, #32]	; (8001178 <__NVIC_SetPriority+0x50>)
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	3b04      	subs	r3, #4
 8001160:	0112      	lsls	r2, r2, #4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	440b      	add	r3, r1
 8001166:	761a      	strb	r2, [r3, #24]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000e100 	.word	0xe000e100
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800117c:	b480      	push	{r7}
 800117e:	b089      	sub	sp, #36	; 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f1c3 0307 	rsb	r3, r3, #7
 8001196:	2b04      	cmp	r3, #4
 8001198:	bf28      	it	cs
 800119a:	2304      	movcs	r3, #4
 800119c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3304      	adds	r3, #4
 80011a2:	2b06      	cmp	r3, #6
 80011a4:	d902      	bls.n	80011ac <NVIC_EncodePriority+0x30>
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3b03      	subs	r3, #3
 80011aa:	e000      	b.n	80011ae <NVIC_EncodePriority+0x32>
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	f04f 32ff 	mov.w	r2, #4294967295
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43da      	mvns	r2, r3
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	401a      	ands	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c4:	f04f 31ff 	mov.w	r1, #4294967295
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fa01 f303 	lsl.w	r3, r1, r3
 80011ce:	43d9      	mvns	r1, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	4313      	orrs	r3, r2
         );
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3724      	adds	r7, #36	; 0x24
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ff4c 	bl	8001088 <__NVIC_SetPriorityGrouping>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800120a:	f7ff ff61 	bl	80010d0 <__NVIC_GetPriorityGrouping>
 800120e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	68b9      	ldr	r1, [r7, #8]
 8001214:	6978      	ldr	r0, [r7, #20]
 8001216:	f7ff ffb1 	bl	800117c <NVIC_EncodePriority>
 800121a:	4602      	mov	r2, r0
 800121c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff80 	bl	8001128 <__NVIC_SetPriority>
}
 8001228:	bf00      	nop
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff54 	bl	80010ec <__NVIC_EnableIRQ>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	; 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
 8001266:	e159      	b.n	800151c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001268:	2201      	movs	r2, #1
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	429a      	cmp	r2, r3
 8001282:	f040 8148 	bne.w	8001516 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d00b      	beq.n	80012a6 <HAL_GPIO_Init+0x5a>
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b02      	cmp	r3, #2
 8001294:	d007      	beq.n	80012a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800129a:	2b11      	cmp	r3, #17
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b12      	cmp	r3, #18
 80012a4:	d130      	bne.n	8001308 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	2203      	movs	r2, #3
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	68da      	ldr	r2, [r3, #12]
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012dc:	2201      	movs	r2, #1
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	091b      	lsrs	r3, r3, #4
 80012f2:	f003 0201 	and.w	r2, r3, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	2203      	movs	r2, #3
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b02      	cmp	r3, #2
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0xfc>
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b12      	cmp	r3, #18
 8001346:	d123      	bne.n	8001390 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	08da      	lsrs	r2, r3, #3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3208      	adds	r2, #8
 8001350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	f003 0307 	and.w	r3, r3, #7
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	220f      	movs	r2, #15
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	691a      	ldr	r2, [r3, #16]
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	08da      	lsrs	r2, r3, #3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3208      	adds	r2, #8
 800138a:	69b9      	ldr	r1, [r7, #24]
 800138c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	2203      	movs	r2, #3
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0203 	and.w	r2, r3, #3
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f000 80a2 	beq.w	8001516 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b56      	ldr	r3, [pc, #344]	; (8001530 <HAL_GPIO_Init+0x2e4>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	4a55      	ldr	r2, [pc, #340]	; (8001530 <HAL_GPIO_Init+0x2e4>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e0:	6453      	str	r3, [r2, #68]	; 0x44
 80013e2:	4b53      	ldr	r3, [pc, #332]	; (8001530 <HAL_GPIO_Init+0x2e4>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ee:	4a51      	ldr	r2, [pc, #324]	; (8001534 <HAL_GPIO_Init+0x2e8>)
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	089b      	lsrs	r3, r3, #2
 80013f4:	3302      	adds	r3, #2
 80013f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f003 0303 	and.w	r3, r3, #3
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	220f      	movs	r2, #15
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a48      	ldr	r2, [pc, #288]	; (8001538 <HAL_GPIO_Init+0x2ec>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d019      	beq.n	800144e <HAL_GPIO_Init+0x202>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a47      	ldr	r2, [pc, #284]	; (800153c <HAL_GPIO_Init+0x2f0>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d013      	beq.n	800144a <HAL_GPIO_Init+0x1fe>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a46      	ldr	r2, [pc, #280]	; (8001540 <HAL_GPIO_Init+0x2f4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d00d      	beq.n	8001446 <HAL_GPIO_Init+0x1fa>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a45      	ldr	r2, [pc, #276]	; (8001544 <HAL_GPIO_Init+0x2f8>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d007      	beq.n	8001442 <HAL_GPIO_Init+0x1f6>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a44      	ldr	r2, [pc, #272]	; (8001548 <HAL_GPIO_Init+0x2fc>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d101      	bne.n	800143e <HAL_GPIO_Init+0x1f2>
 800143a:	2304      	movs	r3, #4
 800143c:	e008      	b.n	8001450 <HAL_GPIO_Init+0x204>
 800143e:	2307      	movs	r3, #7
 8001440:	e006      	b.n	8001450 <HAL_GPIO_Init+0x204>
 8001442:	2303      	movs	r3, #3
 8001444:	e004      	b.n	8001450 <HAL_GPIO_Init+0x204>
 8001446:	2302      	movs	r3, #2
 8001448:	e002      	b.n	8001450 <HAL_GPIO_Init+0x204>
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <HAL_GPIO_Init+0x204>
 800144e:	2300      	movs	r3, #0
 8001450:	69fa      	ldr	r2, [r7, #28]
 8001452:	f002 0203 	and.w	r2, r2, #3
 8001456:	0092      	lsls	r2, r2, #2
 8001458:	4093      	lsls	r3, r2
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001460:	4934      	ldr	r1, [pc, #208]	; (8001534 <HAL_GPIO_Init+0x2e8>)
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	089b      	lsrs	r3, r3, #2
 8001466:	3302      	adds	r3, #2
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800146e:	4b37      	ldr	r3, [pc, #220]	; (800154c <HAL_GPIO_Init+0x300>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001492:	4a2e      	ldr	r2, [pc, #184]	; (800154c <HAL_GPIO_Init+0x300>)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001498:	4b2c      	ldr	r3, [pc, #176]	; (800154c <HAL_GPIO_Init+0x300>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014bc:	4a23      	ldr	r2, [pc, #140]	; (800154c <HAL_GPIO_Init+0x300>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014c2:	4b22      	ldr	r3, [pc, #136]	; (800154c <HAL_GPIO_Init+0x300>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4013      	ands	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014e6:	4a19      	ldr	r2, [pc, #100]	; (800154c <HAL_GPIO_Init+0x300>)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014ec:	4b17      	ldr	r3, [pc, #92]	; (800154c <HAL_GPIO_Init+0x300>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001510:	4a0e      	ldr	r2, [pc, #56]	; (800154c <HAL_GPIO_Init+0x300>)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3301      	adds	r3, #1
 800151a:	61fb      	str	r3, [r7, #28]
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	2b0f      	cmp	r3, #15
 8001520:	f67f aea2 	bls.w	8001268 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001524:	bf00      	nop
 8001526:	3724      	adds	r7, #36	; 0x24
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	40023800 	.word	0x40023800
 8001534:	40013800 	.word	0x40013800
 8001538:	40020000 	.word	0x40020000
 800153c:	40020400 	.word	0x40020400
 8001540:	40020800 	.word	0x40020800
 8001544:	40020c00 	.word	0x40020c00
 8001548:	40021000 	.word	0x40021000
 800154c:	40013c00 	.word	0x40013c00

08001550 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	691a      	ldr	r2, [r3, #16]
 8001560:	887b      	ldrh	r3, [r7, #2]
 8001562:	4013      	ands	r3, r2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d002      	beq.n	800156e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001568:	2301      	movs	r3, #1
 800156a:	73fb      	strb	r3, [r7, #15]
 800156c:	e001      	b.n	8001572 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800156e:	2300      	movs	r3, #0
 8001570:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001572:	7bfb      	ldrb	r3, [r7, #15]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
 800158c:	4613      	mov	r3, r2
 800158e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001590:	787b      	ldrb	r3, [r7, #1]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800159c:	e003      	b.n	80015a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800159e:	887b      	ldrh	r3, [r7, #2]
 80015a0:	041a      	lsls	r2, r3, #16
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	619a      	str	r2, [r3, #24]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e11f      	b.n	8001806 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d106      	bne.n	80015e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff faf8 	bl	8000bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2224      	movs	r2, #36	; 0x24
 80015e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 0201 	bic.w	r2, r2, #1
 80015f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001606:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001616:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001618:	f001 f9de 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 800161c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	4a7b      	ldr	r2, [pc, #492]	; (8001810 <HAL_I2C_Init+0x25c>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d807      	bhi.n	8001638 <HAL_I2C_Init+0x84>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4a7a      	ldr	r2, [pc, #488]	; (8001814 <HAL_I2C_Init+0x260>)
 800162c:	4293      	cmp	r3, r2
 800162e:	bf94      	ite	ls
 8001630:	2301      	movls	r3, #1
 8001632:	2300      	movhi	r3, #0
 8001634:	b2db      	uxtb	r3, r3
 8001636:	e006      	b.n	8001646 <HAL_I2C_Init+0x92>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4a77      	ldr	r2, [pc, #476]	; (8001818 <HAL_I2C_Init+0x264>)
 800163c:	4293      	cmp	r3, r2
 800163e:	bf94      	ite	ls
 8001640:	2301      	movls	r3, #1
 8001642:	2300      	movhi	r3, #0
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e0db      	b.n	8001806 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	4a72      	ldr	r2, [pc, #456]	; (800181c <HAL_I2C_Init+0x268>)
 8001652:	fba2 2303 	umull	r2, r3, r2, r3
 8001656:	0c9b      	lsrs	r3, r3, #18
 8001658:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68ba      	ldr	r2, [r7, #8]
 800166a:	430a      	orrs	r2, r1
 800166c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	4a64      	ldr	r2, [pc, #400]	; (8001810 <HAL_I2C_Init+0x25c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d802      	bhi.n	8001688 <HAL_I2C_Init+0xd4>
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	3301      	adds	r3, #1
 8001686:	e009      	b.n	800169c <HAL_I2C_Init+0xe8>
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800168e:	fb02 f303 	mul.w	r3, r2, r3
 8001692:	4a63      	ldr	r2, [pc, #396]	; (8001820 <HAL_I2C_Init+0x26c>)
 8001694:	fba2 2303 	umull	r2, r3, r2, r3
 8001698:	099b      	lsrs	r3, r3, #6
 800169a:	3301      	adds	r3, #1
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	430b      	orrs	r3, r1
 80016a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80016ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	4956      	ldr	r1, [pc, #344]	; (8001810 <HAL_I2C_Init+0x25c>)
 80016b8:	428b      	cmp	r3, r1
 80016ba:	d80d      	bhi.n	80016d8 <HAL_I2C_Init+0x124>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	1e59      	subs	r1, r3, #1
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80016ca:	3301      	adds	r3, #1
 80016cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	bf38      	it	cc
 80016d4:	2304      	movcc	r3, #4
 80016d6:	e04f      	b.n	8001778 <HAL_I2C_Init+0x1c4>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d111      	bne.n	8001704 <HAL_I2C_Init+0x150>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	1e58      	subs	r0, r3, #1
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6859      	ldr	r1, [r3, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	440b      	add	r3, r1
 80016ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80016f2:	3301      	adds	r3, #1
 80016f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	bf0c      	ite	eq
 80016fc:	2301      	moveq	r3, #1
 80016fe:	2300      	movne	r3, #0
 8001700:	b2db      	uxtb	r3, r3
 8001702:	e012      	b.n	800172a <HAL_I2C_Init+0x176>
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	1e58      	subs	r0, r3, #1
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6859      	ldr	r1, [r3, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	0099      	lsls	r1, r3, #2
 8001714:	440b      	add	r3, r1
 8001716:	fbb0 f3f3 	udiv	r3, r0, r3
 800171a:	3301      	adds	r3, #1
 800171c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001720:	2b00      	cmp	r3, #0
 8001722:	bf0c      	ite	eq
 8001724:	2301      	moveq	r3, #1
 8001726:	2300      	movne	r3, #0
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_I2C_Init+0x17e>
 800172e:	2301      	movs	r3, #1
 8001730:	e022      	b.n	8001778 <HAL_I2C_Init+0x1c4>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10e      	bne.n	8001758 <HAL_I2C_Init+0x1a4>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	1e58      	subs	r0, r3, #1
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6859      	ldr	r1, [r3, #4]
 8001742:	460b      	mov	r3, r1
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	440b      	add	r3, r1
 8001748:	fbb0 f3f3 	udiv	r3, r0, r3
 800174c:	3301      	adds	r3, #1
 800174e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001756:	e00f      	b.n	8001778 <HAL_I2C_Init+0x1c4>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	1e58      	subs	r0, r3, #1
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6859      	ldr	r1, [r3, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	0099      	lsls	r1, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	fbb0 f3f3 	udiv	r3, r0, r3
 800176e:	3301      	adds	r3, #1
 8001770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001774:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	6809      	ldr	r1, [r1, #0]
 800177c:	4313      	orrs	r3, r2
 800177e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69da      	ldr	r2, [r3, #28]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	6911      	ldr	r1, [r2, #16]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	68d2      	ldr	r2, [r2, #12]
 80017b2:	4311      	orrs	r1, r2
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6812      	ldr	r2, [r2, #0]
 80017b8:	430b      	orrs	r3, r1
 80017ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695a      	ldr	r2, [r3, #20]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 0201 	orr.w	r2, r2, #1
 80017e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2220      	movs	r2, #32
 80017f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	000186a0 	.word	0x000186a0
 8001814:	001e847f 	.word	0x001e847f
 8001818:	003d08ff 	.word	0x003d08ff
 800181c:	431bde83 	.word	0x431bde83
 8001820:	10624dd3 	.word	0x10624dd3

08001824 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e128      	b.n	8001a88 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d109      	bne.n	8001856 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a90      	ldr	r2, [pc, #576]	; (8001a90 <HAL_I2S_Init+0x26c>)
 800184e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff fa05 	bl	8000c60 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2202      	movs	r2, #2
 800185a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6812      	ldr	r2, [r2, #0]
 8001868:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800186c:	f023 030f 	bic.w	r3, r3, #15
 8001870:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2202      	movs	r2, #2
 8001878:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	2b02      	cmp	r3, #2
 8001880:	d060      	beq.n	8001944 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d102      	bne.n	8001890 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800188a:	2310      	movs	r3, #16
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	e001      	b.n	8001894 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001890:	2320      	movs	r3, #32
 8001892:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2b20      	cmp	r3, #32
 800189a:	d802      	bhi.n	80018a2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80018a2:	2001      	movs	r0, #1
 80018a4:	f001 f9e2 	bl	8002c6c <HAL_RCCEx_GetPeriphCLKFreq>
 80018a8:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018b2:	d125      	bne.n	8001900 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d010      	beq.n	80018de <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80018c6:	4613      	mov	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	461a      	mov	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d8:	3305      	adds	r3, #5
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	e01f      	b.n	800191e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	461a      	mov	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fa:	3305      	adds	r3, #5
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	e00e      	b.n	800191e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	fbb2 f2f3 	udiv	r2, r2, r3
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	461a      	mov	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	fbb2 f3f3 	udiv	r3, r2, r3
 800191a:	3305      	adds	r3, #5
 800191c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4a5c      	ldr	r2, [pc, #368]	; (8001a94 <HAL_I2S_Init+0x270>)
 8001922:	fba2 2303 	umull	r2, r3, r2, r3
 8001926:	08db      	lsrs	r3, r3, #3
 8001928:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	085b      	lsrs	r3, r3, #1
 800193a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	61bb      	str	r3, [r7, #24]
 8001942:	e003      	b.n	800194c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001944:	2302      	movs	r3, #2
 8001946:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d902      	bls.n	8001958 <HAL_I2S_Init+0x134>
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	2bff      	cmp	r3, #255	; 0xff
 8001956:	d907      	bls.n	8001968 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195c:	f043 0210 	orr.w	r2, r3, #16
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e08f      	b.n	8001a88 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691a      	ldr	r2, [r3, #16]
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	ea42 0103 	orr.w	r1, r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	69fa      	ldr	r2, [r7, #28]
 8001978:	430a      	orrs	r2, r1
 800197a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001986:	f023 030f 	bic.w	r3, r3, #15
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6851      	ldr	r1, [r2, #4]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6892      	ldr	r2, [r2, #8]
 8001992:	4311      	orrs	r1, r2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	68d2      	ldr	r2, [r2, #12]
 8001998:	4311      	orrs	r1, r2
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6992      	ldr	r2, [r2, #24]
 800199e:	430a      	orrs	r2, r1
 80019a0:	431a      	orrs	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019aa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d161      	bne.n	8001a78 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a38      	ldr	r2, [pc, #224]	; (8001a98 <HAL_I2S_Init+0x274>)
 80019b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a37      	ldr	r2, [pc, #220]	; (8001a9c <HAL_I2S_Init+0x278>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d101      	bne.n	80019c8 <HAL_I2S_Init+0x1a4>
 80019c4:	4b36      	ldr	r3, [pc, #216]	; (8001aa0 <HAL_I2S_Init+0x27c>)
 80019c6:	e001      	b.n	80019cc <HAL_I2S_Init+0x1a8>
 80019c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6812      	ldr	r2, [r2, #0]
 80019d2:	4932      	ldr	r1, [pc, #200]	; (8001a9c <HAL_I2S_Init+0x278>)
 80019d4:	428a      	cmp	r2, r1
 80019d6:	d101      	bne.n	80019dc <HAL_I2S_Init+0x1b8>
 80019d8:	4a31      	ldr	r2, [pc, #196]	; (8001aa0 <HAL_I2S_Init+0x27c>)
 80019da:	e001      	b.n	80019e0 <HAL_I2S_Init+0x1bc>
 80019dc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80019e0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80019e4:	f023 030f 	bic.w	r3, r3, #15
 80019e8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a2b      	ldr	r2, [pc, #172]	; (8001a9c <HAL_I2S_Init+0x278>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d101      	bne.n	80019f8 <HAL_I2S_Init+0x1d4>
 80019f4:	4b2a      	ldr	r3, [pc, #168]	; (8001aa0 <HAL_I2S_Init+0x27c>)
 80019f6:	e001      	b.n	80019fc <HAL_I2S_Init+0x1d8>
 80019f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80019fc:	2202      	movs	r2, #2
 80019fe:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a25      	ldr	r2, [pc, #148]	; (8001a9c <HAL_I2S_Init+0x278>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d101      	bne.n	8001a0e <HAL_I2S_Init+0x1ea>
 8001a0a:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <HAL_I2S_Init+0x27c>)
 8001a0c:	e001      	b.n	8001a12 <HAL_I2S_Init+0x1ee>
 8001a0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a1e:	d003      	beq.n	8001a28 <HAL_I2S_Init+0x204>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d103      	bne.n	8001a30 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001a28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	e001      	b.n	8001a34 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001a30:	2300      	movs	r3, #0
 8001a32:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	b299      	uxth	r1, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001a4a:	4303      	orrs	r3, r0
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	430b      	orrs	r3, r1
 8001a50:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001a52:	4313      	orrs	r3, r2
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	897b      	ldrh	r3, [r7, #10]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a60:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a0d      	ldr	r2, [pc, #52]	; (8001a9c <HAL_I2S_Init+0x278>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d101      	bne.n	8001a70 <HAL_I2S_Init+0x24c>
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <HAL_I2S_Init+0x27c>)
 8001a6e:	e001      	b.n	8001a74 <HAL_I2S_Init+0x250>
 8001a70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a74:	897a      	ldrh	r2, [r7, #10]
 8001a76:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3720      	adds	r7, #32
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	08001b9b 	.word	0x08001b9b
 8001a94:	cccccccd 	.word	0xcccccccd
 8001a98:	08001cb1 	.word	0x08001cb1
 8001a9c:	40003800 	.word	0x40003800
 8001aa0:	40003400 	.word	0x40003400

08001aa4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	881a      	ldrh	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	1c9a      	adds	r2, r3, #2
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	3b01      	subs	r3, #1
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10e      	bne.n	8001b34 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b24:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ffb8 	bl	8001aa4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4e:	b292      	uxth	r2, r2
 8001b50:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b56:	1c9a      	adds	r2, r3, #2
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	3b01      	subs	r3, #1
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d10e      	bne.n	8001b92 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b82:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ff93 	bl	8001ab8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d13a      	bne.n	8001c2c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d109      	bne.n	8001bd4 <I2S_IRQHandler+0x3a>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bca:	2b40      	cmp	r3, #64	; 0x40
 8001bcc:	d102      	bne.n	8001bd4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff ffb4 	bl	8001b3c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bda:	2b40      	cmp	r3, #64	; 0x40
 8001bdc:	d126      	bne.n	8001c2c <I2S_IRQHandler+0x92>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0320 	and.w	r3, r3, #32
 8001be8:	2b20      	cmp	r3, #32
 8001bea:	d11f      	bne.n	8001c2c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001bfa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	f043 0202 	orr.w	r2, r3, #2
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff ff50 	bl	8001acc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b03      	cmp	r3, #3
 8001c36:	d136      	bne.n	8001ca6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d109      	bne.n	8001c56 <I2S_IRQHandler+0xbc>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4c:	2b80      	cmp	r3, #128	; 0x80
 8001c4e:	d102      	bne.n	8001c56 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ff45 	bl	8001ae0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d122      	bne.n	8001ca6 <I2S_IRQHandler+0x10c>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 0320 	and.w	r3, r3, #32
 8001c6a:	2b20      	cmp	r3, #32
 8001c6c:	d11b      	bne.n	8001ca6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c7c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c98:	f043 0204 	orr.w	r2, r3, #4
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff13 	bl	8001acc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4aa2      	ldr	r2, [pc, #648]	; (8001f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d101      	bne.n	8001cce <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001cca:	4ba2      	ldr	r3, [pc, #648]	; (8001f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ccc:	e001      	b.n	8001cd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001cce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a9b      	ldr	r2, [pc, #620]	; (8001f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d101      	bne.n	8001cec <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001ce8:	4b9a      	ldr	r3, [pc, #616]	; (8001f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001cea:	e001      	b.n	8001cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001cec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cfc:	d004      	beq.n	8001d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f040 8099 	bne.w	8001e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d107      	bne.n	8001d22 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d002      	beq.n	8001d22 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 f925 	bl	8001f6c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d107      	bne.n	8001d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d002      	beq.n	8001d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f9c8 	bl	80020cc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d42:	2b40      	cmp	r3, #64	; 0x40
 8001d44:	d13a      	bne.n	8001dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	f003 0320 	and.w	r3, r3, #32
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d035      	beq.n	8001dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a7e      	ldr	r2, [pc, #504]	; (8001f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d101      	bne.n	8001d5e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001d5a:	4b7e      	ldr	r3, [pc, #504]	; (8001f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001d5c:	e001      	b.n	8001d62 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001d5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4979      	ldr	r1, [pc, #484]	; (8001f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001d6a:	428b      	cmp	r3, r1
 8001d6c:	d101      	bne.n	8001d72 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001d6e:	4b79      	ldr	r3, [pc, #484]	; (8001f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001d70:	e001      	b.n	8001d76 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001d72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d7a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d8a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dae:	f043 0202 	orr.w	r2, r3, #2
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff fe88 	bl	8001acc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	f040 80be 	bne.w	8001f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f003 0320 	and.w	r3, r3, #32
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 80b8 	beq.w	8001f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001de2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a59      	ldr	r2, [pc, #356]	; (8001f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d101      	bne.n	8001df2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001dee:	4b59      	ldr	r3, [pc, #356]	; (8001f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001df0:	e001      	b.n	8001df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001df2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4954      	ldr	r1, [pc, #336]	; (8001f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001dfe:	428b      	cmp	r3, r1
 8001e00:	d101      	bne.n	8001e06 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001e02:	4b54      	ldr	r3, [pc, #336]	; (8001f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001e04:	e001      	b.n	8001e0a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001e06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e0a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e0e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001e10:	2300      	movs	r3, #0
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	f043 0204 	orr.w	r2, r3, #4
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff fe4a 	bl	8001acc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e38:	e084      	b.n	8001f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d107      	bne.n	8001e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f8be 	bl	8001fd0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d107      	bne.n	8001e6e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d002      	beq.n	8001e6e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f8fd 	bl	8002068 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e74:	2b40      	cmp	r3, #64	; 0x40
 8001e76:	d12f      	bne.n	8001ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f003 0320 	and.w	r3, r3, #32
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d02a      	beq.n	8001ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e90:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a2e      	ldr	r2, [pc, #184]	; (8001f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d101      	bne.n	8001ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001e9c:	4b2d      	ldr	r3, [pc, #180]	; (8001f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001e9e:	e001      	b.n	8001ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001ea0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4929      	ldr	r1, [pc, #164]	; (8001f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001eac:	428b      	cmp	r3, r1
 8001eae:	d101      	bne.n	8001eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001eb0:	4b28      	ldr	r3, [pc, #160]	; (8001f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001eb2:	e001      	b.n	8001eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001eb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eb8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ebc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	f043 0202 	orr.w	r2, r3, #2
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff fdfa 	bl	8001acc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	2b08      	cmp	r3, #8
 8001ee0:	d131      	bne.n	8001f46 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	f003 0320 	and.w	r3, r3, #32
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d02c      	beq.n	8001f46 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a17      	ldr	r2, [pc, #92]	; (8001f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d101      	bne.n	8001efa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001ef6:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ef8:	e001      	b.n	8001efe <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001efa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4912      	ldr	r1, [pc, #72]	; (8001f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001f06:	428b      	cmp	r3, r1
 8001f08:	d101      	bne.n	8001f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8001f0a:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001f0c:	e001      	b.n	8001f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8001f0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f12:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f16:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f26:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f34:	f043 0204 	orr.w	r2, r3, #4
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff fdc5 	bl	8001acc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f42:	e000      	b.n	8001f46 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f44:	bf00      	nop
}
 8001f46:	bf00      	nop
 8001f48:	3720      	adds	r7, #32
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40003800 	.word	0x40003800
 8001f54:	40003400 	.word	0x40003400

08001f58 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	1c99      	adds	r1, r3, #2
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6251      	str	r1, [r2, #36]	; 0x24
 8001f7e:	881a      	ldrh	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d113      	bne.n	8001fc6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d106      	bne.n	8001fc6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ffc9 	bl	8001f58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	1c99      	adds	r1, r3, #2
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6251      	str	r1, [r2, #36]	; 0x24
 8001fe2:	8819      	ldrh	r1, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a1d      	ldr	r2, [pc, #116]	; (8002060 <I2SEx_TxISR_I2SExt+0x90>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d101      	bne.n	8001ff2 <I2SEx_TxISR_I2SExt+0x22>
 8001fee:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <I2SEx_TxISR_I2SExt+0x94>)
 8001ff0:	e001      	b.n	8001ff6 <I2SEx_TxISR_I2SExt+0x26>
 8001ff2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ff6:	460a      	mov	r2, r1
 8001ff8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	3b01      	subs	r3, #1
 8002002:	b29a      	uxth	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200c:	b29b      	uxth	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d121      	bne.n	8002056 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a12      	ldr	r2, [pc, #72]	; (8002060 <I2SEx_TxISR_I2SExt+0x90>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d101      	bne.n	8002020 <I2SEx_TxISR_I2SExt+0x50>
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <I2SEx_TxISR_I2SExt+0x94>)
 800201e:	e001      	b.n	8002024 <I2SEx_TxISR_I2SExt+0x54>
 8002020:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	490d      	ldr	r1, [pc, #52]	; (8002060 <I2SEx_TxISR_I2SExt+0x90>)
 800202c:	428b      	cmp	r3, r1
 800202e:	d101      	bne.n	8002034 <I2SEx_TxISR_I2SExt+0x64>
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <I2SEx_TxISR_I2SExt+0x94>)
 8002032:	e001      	b.n	8002038 <I2SEx_TxISR_I2SExt+0x68>
 8002034:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002038:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800203c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002042:	b29b      	uxth	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	d106      	bne.n	8002056 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff ff81 	bl	8001f58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40003800 	.word	0x40003800
 8002064:	40003400 	.word	0x40003400

08002068 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68d8      	ldr	r0, [r3, #12]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207a:	1c99      	adds	r1, r3, #2
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002080:	b282      	uxth	r2, r0
 8002082:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002088:	b29b      	uxth	r3, r3
 800208a:	3b01      	subs	r3, #1
 800208c:	b29a      	uxth	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002096:	b29b      	uxth	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	d113      	bne.n	80020c4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020aa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d106      	bne.n	80020c4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff ff4a 	bl	8001f58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a20      	ldr	r2, [pc, #128]	; (800215c <I2SEx_RxISR_I2SExt+0x90>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d101      	bne.n	80020e2 <I2SEx_RxISR_I2SExt+0x16>
 80020de:	4b20      	ldr	r3, [pc, #128]	; (8002160 <I2SEx_RxISR_I2SExt+0x94>)
 80020e0:	e001      	b.n	80020e6 <I2SEx_RxISR_I2SExt+0x1a>
 80020e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020e6:	68d8      	ldr	r0, [r3, #12]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ec:	1c99      	adds	r1, r3, #2
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80020f2:	b282      	uxth	r2, r0
 80020f4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002108:	b29b      	uxth	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d121      	bne.n	8002152 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a12      	ldr	r2, [pc, #72]	; (800215c <I2SEx_RxISR_I2SExt+0x90>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d101      	bne.n	800211c <I2SEx_RxISR_I2SExt+0x50>
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <I2SEx_RxISR_I2SExt+0x94>)
 800211a:	e001      	b.n	8002120 <I2SEx_RxISR_I2SExt+0x54>
 800211c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	490d      	ldr	r1, [pc, #52]	; (800215c <I2SEx_RxISR_I2SExt+0x90>)
 8002128:	428b      	cmp	r3, r1
 800212a:	d101      	bne.n	8002130 <I2SEx_RxISR_I2SExt+0x64>
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <I2SEx_RxISR_I2SExt+0x94>)
 800212e:	e001      	b.n	8002134 <I2SEx_RxISR_I2SExt+0x68>
 8002130:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002134:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002138:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213e:	b29b      	uxth	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d106      	bne.n	8002152 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff ff03 	bl	8001f58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40003800 	.word	0x40003800
 8002160:	40003400 	.word	0x40003400

08002164 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e25b      	b.n	800262e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d075      	beq.n	800226e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002182:	4ba3      	ldr	r3, [pc, #652]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	2b04      	cmp	r3, #4
 800218c:	d00c      	beq.n	80021a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800218e:	4ba0      	ldr	r3, [pc, #640]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002196:	2b08      	cmp	r3, #8
 8002198:	d112      	bne.n	80021c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800219a:	4b9d      	ldr	r3, [pc, #628]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021a6:	d10b      	bne.n	80021c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a8:	4b99      	ldr	r3, [pc, #612]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d05b      	beq.n	800226c <HAL_RCC_OscConfig+0x108>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d157      	bne.n	800226c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e236      	b.n	800262e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c8:	d106      	bne.n	80021d8 <HAL_RCC_OscConfig+0x74>
 80021ca:	4b91      	ldr	r3, [pc, #580]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a90      	ldr	r2, [pc, #576]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e01d      	b.n	8002214 <HAL_RCC_OscConfig+0xb0>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e0:	d10c      	bne.n	80021fc <HAL_RCC_OscConfig+0x98>
 80021e2:	4b8b      	ldr	r3, [pc, #556]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a8a      	ldr	r2, [pc, #552]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	4b88      	ldr	r3, [pc, #544]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a87      	ldr	r2, [pc, #540]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	e00b      	b.n	8002214 <HAL_RCC_OscConfig+0xb0>
 80021fc:	4b84      	ldr	r3, [pc, #528]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a83      	ldr	r2, [pc, #524]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002206:	6013      	str	r3, [r2, #0]
 8002208:	4b81      	ldr	r3, [pc, #516]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a80      	ldr	r2, [pc, #512]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 800220e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d013      	beq.n	8002244 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7fe ff28 	bl	8001070 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002224:	f7fe ff24 	bl	8001070 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	; 0x64
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e1fb      	b.n	800262e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002236:	4b76      	ldr	r3, [pc, #472]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f0      	beq.n	8002224 <HAL_RCC_OscConfig+0xc0>
 8002242:	e014      	b.n	800226e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7fe ff14 	bl	8001070 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800224c:	f7fe ff10 	bl	8001070 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b64      	cmp	r3, #100	; 0x64
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e1e7      	b.n	800262e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225e:	4b6c      	ldr	r3, [pc, #432]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0xe8>
 800226a:	e000      	b.n	800226e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d063      	beq.n	8002342 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800227a:	4b65      	ldr	r3, [pc, #404]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00b      	beq.n	800229e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002286:	4b62      	ldr	r3, [pc, #392]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800228e:	2b08      	cmp	r3, #8
 8002290:	d11c      	bne.n	80022cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002292:	4b5f      	ldr	r3, [pc, #380]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d116      	bne.n	80022cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229e:	4b5c      	ldr	r3, [pc, #368]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d005      	beq.n	80022b6 <HAL_RCC_OscConfig+0x152>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d001      	beq.n	80022b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e1bb      	b.n	800262e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b6:	4b56      	ldr	r3, [pc, #344]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	4952      	ldr	r1, [pc, #328]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ca:	e03a      	b.n	8002342 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d020      	beq.n	8002316 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d4:	4b4f      	ldr	r3, [pc, #316]	; (8002414 <HAL_RCC_OscConfig+0x2b0>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022da:	f7fe fec9 	bl	8001070 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022e2:	f7fe fec5 	bl	8001070 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e19c      	b.n	800262e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f4:	4b46      	ldr	r3, [pc, #280]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0f0      	beq.n	80022e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002300:	4b43      	ldr	r3, [pc, #268]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4940      	ldr	r1, [pc, #256]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002310:	4313      	orrs	r3, r2
 8002312:	600b      	str	r3, [r1, #0]
 8002314:	e015      	b.n	8002342 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002316:	4b3f      	ldr	r3, [pc, #252]	; (8002414 <HAL_RCC_OscConfig+0x2b0>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7fe fea8 	bl	8001070 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002324:	f7fe fea4 	bl	8001070 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e17b      	b.n	800262e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002336:	4b36      	ldr	r3, [pc, #216]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f0      	bne.n	8002324 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d030      	beq.n	80023b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d016      	beq.n	8002384 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002356:	4b30      	ldr	r3, [pc, #192]	; (8002418 <HAL_RCC_OscConfig+0x2b4>)
 8002358:	2201      	movs	r2, #1
 800235a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235c:	f7fe fe88 	bl	8001070 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002364:	f7fe fe84 	bl	8001070 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e15b      	b.n	800262e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002376:	4b26      	ldr	r3, [pc, #152]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0f0      	beq.n	8002364 <HAL_RCC_OscConfig+0x200>
 8002382:	e015      	b.n	80023b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002384:	4b24      	ldr	r3, [pc, #144]	; (8002418 <HAL_RCC_OscConfig+0x2b4>)
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238a:	f7fe fe71 	bl	8001070 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002392:	f7fe fe6d 	bl	8001070 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e144      	b.n	800262e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a4:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80023a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1f0      	bne.n	8002392 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 80a0 	beq.w	80024fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023be:	2300      	movs	r3, #0
 80023c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c2:	4b13      	ldr	r3, [pc, #76]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10f      	bne.n	80023ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	4a0e      	ldr	r2, [pc, #56]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80023d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023dc:	6413      	str	r3, [r2, #64]	; 0x40
 80023de:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ea:	2301      	movs	r3, #1
 80023ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ee:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_RCC_OscConfig+0x2b8>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d121      	bne.n	800243e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <HAL_RCC_OscConfig+0x2b8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a07      	ldr	r2, [pc, #28]	; (800241c <HAL_RCC_OscConfig+0x2b8>)
 8002400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002406:	f7fe fe33 	bl	8001070 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240c:	e011      	b.n	8002432 <HAL_RCC_OscConfig+0x2ce>
 800240e:	bf00      	nop
 8002410:	40023800 	.word	0x40023800
 8002414:	42470000 	.word	0x42470000
 8002418:	42470e80 	.word	0x42470e80
 800241c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002420:	f7fe fe26 	bl	8001070 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e0fd      	b.n	800262e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002432:	4b81      	ldr	r3, [pc, #516]	; (8002638 <HAL_RCC_OscConfig+0x4d4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d106      	bne.n	8002454 <HAL_RCC_OscConfig+0x2f0>
 8002446:	4b7d      	ldr	r3, [pc, #500]	; (800263c <HAL_RCC_OscConfig+0x4d8>)
 8002448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244a:	4a7c      	ldr	r2, [pc, #496]	; (800263c <HAL_RCC_OscConfig+0x4d8>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	6713      	str	r3, [r2, #112]	; 0x70
 8002452:	e01c      	b.n	800248e <HAL_RCC_OscConfig+0x32a>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b05      	cmp	r3, #5
 800245a:	d10c      	bne.n	8002476 <HAL_RCC_OscConfig+0x312>
 800245c:	4b77      	ldr	r3, [pc, #476]	; (800263c <HAL_RCC_OscConfig+0x4d8>)
 800245e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002460:	4a76      	ldr	r2, [pc, #472]	; (800263c <HAL_RCC_OscConfig+0x4d8>)
 8002462:	f043 0304 	orr.w	r3, r3, #4
 8002466:	6713      	str	r3, [r2, #112]	; 0x70
 8002468:	4b74      	ldr	r3, [pc, #464]	; (800263c <HAL_RCC_OscConfig+0x4d8>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	4a73      	ldr	r2, [pc, #460]	; (800263c <HAL_RCC_OscConfig+0x4d8>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	6713      	str	r3, [r2, #112]	; 0x70
 8002474:	e00b      	b.n	800248e <HAL_RCC_OscConfig+0x32a>
 8002476:	4b71      	ldr	r3, [pc, #452]	; (800263c <HAL_RCC_OscConfig+0x4d8>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247a:	4a70      	ldr	r2, [pc, #448]	; (800263c <HAL_RCC_OscConfig+0x4d8>)
 800247c:	f023 0301 	bic.w	r3, r3, #1
 8002480:	6713      	str	r3, [r2, #112]	; 0x70
 8002482:	4b6e      	ldr	r3, [pc, #440]	; (800263c <HAL_RCC_OscConfig+0x4d8>)
 8002484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002486:	4a6d      	ldr	r2, [pc, #436]	; (800263c <HAL_RCC_OscConfig+0x4d8>)
 8002488:	f023 0304 	bic.w	r3, r3, #4
 800248c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d015      	beq.n	80024c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002496:	f7fe fdeb 	bl	8001070 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249c:	e00a      	b.n	80024b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800249e:	f7fe fde7 	bl	8001070 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e0bc      	b.n	800262e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b4:	4b61      	ldr	r3, [pc, #388]	; (800263c <HAL_RCC_OscConfig+0x4d8>)
 80024b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ee      	beq.n	800249e <HAL_RCC_OscConfig+0x33a>
 80024c0:	e014      	b.n	80024ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c2:	f7fe fdd5 	bl	8001070 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c8:	e00a      	b.n	80024e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ca:	f7fe fdd1 	bl	8001070 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d8:	4293      	cmp	r3, r2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e0a6      	b.n	800262e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e0:	4b56      	ldr	r3, [pc, #344]	; (800263c <HAL_RCC_OscConfig+0x4d8>)
 80024e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1ee      	bne.n	80024ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024ec:	7dfb      	ldrb	r3, [r7, #23]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d105      	bne.n	80024fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f2:	4b52      	ldr	r3, [pc, #328]	; (800263c <HAL_RCC_OscConfig+0x4d8>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	4a51      	ldr	r2, [pc, #324]	; (800263c <HAL_RCC_OscConfig+0x4d8>)
 80024f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 8092 	beq.w	800262c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002508:	4b4c      	ldr	r3, [pc, #304]	; (800263c <HAL_RCC_OscConfig+0x4d8>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	2b08      	cmp	r3, #8
 8002512:	d05c      	beq.n	80025ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d141      	bne.n	80025a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251c:	4b48      	ldr	r3, [pc, #288]	; (8002640 <HAL_RCC_OscConfig+0x4dc>)
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002522:	f7fe fda5 	bl	8001070 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800252a:	f7fe fda1 	bl	8001070 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e078      	b.n	800262e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253c:	4b3f      	ldr	r3, [pc, #252]	; (800263c <HAL_RCC_OscConfig+0x4d8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1f0      	bne.n	800252a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69da      	ldr	r2, [r3, #28]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	431a      	orrs	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	019b      	lsls	r3, r3, #6
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255e:	085b      	lsrs	r3, r3, #1
 8002560:	3b01      	subs	r3, #1
 8002562:	041b      	lsls	r3, r3, #16
 8002564:	431a      	orrs	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256a:	061b      	lsls	r3, r3, #24
 800256c:	4933      	ldr	r1, [pc, #204]	; (800263c <HAL_RCC_OscConfig+0x4d8>)
 800256e:	4313      	orrs	r3, r2
 8002570:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002572:	4b33      	ldr	r3, [pc, #204]	; (8002640 <HAL_RCC_OscConfig+0x4dc>)
 8002574:	2201      	movs	r2, #1
 8002576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7fe fd7a 	bl	8001070 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002580:	f7fe fd76 	bl	8001070 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e04d      	b.n	800262e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002592:	4b2a      	ldr	r3, [pc, #168]	; (800263c <HAL_RCC_OscConfig+0x4d8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0x41c>
 800259e:	e045      	b.n	800262c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a0:	4b27      	ldr	r3, [pc, #156]	; (8002640 <HAL_RCC_OscConfig+0x4dc>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a6:	f7fe fd63 	bl	8001070 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ae:	f7fe fd5f 	bl	8001070 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e036      	b.n	800262e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c0:	4b1e      	ldr	r3, [pc, #120]	; (800263c <HAL_RCC_OscConfig+0x4d8>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f0      	bne.n	80025ae <HAL_RCC_OscConfig+0x44a>
 80025cc:	e02e      	b.n	800262c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e029      	b.n	800262e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025da:	4b18      	ldr	r3, [pc, #96]	; (800263c <HAL_RCC_OscConfig+0x4d8>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d11c      	bne.n	8002628 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d115      	bne.n	8002628 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002602:	4013      	ands	r3, r2
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002608:	4293      	cmp	r3, r2
 800260a:	d10d      	bne.n	8002628 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002616:	429a      	cmp	r2, r3
 8002618:	d106      	bne.n	8002628 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e000      	b.n	800262e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40007000 	.word	0x40007000
 800263c:	40023800 	.word	0x40023800
 8002640:	42470060 	.word	0x42470060

08002644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0cc      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002658:	4b68      	ldr	r3, [pc, #416]	; (80027fc <HAL_RCC_ClockConfig+0x1b8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 030f 	and.w	r3, r3, #15
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d90c      	bls.n	8002680 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002666:	4b65      	ldr	r3, [pc, #404]	; (80027fc <HAL_RCC_ClockConfig+0x1b8>)
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800266e:	4b63      	ldr	r3, [pc, #396]	; (80027fc <HAL_RCC_ClockConfig+0x1b8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d001      	beq.n	8002680 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e0b8      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d020      	beq.n	80026ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002698:	4b59      	ldr	r3, [pc, #356]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	4a58      	ldr	r2, [pc, #352]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0308 	and.w	r3, r3, #8
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026b0:	4b53      	ldr	r3, [pc, #332]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	4a52      	ldr	r2, [pc, #328]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026bc:	4b50      	ldr	r3, [pc, #320]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	494d      	ldr	r1, [pc, #308]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d044      	beq.n	8002764 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d107      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e2:	4b47      	ldr	r3, [pc, #284]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d119      	bne.n	8002722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e07f      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d003      	beq.n	8002702 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026fe:	2b03      	cmp	r3, #3
 8002700:	d107      	bne.n	8002712 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002702:	4b3f      	ldr	r3, [pc, #252]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d109      	bne.n	8002722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e06f      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002712:	4b3b      	ldr	r3, [pc, #236]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e067      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002722:	4b37      	ldr	r3, [pc, #220]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f023 0203 	bic.w	r2, r3, #3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	4934      	ldr	r1, [pc, #208]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 8002730:	4313      	orrs	r3, r2
 8002732:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002734:	f7fe fc9c 	bl	8001070 <HAL_GetTick>
 8002738:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273a:	e00a      	b.n	8002752 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800273c:	f7fe fc98 	bl	8001070 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	f241 3288 	movw	r2, #5000	; 0x1388
 800274a:	4293      	cmp	r3, r2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e04f      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002752:	4b2b      	ldr	r3, [pc, #172]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 020c 	and.w	r2, r3, #12
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	429a      	cmp	r2, r3
 8002762:	d1eb      	bne.n	800273c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002764:	4b25      	ldr	r3, [pc, #148]	; (80027fc <HAL_RCC_ClockConfig+0x1b8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 030f 	and.w	r3, r3, #15
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d20c      	bcs.n	800278c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002772:	4b22      	ldr	r3, [pc, #136]	; (80027fc <HAL_RCC_ClockConfig+0x1b8>)
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800277a:	4b20      	ldr	r3, [pc, #128]	; (80027fc <HAL_RCC_ClockConfig+0x1b8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d001      	beq.n	800278c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e032      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002798:	4b19      	ldr	r3, [pc, #100]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	4916      	ldr	r1, [pc, #88]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d009      	beq.n	80027ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027b6:	4b12      	ldr	r3, [pc, #72]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	490e      	ldr	r1, [pc, #56]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027ca:	f000 f821 	bl	8002810 <HAL_RCC_GetSysClockFreq>
 80027ce:	4601      	mov	r1, r0
 80027d0:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	091b      	lsrs	r3, r3, #4
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <HAL_RCC_ClockConfig+0x1c0>)
 80027dc:	5cd3      	ldrb	r3, [r2, r3]
 80027de:	fa21 f303 	lsr.w	r3, r1, r3
 80027e2:	4a09      	ldr	r2, [pc, #36]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 80027e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027e6:	4b09      	ldr	r3, [pc, #36]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fe fb4e 	bl	8000e8c <HAL_InitTick>

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40023c00 	.word	0x40023c00
 8002800:	40023800 	.word	0x40023800
 8002804:	08005764 	.word	0x08005764
 8002808:	20000000 	.word	0x20000000
 800280c:	20000004 	.word	0x20000004

08002810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	607b      	str	r3, [r7, #4]
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	2300      	movs	r3, #0
 8002820:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002822:	2300      	movs	r3, #0
 8002824:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002826:	4b63      	ldr	r3, [pc, #396]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b04      	cmp	r3, #4
 8002830:	d007      	beq.n	8002842 <HAL_RCC_GetSysClockFreq+0x32>
 8002832:	2b08      	cmp	r3, #8
 8002834:	d008      	beq.n	8002848 <HAL_RCC_GetSysClockFreq+0x38>
 8002836:	2b00      	cmp	r3, #0
 8002838:	f040 80b4 	bne.w	80029a4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800283c:	4b5e      	ldr	r3, [pc, #376]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800283e:	60bb      	str	r3, [r7, #8]
       break;
 8002840:	e0b3      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002842:	4b5e      	ldr	r3, [pc, #376]	; (80029bc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002844:	60bb      	str	r3, [r7, #8]
      break;
 8002846:	e0b0      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002848:	4b5a      	ldr	r3, [pc, #360]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002850:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002852:	4b58      	ldr	r3, [pc, #352]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d04a      	beq.n	80028f4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800285e:	4b55      	ldr	r3, [pc, #340]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	099b      	lsrs	r3, r3, #6
 8002864:	f04f 0400 	mov.w	r4, #0
 8002868:	f240 11ff 	movw	r1, #511	; 0x1ff
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	ea03 0501 	and.w	r5, r3, r1
 8002874:	ea04 0602 	and.w	r6, r4, r2
 8002878:	4629      	mov	r1, r5
 800287a:	4632      	mov	r2, r6
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	f04f 0400 	mov.w	r4, #0
 8002884:	0154      	lsls	r4, r2, #5
 8002886:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800288a:	014b      	lsls	r3, r1, #5
 800288c:	4619      	mov	r1, r3
 800288e:	4622      	mov	r2, r4
 8002890:	1b49      	subs	r1, r1, r5
 8002892:	eb62 0206 	sbc.w	r2, r2, r6
 8002896:	f04f 0300 	mov.w	r3, #0
 800289a:	f04f 0400 	mov.w	r4, #0
 800289e:	0194      	lsls	r4, r2, #6
 80028a0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80028a4:	018b      	lsls	r3, r1, #6
 80028a6:	1a5b      	subs	r3, r3, r1
 80028a8:	eb64 0402 	sbc.w	r4, r4, r2
 80028ac:	f04f 0100 	mov.w	r1, #0
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	00e2      	lsls	r2, r4, #3
 80028b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80028ba:	00d9      	lsls	r1, r3, #3
 80028bc:	460b      	mov	r3, r1
 80028be:	4614      	mov	r4, r2
 80028c0:	195b      	adds	r3, r3, r5
 80028c2:	eb44 0406 	adc.w	r4, r4, r6
 80028c6:	f04f 0100 	mov.w	r1, #0
 80028ca:	f04f 0200 	mov.w	r2, #0
 80028ce:	0262      	lsls	r2, r4, #9
 80028d0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80028d4:	0259      	lsls	r1, r3, #9
 80028d6:	460b      	mov	r3, r1
 80028d8:	4614      	mov	r4, r2
 80028da:	4618      	mov	r0, r3
 80028dc:	4621      	mov	r1, r4
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f04f 0400 	mov.w	r4, #0
 80028e4:	461a      	mov	r2, r3
 80028e6:	4623      	mov	r3, r4
 80028e8:	f7fd fc7a 	bl	80001e0 <__aeabi_uldivmod>
 80028ec:	4603      	mov	r3, r0
 80028ee:	460c      	mov	r4, r1
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	e049      	b.n	8002988 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028f4:	4b2f      	ldr	r3, [pc, #188]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	099b      	lsrs	r3, r3, #6
 80028fa:	f04f 0400 	mov.w	r4, #0
 80028fe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	ea03 0501 	and.w	r5, r3, r1
 800290a:	ea04 0602 	and.w	r6, r4, r2
 800290e:	4629      	mov	r1, r5
 8002910:	4632      	mov	r2, r6
 8002912:	f04f 0300 	mov.w	r3, #0
 8002916:	f04f 0400 	mov.w	r4, #0
 800291a:	0154      	lsls	r4, r2, #5
 800291c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002920:	014b      	lsls	r3, r1, #5
 8002922:	4619      	mov	r1, r3
 8002924:	4622      	mov	r2, r4
 8002926:	1b49      	subs	r1, r1, r5
 8002928:	eb62 0206 	sbc.w	r2, r2, r6
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	f04f 0400 	mov.w	r4, #0
 8002934:	0194      	lsls	r4, r2, #6
 8002936:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800293a:	018b      	lsls	r3, r1, #6
 800293c:	1a5b      	subs	r3, r3, r1
 800293e:	eb64 0402 	sbc.w	r4, r4, r2
 8002942:	f04f 0100 	mov.w	r1, #0
 8002946:	f04f 0200 	mov.w	r2, #0
 800294a:	00e2      	lsls	r2, r4, #3
 800294c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002950:	00d9      	lsls	r1, r3, #3
 8002952:	460b      	mov	r3, r1
 8002954:	4614      	mov	r4, r2
 8002956:	195b      	adds	r3, r3, r5
 8002958:	eb44 0406 	adc.w	r4, r4, r6
 800295c:	f04f 0100 	mov.w	r1, #0
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	02a2      	lsls	r2, r4, #10
 8002966:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800296a:	0299      	lsls	r1, r3, #10
 800296c:	460b      	mov	r3, r1
 800296e:	4614      	mov	r4, r2
 8002970:	4618      	mov	r0, r3
 8002972:	4621      	mov	r1, r4
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f04f 0400 	mov.w	r4, #0
 800297a:	461a      	mov	r2, r3
 800297c:	4623      	mov	r3, r4
 800297e:	f7fd fc2f 	bl	80001e0 <__aeabi_uldivmod>
 8002982:	4603      	mov	r3, r0
 8002984:	460c      	mov	r4, r1
 8002986:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002988:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	0c1b      	lsrs	r3, r3, #16
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	3301      	adds	r3, #1
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a0:	60bb      	str	r3, [r7, #8]
      break;
 80029a2:	e002      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029a4:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80029a6:	60bb      	str	r3, [r7, #8]
      break;
 80029a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029aa:	68bb      	ldr	r3, [r7, #8]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029b4:	40023800 	.word	0x40023800
 80029b8:	00f42400 	.word	0x00f42400
 80029bc:	007a1200 	.word	0x007a1200

080029c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029c4:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029c6:	681b      	ldr	r3, [r3, #0]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	20000000 	.word	0x20000000

080029d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029dc:	f7ff fff0 	bl	80029c0 <HAL_RCC_GetHCLKFreq>
 80029e0:	4601      	mov	r1, r0
 80029e2:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	0a9b      	lsrs	r3, r3, #10
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	4a03      	ldr	r2, [pc, #12]	; (80029fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ee:	5cd3      	ldrb	r3, [r2, r3]
 80029f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40023800 	.word	0x40023800
 80029fc:	08005774 	.word	0x08005774

08002a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a04:	f7ff ffdc 	bl	80029c0 <HAL_RCC_GetHCLKFreq>
 8002a08:	4601      	mov	r1, r0
 8002a0a:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	0b5b      	lsrs	r3, r3, #13
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	4a03      	ldr	r2, [pc, #12]	; (8002a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a16:	5cd3      	ldrb	r3, [r2, r3]
 8002a18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40023800 	.word	0x40023800
 8002a24:	08005774 	.word	0x08005774

08002a28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	220f      	movs	r2, #15
 8002a36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a38:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <HAL_RCC_GetClockConfig+0x5c>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 0203 	and.w	r2, r3, #3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a44:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <HAL_RCC_GetClockConfig+0x5c>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a50:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <HAL_RCC_GetClockConfig+0x5c>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a5c:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <HAL_RCC_GetClockConfig+0x5c>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	08db      	lsrs	r3, r3, #3
 8002a62:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a6a:	4b07      	ldr	r3, [pc, #28]	; (8002a88 <HAL_RCC_GetClockConfig+0x60>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 020f 	and.w	r2, r3, #15
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	601a      	str	r2, [r3, #0]
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	40023800 	.word	0x40023800
 8002a88:	40023c00 	.word	0x40023c00

08002a8c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d105      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d038      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ab4:	4b68      	ldr	r3, [pc, #416]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002aba:	f7fe fad9 	bl	8001070 <HAL_GetTick>
 8002abe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ac2:	f7fe fad5 	bl	8001070 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e0bd      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ad4:	4b61      	ldr	r3, [pc, #388]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1f0      	bne.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	019b      	lsls	r3, r3, #6
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	071b      	lsls	r3, r3, #28
 8002af2:	495a      	ldr	r1, [pc, #360]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002afa:	4b57      	ldr	r3, [pc, #348]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b00:	f7fe fab6 	bl	8001070 <HAL_GetTick>
 8002b04:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b08:	f7fe fab2 	bl	8001070 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e09a      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b1a:	4b50      	ldr	r3, [pc, #320]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 8083 	beq.w	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	4b48      	ldr	r3, [pc, #288]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	4a47      	ldr	r2, [pc, #284]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b42:	6413      	str	r3, [r2, #64]	; 0x40
 8002b44:	4b45      	ldr	r3, [pc, #276]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002b50:	4b43      	ldr	r3, [pc, #268]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a42      	ldr	r2, [pc, #264]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b5a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b5c:	f7fe fa88 	bl	8001070 <HAL_GetTick>
 8002b60:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b64:	f7fe fa84 	bl	8001070 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e06c      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b76:	4b3a      	ldr	r3, [pc, #232]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b82:	4b36      	ldr	r3, [pc, #216]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b8a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d02f      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d028      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ba0:	4b2e      	ldr	r3, [pc, #184]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002baa:	4b2e      	ldr	r3, [pc, #184]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bb0:	4b2c      	ldr	r3, [pc, #176]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002bb6:	4a29      	ldr	r2, [pc, #164]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002bbc:	4b27      	ldr	r3, [pc, #156]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d114      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002bc8:	f7fe fa52 	bl	8001070 <HAL_GetTick>
 8002bcc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bce:	e00a      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd0:	f7fe fa4e 	bl	8001070 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e034      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be6:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0ee      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bfe:	d10d      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002c00:	4b16      	ldr	r3, [pc, #88]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c14:	4911      	ldr	r1, [pc, #68]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	608b      	str	r3, [r1, #8]
 8002c1a:	e005      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002c1c:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	4a0e      	ldr	r2, [pc, #56]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c22:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c26:	6093      	str	r3, [r2, #8]
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c34:	4909      	ldr	r1, [pc, #36]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	7d1a      	ldrb	r2, [r3, #20]
 8002c4a:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002c4c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	42470068 	.word	0x42470068
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	40007000 	.word	0x40007000
 8002c64:	42470e40 	.word	0x42470e40
 8002c68:	424711e0 	.word	0x424711e0

08002c6c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b087      	sub	sp, #28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d13f      	bne.n	8002d0a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002c8a:	4b23      	ldr	r3, [pc, #140]	; (8002d18 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c92:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d004      	beq.n	8002ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d131      	bne.n	8002d02 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002c9e:	4b1f      	ldr	r3, [pc, #124]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002ca0:	617b      	str	r3, [r7, #20]
          break;
 8002ca2:	e031      	b.n	8002d08 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002ca4:	4b1c      	ldr	r3, [pc, #112]	; (8002d18 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cb0:	d109      	bne.n	8002cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002cb2:	4b19      	ldr	r3, [pc, #100]	; (8002d18 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cbc:	4a18      	ldr	r2, [pc, #96]	; (8002d20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002cc6:	4b14      	ldr	r3, [pc, #80]	; (8002d18 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ccc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cd0:	4a14      	ldr	r2, [pc, #80]	; (8002d24 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd6:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002cd8:	4b0f      	ldr	r3, [pc, #60]	; (8002d18 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cde:	099b      	lsrs	r3, r3, #6
 8002ce0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	fb02 f303 	mul.w	r3, r2, r3
 8002cea:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002cec:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cf2:	0f1b      	lsrs	r3, r3, #28
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfe:	617b      	str	r3, [r7, #20]
          break;
 8002d00:	e002      	b.n	8002d08 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	617b      	str	r3, [r7, #20]
          break;
 8002d06:	bf00      	nop
        }
      }
      break;
 8002d08:	bf00      	nop
    }
  }
  return frequency;
 8002d0a:	697b      	ldr	r3, [r7, #20]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	371c      	adds	r7, #28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	00bb8000 	.word	0x00bb8000
 8002d20:	007a1200 	.word	0x007a1200
 8002d24:	00f42400 	.word	0x00f42400

08002d28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e056      	b.n	8002de8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d106      	bne.n	8002d5a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7fe f851 	bl	8000dfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d70:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	431a      	orrs	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	ea42 0103 	orr.w	r1, r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	0c1b      	lsrs	r3, r3, #16
 8002db8:	f003 0104 	and.w	r1, r3, #4
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	69da      	ldr	r2, [r3, #28]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dd6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e01d      	b.n	8002e3e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d106      	bne.n	8002e1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f815 	bl	8002e46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4610      	mov	r0, r2
 8002e30:	f000 f968 	bl	8003104 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b085      	sub	sp, #20
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f042 0201 	orr.w	r2, r2, #1
 8002e70:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2b06      	cmp	r3, #6
 8002e82:	d007      	beq.n	8002e94 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b082      	sub	sp, #8
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d122      	bne.n	8002efe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d11b      	bne.n	8002efe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f06f 0202 	mvn.w	r2, #2
 8002ece:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f8ee 	bl	80030c6 <HAL_TIM_IC_CaptureCallback>
 8002eea:	e005      	b.n	8002ef8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f8e0 	bl	80030b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f8f1 	bl	80030da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	d122      	bne.n	8002f52 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f003 0304 	and.w	r3, r3, #4
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d11b      	bne.n	8002f52 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f06f 0204 	mvn.w	r2, #4
 8002f22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f8c4 	bl	80030c6 <HAL_TIM_IC_CaptureCallback>
 8002f3e:	e005      	b.n	8002f4c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f8b6 	bl	80030b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f8c7 	bl	80030da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	f003 0308 	and.w	r3, r3, #8
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d122      	bne.n	8002fa6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d11b      	bne.n	8002fa6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f06f 0208 	mvn.w	r2, #8
 8002f76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2204      	movs	r2, #4
 8002f7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	f003 0303 	and.w	r3, r3, #3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f89a 	bl	80030c6 <HAL_TIM_IC_CaptureCallback>
 8002f92:	e005      	b.n	8002fa0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f88c 	bl	80030b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f89d 	bl	80030da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	f003 0310 	and.w	r3, r3, #16
 8002fb0:	2b10      	cmp	r3, #16
 8002fb2:	d122      	bne.n	8002ffa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f003 0310 	and.w	r3, r3, #16
 8002fbe:	2b10      	cmp	r3, #16
 8002fc0:	d11b      	bne.n	8002ffa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f06f 0210 	mvn.w	r2, #16
 8002fca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2208      	movs	r2, #8
 8002fd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f870 	bl	80030c6 <HAL_TIM_IC_CaptureCallback>
 8002fe6:	e005      	b.n	8002ff4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f862 	bl	80030b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f873 	bl	80030da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b01      	cmp	r3, #1
 8003006:	d10e      	bne.n	8003026 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b01      	cmp	r3, #1
 8003014:	d107      	bne.n	8003026 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f06f 0201 	mvn.w	r2, #1
 800301e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7fd fd8f 	bl	8000b44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003030:	2b80      	cmp	r3, #128	; 0x80
 8003032:	d10e      	bne.n	8003052 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303e:	2b80      	cmp	r3, #128	; 0x80
 8003040:	d107      	bne.n	8003052 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800304a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f8e3 	bl	8003218 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305c:	2b40      	cmp	r3, #64	; 0x40
 800305e:	d10e      	bne.n	800307e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306a:	2b40      	cmp	r3, #64	; 0x40
 800306c:	d107      	bne.n	800307e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f838 	bl	80030ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	f003 0320 	and.w	r3, r3, #32
 8003088:	2b20      	cmp	r3, #32
 800308a:	d10e      	bne.n	80030aa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f003 0320 	and.w	r3, r3, #32
 8003096:	2b20      	cmp	r3, #32
 8003098:	d107      	bne.n	80030aa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f06f 0220 	mvn.w	r2, #32
 80030a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f8ad 	bl	8003204 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b083      	sub	sp, #12
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030ce:	bf00      	nop
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
	...

08003104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a34      	ldr	r2, [pc, #208]	; (80031e8 <TIM_Base_SetConfig+0xe4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d00f      	beq.n	800313c <TIM_Base_SetConfig+0x38>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003122:	d00b      	beq.n	800313c <TIM_Base_SetConfig+0x38>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a31      	ldr	r2, [pc, #196]	; (80031ec <TIM_Base_SetConfig+0xe8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d007      	beq.n	800313c <TIM_Base_SetConfig+0x38>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a30      	ldr	r2, [pc, #192]	; (80031f0 <TIM_Base_SetConfig+0xec>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d003      	beq.n	800313c <TIM_Base_SetConfig+0x38>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a2f      	ldr	r2, [pc, #188]	; (80031f4 <TIM_Base_SetConfig+0xf0>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d108      	bne.n	800314e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	4313      	orrs	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a25      	ldr	r2, [pc, #148]	; (80031e8 <TIM_Base_SetConfig+0xe4>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d01b      	beq.n	800318e <TIM_Base_SetConfig+0x8a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800315c:	d017      	beq.n	800318e <TIM_Base_SetConfig+0x8a>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a22      	ldr	r2, [pc, #136]	; (80031ec <TIM_Base_SetConfig+0xe8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d013      	beq.n	800318e <TIM_Base_SetConfig+0x8a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a21      	ldr	r2, [pc, #132]	; (80031f0 <TIM_Base_SetConfig+0xec>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d00f      	beq.n	800318e <TIM_Base_SetConfig+0x8a>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a20      	ldr	r2, [pc, #128]	; (80031f4 <TIM_Base_SetConfig+0xf0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00b      	beq.n	800318e <TIM_Base_SetConfig+0x8a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a1f      	ldr	r2, [pc, #124]	; (80031f8 <TIM_Base_SetConfig+0xf4>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d007      	beq.n	800318e <TIM_Base_SetConfig+0x8a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a1e      	ldr	r2, [pc, #120]	; (80031fc <TIM_Base_SetConfig+0xf8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d003      	beq.n	800318e <TIM_Base_SetConfig+0x8a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a1d      	ldr	r2, [pc, #116]	; (8003200 <TIM_Base_SetConfig+0xfc>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d108      	bne.n	80031a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a08      	ldr	r2, [pc, #32]	; (80031e8 <TIM_Base_SetConfig+0xe4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d103      	bne.n	80031d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	615a      	str	r2, [r3, #20]
}
 80031da:	bf00      	nop
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	40010000 	.word	0x40010000
 80031ec:	40000400 	.word	0x40000400
 80031f0:	40000800 	.word	0x40000800
 80031f4:	40000c00 	.word	0x40000c00
 80031f8:	40014000 	.word	0x40014000
 80031fc:	40014400 	.word	0x40014400
 8003200:	40014800 	.word	0x40014800

08003204 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800323a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800323e:	2b84      	cmp	r3, #132	; 0x84
 8003240:	d005      	beq.n	800324e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003242:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	4413      	add	r3, r2
 800324a:	3303      	adds	r3, #3
 800324c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800324e:	68fb      	ldr	r3, [r7, #12]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003262:	f3ef 8305 	mrs	r3, IPSR
 8003266:	607b      	str	r3, [r7, #4]
  return(result);
 8003268:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800326a:	2b00      	cmp	r3, #0
 800326c:	bf14      	ite	ne
 800326e:	2301      	movne	r3, #1
 8003270:	2300      	moveq	r3, #0
 8003272:	b2db      	uxtb	r3, r3
}
 8003274:	4618      	mov	r0, r3
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003284:	f001 f8dc 	bl	8004440 <vTaskStartScheduler>
  
  return osOK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	bd80      	pop	{r7, pc}

0800328e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800328e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003290:	b089      	sub	sp, #36	; 0x24
 8003292:	af04      	add	r7, sp, #16
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d020      	beq.n	80032e2 <osThreadCreate+0x54>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d01c      	beq.n	80032e2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685c      	ldr	r4, [r3, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681d      	ldr	r5, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691e      	ldr	r6, [r3, #16]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff ffb6 	bl	800322c <makeFreeRtosPriority>
 80032c0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032ca:	9202      	str	r2, [sp, #8]
 80032cc:	9301      	str	r3, [sp, #4]
 80032ce:	9100      	str	r1, [sp, #0]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	4632      	mov	r2, r6
 80032d4:	4629      	mov	r1, r5
 80032d6:	4620      	mov	r0, r4
 80032d8:	f000 fef7 	bl	80040ca <xTaskCreateStatic>
 80032dc:	4603      	mov	r3, r0
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	e01c      	b.n	800331c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685c      	ldr	r4, [r3, #4]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032ee:	b29e      	uxth	r6, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff ff98 	bl	800322c <makeFreeRtosPriority>
 80032fc:	4602      	mov	r2, r0
 80032fe:	f107 030c 	add.w	r3, r7, #12
 8003302:	9301      	str	r3, [sp, #4]
 8003304:	9200      	str	r2, [sp, #0]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	4632      	mov	r2, r6
 800330a:	4629      	mov	r1, r5
 800330c:	4620      	mov	r0, r4
 800330e:	f000 ff35 	bl	800417c <xTaskCreate>
 8003312:	4603      	mov	r3, r0
 8003314:	2b01      	cmp	r3, #1
 8003316:	d001      	beq.n	800331c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003318:	2300      	movs	r3, #0
 800331a:	e000      	b.n	800331e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800331c:	68fb      	ldr	r3, [r7, #12]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003326 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b084      	sub	sp, #16
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <osDelay+0x16>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	e000      	b.n	800333e <osDelay+0x18>
 800333c:	2301      	movs	r3, #1
 800333e:	4618      	mov	r0, r3
 8003340:	f001 f84a 	bl	80043d8 <vTaskDelay>
  
  return osOK;
 8003344:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800334e:	b590      	push	{r4, r7, lr}
 8003350:	b085      	sub	sp, #20
 8003352:	af02      	add	r7, sp, #8
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d012      	beq.n	8003386 <osMessageCreate+0x38>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00e      	beq.n	8003386 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6818      	ldr	r0, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6859      	ldr	r1, [r3, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68dc      	ldr	r4, [r3, #12]
 8003378:	2300      	movs	r3, #0
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	4623      	mov	r3, r4
 800337e:	f000 f9df 	bl	8003740 <xQueueGenericCreateStatic>
 8003382:	4603      	mov	r3, r0
 8003384:	e008      	b.n	8003398 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6818      	ldr	r0, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	4619      	mov	r1, r3
 8003392:	f000 fa47 	bl	8003824 <xQueueGenericCreate>
 8003396:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003398:	4618      	mov	r0, r3
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	bd90      	pop	{r4, r7, pc}

080033a0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80033ac:	2300      	movs	r3, #0
 80033ae:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <osMessagePut+0x1e>
    ticks = 1;
 80033ba:	2301      	movs	r3, #1
 80033bc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80033be:	f7ff ff4d 	bl	800325c <inHandlerMode>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d018      	beq.n	80033fa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80033c8:	f107 0210 	add.w	r2, r7, #16
 80033cc:	f107 0108 	add.w	r1, r7, #8
 80033d0:	2300      	movs	r3, #0
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 fb7c 	bl	8003ad0 <xQueueGenericSendFromISR>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d001      	beq.n	80033e2 <osMessagePut+0x42>
      return osErrorOS;
 80033de:	23ff      	movs	r3, #255	; 0xff
 80033e0:	e018      	b.n	8003414 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d014      	beq.n	8003412 <osMessagePut+0x72>
 80033e8:	4b0c      	ldr	r3, [pc, #48]	; (800341c <osMessagePut+0x7c>)
 80033ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	f3bf 8f6f 	isb	sy
 80033f8:	e00b      	b.n	8003412 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80033fa:	f107 0108 	add.w	r1, r7, #8
 80033fe:	2300      	movs	r3, #0
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 fa6a 	bl	80038dc <xQueueGenericSend>
 8003408:	4603      	mov	r3, r0
 800340a:	2b01      	cmp	r3, #1
 800340c:	d001      	beq.n	8003412 <osMessagePut+0x72>
      return osErrorOS;
 800340e:	23ff      	movs	r3, #255	; 0xff
 8003410:	e000      	b.n	8003414 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	e000ed04 	.word	0xe000ed04

08003420 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8003420:	b590      	push	{r4, r7, lr}
 8003422:	b08b      	sub	sp, #44	; 0x2c
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8003430:	2300      	movs	r3, #0
 8003432:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10a      	bne.n	8003450 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800343a:	2380      	movs	r3, #128	; 0x80
 800343c:	617b      	str	r3, [r7, #20]
    return event;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	461c      	mov	r4, r3
 8003442:	f107 0314 	add.w	r3, r7, #20
 8003446:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800344a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800344e:	e054      	b.n	80034fa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8003450:	2300      	movs	r3, #0
 8003452:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003454:	2300      	movs	r3, #0
 8003456:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345e:	d103      	bne.n	8003468 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8003460:	f04f 33ff 	mov.w	r3, #4294967295
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
 8003466:	e009      	b.n	800347c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d006      	beq.n	800347c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <osMessageGet+0x5c>
      ticks = 1;
 8003478:	2301      	movs	r3, #1
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800347c:	f7ff feee 	bl	800325c <inHandlerMode>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d01c      	beq.n	80034c0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8003486:	f107 0220 	add.w	r2, r7, #32
 800348a:	f107 0314 	add.w	r3, r7, #20
 800348e:	3304      	adds	r3, #4
 8003490:	4619      	mov	r1, r3
 8003492:	68b8      	ldr	r0, [r7, #8]
 8003494:	f000 fc8c 	bl	8003db0 <xQueueReceiveFromISR>
 8003498:	4603      	mov	r3, r0
 800349a:	2b01      	cmp	r3, #1
 800349c:	d102      	bne.n	80034a4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800349e:	2310      	movs	r3, #16
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	e001      	b.n	80034a8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d01d      	beq.n	80034ea <osMessageGet+0xca>
 80034ae:	4b15      	ldr	r3, [pc, #84]	; (8003504 <osMessageGet+0xe4>)
 80034b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	f3bf 8f4f 	dsb	sy
 80034ba:	f3bf 8f6f 	isb	sy
 80034be:	e014      	b.n	80034ea <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80034c0:	f107 0314 	add.w	r3, r7, #20
 80034c4:	3304      	adds	r3, #4
 80034c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c8:	4619      	mov	r1, r3
 80034ca:	68b8      	ldr	r0, [r7, #8]
 80034cc:	f000 fb94 	bl	8003bf8 <xQueueReceive>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d102      	bne.n	80034dc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80034d6:	2310      	movs	r3, #16
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	e006      	b.n	80034ea <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <osMessageGet+0xc6>
 80034e2:	2300      	movs	r3, #0
 80034e4:	e000      	b.n	80034e8 <osMessageGet+0xc8>
 80034e6:	2340      	movs	r3, #64	; 0x40
 80034e8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	461c      	mov	r4, r3
 80034ee:	f107 0314 	add.w	r3, r7, #20
 80034f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80034f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	372c      	adds	r7, #44	; 0x2c
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd90      	pop	{r4, r7, pc}
 8003502:	bf00      	nop
 8003504:	e000ed04 	.word	0xe000ed04

08003508 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f103 0208 	add.w	r2, r3, #8
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f04f 32ff 	mov.w	r2, #4294967295
 8003520:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f103 0208 	add.w	r2, r3, #8
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f103 0208 	add.w	r2, r3, #8
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003562:	b480      	push	{r7}
 8003564:	b085      	sub	sp, #20
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	601a      	str	r2, [r3, #0]
}
 800359e:	bf00      	nop
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035aa:	b480      	push	{r7}
 80035ac:	b085      	sub	sp, #20
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
 80035b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c0:	d103      	bne.n	80035ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	e00c      	b.n	80035e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	3308      	adds	r3, #8
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	e002      	b.n	80035d8 <vListInsert+0x2e>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d2f6      	bcs.n	80035d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	601a      	str	r2, [r3, #0]
}
 8003610:	bf00      	nop
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6892      	ldr	r2, [r2, #8]
 8003632:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6852      	ldr	r2, [r2, #4]
 800363c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	429a      	cmp	r2, r3
 8003646:	d103      	bne.n	8003650 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	1e5a      	subs	r2, r3, #1
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d109      	bne.n	8003698 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003688:	f383 8811 	msr	BASEPRI, r3
 800368c:	f3bf 8f6f 	isb	sy
 8003690:	f3bf 8f4f 	dsb	sy
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	e7fe      	b.n	8003696 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003698:	f001 fd00 	bl	800509c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a4:	68f9      	ldr	r1, [r7, #12]
 80036a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036a8:	fb01 f303 	mul.w	r3, r1, r3
 80036ac:	441a      	add	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c8:	3b01      	subs	r3, #1
 80036ca:	68f9      	ldr	r1, [r7, #12]
 80036cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036ce:	fb01 f303 	mul.w	r3, r1, r3
 80036d2:	441a      	add	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	22ff      	movs	r2, #255	; 0xff
 80036dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	22ff      	movs	r2, #255	; 0xff
 80036e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d114      	bne.n	8003718 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d01a      	beq.n	800372c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	3310      	adds	r3, #16
 80036fa:	4618      	mov	r0, r3
 80036fc:	f001 f8e2 	bl	80048c4 <xTaskRemoveFromEventList>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d012      	beq.n	800372c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003706:	4b0d      	ldr	r3, [pc, #52]	; (800373c <xQueueGenericReset+0xcc>)
 8003708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	f3bf 8f4f 	dsb	sy
 8003712:	f3bf 8f6f 	isb	sy
 8003716:	e009      	b.n	800372c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	3310      	adds	r3, #16
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff fef3 	bl	8003508 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	3324      	adds	r3, #36	; 0x24
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff feee 	bl	8003508 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800372c:	f001 fce4 	bl	80050f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003730:	2301      	movs	r3, #1
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	e000ed04 	.word	0xe000ed04

08003740 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08e      	sub	sp, #56	; 0x38
 8003744:	af02      	add	r7, sp, #8
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
 800374c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d109      	bne.n	8003768 <xQueueGenericCreateStatic+0x28>
 8003754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003758:	f383 8811 	msr	BASEPRI, r3
 800375c:	f3bf 8f6f 	isb	sy
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	62bb      	str	r3, [r7, #40]	; 0x28
 8003766:	e7fe      	b.n	8003766 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d109      	bne.n	8003782 <xQueueGenericCreateStatic+0x42>
 800376e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003772:	f383 8811 	msr	BASEPRI, r3
 8003776:	f3bf 8f6f 	isb	sy
 800377a:	f3bf 8f4f 	dsb	sy
 800377e:	627b      	str	r3, [r7, #36]	; 0x24
 8003780:	e7fe      	b.n	8003780 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d002      	beq.n	800378e <xQueueGenericCreateStatic+0x4e>
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <xQueueGenericCreateStatic+0x52>
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <xQueueGenericCreateStatic+0x54>
 8003792:	2300      	movs	r3, #0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d109      	bne.n	80037ac <xQueueGenericCreateStatic+0x6c>
 8003798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379c:	f383 8811 	msr	BASEPRI, r3
 80037a0:	f3bf 8f6f 	isb	sy
 80037a4:	f3bf 8f4f 	dsb	sy
 80037a8:	623b      	str	r3, [r7, #32]
 80037aa:	e7fe      	b.n	80037aa <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d102      	bne.n	80037b8 <xQueueGenericCreateStatic+0x78>
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <xQueueGenericCreateStatic+0x7c>
 80037b8:	2301      	movs	r3, #1
 80037ba:	e000      	b.n	80037be <xQueueGenericCreateStatic+0x7e>
 80037bc:	2300      	movs	r3, #0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d109      	bne.n	80037d6 <xQueueGenericCreateStatic+0x96>
 80037c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c6:	f383 8811 	msr	BASEPRI, r3
 80037ca:	f3bf 8f6f 	isb	sy
 80037ce:	f3bf 8f4f 	dsb	sy
 80037d2:	61fb      	str	r3, [r7, #28]
 80037d4:	e7fe      	b.n	80037d4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80037d6:	2348      	movs	r3, #72	; 0x48
 80037d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b48      	cmp	r3, #72	; 0x48
 80037de:	d009      	beq.n	80037f4 <xQueueGenericCreateStatic+0xb4>
 80037e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e4:	f383 8811 	msr	BASEPRI, r3
 80037e8:	f3bf 8f6f 	isb	sy
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	61bb      	str	r3, [r7, #24]
 80037f2:	e7fe      	b.n	80037f2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80037f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00d      	beq.n	800381a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80037fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003806:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800380a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	4613      	mov	r3, r2
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	68b9      	ldr	r1, [r7, #8]
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 f842 	bl	800389e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800381a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800381c:	4618      	mov	r0, r3
 800381e:	3730      	adds	r7, #48	; 0x30
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08a      	sub	sp, #40	; 0x28
 8003828:	af02      	add	r7, sp, #8
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	4613      	mov	r3, r2
 8003830:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d109      	bne.n	800384c <xQueueGenericCreate+0x28>
 8003838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383c:	f383 8811 	msr	BASEPRI, r3
 8003840:	f3bf 8f6f 	isb	sy
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	613b      	str	r3, [r7, #16]
 800384a:	e7fe      	b.n	800384a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d102      	bne.n	8003858 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003852:	2300      	movs	r3, #0
 8003854:	61fb      	str	r3, [r7, #28]
 8003856:	e004      	b.n	8003862 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	fb02 f303 	mul.w	r3, r2, r3
 8003860:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	3348      	adds	r3, #72	; 0x48
 8003866:	4618      	mov	r0, r3
 8003868:	f001 fd32 	bl	80052d0 <pvPortMalloc>
 800386c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00f      	beq.n	8003894 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	3348      	adds	r3, #72	; 0x48
 8003878:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003882:	79fa      	ldrb	r2, [r7, #7]
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	4613      	mov	r3, r2
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	68b9      	ldr	r1, [r7, #8]
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 f805 	bl	800389e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003894:	69bb      	ldr	r3, [r7, #24]
	}
 8003896:	4618      	mov	r0, r3
 8003898:	3720      	adds	r7, #32
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	60f8      	str	r0, [r7, #12]
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	607a      	str	r2, [r7, #4]
 80038aa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d103      	bne.n	80038ba <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	e002      	b.n	80038c0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80038cc:	2101      	movs	r1, #1
 80038ce:	69b8      	ldr	r0, [r7, #24]
 80038d0:	f7ff fece 	bl	8003670 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80038d4:	bf00      	nop
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08e      	sub	sp, #56	; 0x38
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
 80038e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038ea:	2300      	movs	r3, #0
 80038ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80038f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d109      	bne.n	800390c <xQueueGenericSend+0x30>
 80038f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fc:	f383 8811 	msr	BASEPRI, r3
 8003900:	f3bf 8f6f 	isb	sy
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	62bb      	str	r3, [r7, #40]	; 0x28
 800390a:	e7fe      	b.n	800390a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d103      	bne.n	800391a <xQueueGenericSend+0x3e>
 8003912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <xQueueGenericSend+0x42>
 800391a:	2301      	movs	r3, #1
 800391c:	e000      	b.n	8003920 <xQueueGenericSend+0x44>
 800391e:	2300      	movs	r3, #0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d109      	bne.n	8003938 <xQueueGenericSend+0x5c>
 8003924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003928:	f383 8811 	msr	BASEPRI, r3
 800392c:	f3bf 8f6f 	isb	sy
 8003930:	f3bf 8f4f 	dsb	sy
 8003934:	627b      	str	r3, [r7, #36]	; 0x24
 8003936:	e7fe      	b.n	8003936 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2b02      	cmp	r3, #2
 800393c:	d103      	bne.n	8003946 <xQueueGenericSend+0x6a>
 800393e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003942:	2b01      	cmp	r3, #1
 8003944:	d101      	bne.n	800394a <xQueueGenericSend+0x6e>
 8003946:	2301      	movs	r3, #1
 8003948:	e000      	b.n	800394c <xQueueGenericSend+0x70>
 800394a:	2300      	movs	r3, #0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d109      	bne.n	8003964 <xQueueGenericSend+0x88>
 8003950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	623b      	str	r3, [r7, #32]
 8003962:	e7fe      	b.n	8003962 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003964:	f001 f96a 	bl	8004c3c <xTaskGetSchedulerState>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d102      	bne.n	8003974 <xQueueGenericSend+0x98>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <xQueueGenericSend+0x9c>
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <xQueueGenericSend+0x9e>
 8003978:	2300      	movs	r3, #0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d109      	bne.n	8003992 <xQueueGenericSend+0xb6>
 800397e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003982:	f383 8811 	msr	BASEPRI, r3
 8003986:	f3bf 8f6f 	isb	sy
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	61fb      	str	r3, [r7, #28]
 8003990:	e7fe      	b.n	8003990 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003992:	f001 fb83 	bl	800509c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800399a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399e:	429a      	cmp	r2, r3
 80039a0:	d302      	bcc.n	80039a8 <xQueueGenericSend+0xcc>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d129      	bne.n	80039fc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	68b9      	ldr	r1, [r7, #8]
 80039ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039ae:	f000 fa7c 	bl	8003eaa <prvCopyDataToQueue>
 80039b2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d010      	beq.n	80039de <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039be:	3324      	adds	r3, #36	; 0x24
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 ff7f 	bl	80048c4 <xTaskRemoveFromEventList>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d013      	beq.n	80039f4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80039cc:	4b3f      	ldr	r3, [pc, #252]	; (8003acc <xQueueGenericSend+0x1f0>)
 80039ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	e00a      	b.n	80039f4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d007      	beq.n	80039f4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80039e4:	4b39      	ldr	r3, [pc, #228]	; (8003acc <xQueueGenericSend+0x1f0>)
 80039e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80039f4:	f001 fb80 	bl	80050f8 <vPortExitCritical>
				return pdPASS;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e063      	b.n	8003ac4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d103      	bne.n	8003a0a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a02:	f001 fb79 	bl	80050f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a06:	2300      	movs	r3, #0
 8003a08:	e05c      	b.n	8003ac4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d106      	bne.n	8003a1e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a10:	f107 0314 	add.w	r3, r7, #20
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 ffb7 	bl	8004988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a1e:	f001 fb6b 	bl	80050f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a22:	f000 fd6b 	bl	80044fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a26:	f001 fb39 	bl	800509c <vPortEnterCritical>
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a30:	b25b      	sxtb	r3, r3
 8003a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a36:	d103      	bne.n	8003a40 <xQueueGenericSend+0x164>
 8003a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a46:	b25b      	sxtb	r3, r3
 8003a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4c:	d103      	bne.n	8003a56 <xQueueGenericSend+0x17a>
 8003a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a56:	f001 fb4f 	bl	80050f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a5a:	1d3a      	adds	r2, r7, #4
 8003a5c:	f107 0314 	add.w	r3, r7, #20
 8003a60:	4611      	mov	r1, r2
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 ffa6 	bl	80049b4 <xTaskCheckForTimeOut>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d124      	bne.n	8003ab8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a70:	f000 fb13 	bl	800409a <prvIsQueueFull>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d018      	beq.n	8003aac <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7c:	3310      	adds	r3, #16
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	4611      	mov	r1, r2
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 fefa 	bl	800487c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a8a:	f000 fa9e 	bl	8003fca <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a8e:	f000 fd43 	bl	8004518 <xTaskResumeAll>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f47f af7c 	bne.w	8003992 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003a9a:	4b0c      	ldr	r3, [pc, #48]	; (8003acc <xQueueGenericSend+0x1f0>)
 8003a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	f3bf 8f4f 	dsb	sy
 8003aa6:	f3bf 8f6f 	isb	sy
 8003aaa:	e772      	b.n	8003992 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003aac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aae:	f000 fa8c 	bl	8003fca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ab2:	f000 fd31 	bl	8004518 <xTaskResumeAll>
 8003ab6:	e76c      	b.n	8003992 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aba:	f000 fa86 	bl	8003fca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003abe:	f000 fd2b 	bl	8004518 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ac2:	2300      	movs	r3, #0
		}
	}
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3738      	adds	r7, #56	; 0x38
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	e000ed04 	.word	0xe000ed04

08003ad0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08e      	sub	sp, #56	; 0x38
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d109      	bne.n	8003afc <xQueueGenericSendFromISR+0x2c>
 8003ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aec:	f383 8811 	msr	BASEPRI, r3
 8003af0:	f3bf 8f6f 	isb	sy
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
 8003afa:	e7fe      	b.n	8003afa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d103      	bne.n	8003b0a <xQueueGenericSendFromISR+0x3a>
 8003b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <xQueueGenericSendFromISR+0x3e>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <xQueueGenericSendFromISR+0x40>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d109      	bne.n	8003b28 <xQueueGenericSendFromISR+0x58>
 8003b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	623b      	str	r3, [r7, #32]
 8003b26:	e7fe      	b.n	8003b26 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d103      	bne.n	8003b36 <xQueueGenericSendFromISR+0x66>
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d101      	bne.n	8003b3a <xQueueGenericSendFromISR+0x6a>
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <xQueueGenericSendFromISR+0x6c>
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d109      	bne.n	8003b54 <xQueueGenericSendFromISR+0x84>
 8003b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b44:	f383 8811 	msr	BASEPRI, r3
 8003b48:	f3bf 8f6f 	isb	sy
 8003b4c:	f3bf 8f4f 	dsb	sy
 8003b50:	61fb      	str	r3, [r7, #28]
 8003b52:	e7fe      	b.n	8003b52 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b54:	f001 fb7e 	bl	8005254 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b58:	f3ef 8211 	mrs	r2, BASEPRI
 8003b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b60:	f383 8811 	msr	BASEPRI, r3
 8003b64:	f3bf 8f6f 	isb	sy
 8003b68:	f3bf 8f4f 	dsb	sy
 8003b6c:	61ba      	str	r2, [r7, #24]
 8003b6e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b70:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b72:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d302      	bcc.n	8003b86 <xQueueGenericSendFromISR+0xb6>
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d12c      	bne.n	8003be0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	68b9      	ldr	r1, [r7, #8]
 8003b94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b96:	f000 f988 	bl	8003eaa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b9a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba2:	d112      	bne.n	8003bca <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d016      	beq.n	8003bda <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bae:	3324      	adds	r3, #36	; 0x24
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 fe87 	bl	80048c4 <xTaskRemoveFromEventList>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00e      	beq.n	8003bda <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00b      	beq.n	8003bda <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	e007      	b.n	8003bda <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003bce:	3301      	adds	r3, #1
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	b25a      	sxtb	r2, r3
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003bde:	e001      	b.n	8003be4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003be0:	2300      	movs	r3, #0
 8003be2:	637b      	str	r3, [r7, #52]	; 0x34
 8003be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3738      	adds	r7, #56	; 0x38
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b08c      	sub	sp, #48	; 0x30
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c04:	2300      	movs	r3, #0
 8003c06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d109      	bne.n	8003c26 <xQueueReceive+0x2e>
	__asm volatile
 8003c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c16:	f383 8811 	msr	BASEPRI, r3
 8003c1a:	f3bf 8f6f 	isb	sy
 8003c1e:	f3bf 8f4f 	dsb	sy
 8003c22:	623b      	str	r3, [r7, #32]
 8003c24:	e7fe      	b.n	8003c24 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d103      	bne.n	8003c34 <xQueueReceive+0x3c>
 8003c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <xQueueReceive+0x40>
 8003c34:	2301      	movs	r3, #1
 8003c36:	e000      	b.n	8003c3a <xQueueReceive+0x42>
 8003c38:	2300      	movs	r3, #0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d109      	bne.n	8003c52 <xQueueReceive+0x5a>
 8003c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c42:	f383 8811 	msr	BASEPRI, r3
 8003c46:	f3bf 8f6f 	isb	sy
 8003c4a:	f3bf 8f4f 	dsb	sy
 8003c4e:	61fb      	str	r3, [r7, #28]
 8003c50:	e7fe      	b.n	8003c50 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c52:	f000 fff3 	bl	8004c3c <xTaskGetSchedulerState>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d102      	bne.n	8003c62 <xQueueReceive+0x6a>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <xQueueReceive+0x6e>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <xQueueReceive+0x70>
 8003c66:	2300      	movs	r3, #0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d109      	bne.n	8003c80 <xQueueReceive+0x88>
 8003c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c70:	f383 8811 	msr	BASEPRI, r3
 8003c74:	f3bf 8f6f 	isb	sy
 8003c78:	f3bf 8f4f 	dsb	sy
 8003c7c:	61bb      	str	r3, [r7, #24]
 8003c7e:	e7fe      	b.n	8003c7e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c80:	f001 fa0c 	bl	800509c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d01f      	beq.n	8003cd0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c90:	68b9      	ldr	r1, [r7, #8]
 8003c92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c94:	f000 f973 	bl	8003f7e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	1e5a      	subs	r2, r3, #1
 8003c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00f      	beq.n	8003cc8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003caa:	3310      	adds	r3, #16
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 fe09 	bl	80048c4 <xTaskRemoveFromEventList>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d007      	beq.n	8003cc8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003cb8:	4b3c      	ldr	r3, [pc, #240]	; (8003dac <xQueueReceive+0x1b4>)
 8003cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003cc8:	f001 fa16 	bl	80050f8 <vPortExitCritical>
				return pdPASS;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e069      	b.n	8003da4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d103      	bne.n	8003cde <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003cd6:	f001 fa0f 	bl	80050f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	e062      	b.n	8003da4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d106      	bne.n	8003cf2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ce4:	f107 0310 	add.w	r3, r7, #16
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 fe4d 	bl	8004988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cf2:	f001 fa01 	bl	80050f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cf6:	f000 fc01 	bl	80044fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cfa:	f001 f9cf 	bl	800509c <vPortEnterCritical>
 8003cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d04:	b25b      	sxtb	r3, r3
 8003d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0a:	d103      	bne.n	8003d14 <xQueueReceive+0x11c>
 8003d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d1a:	b25b      	sxtb	r3, r3
 8003d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d20:	d103      	bne.n	8003d2a <xQueueReceive+0x132>
 8003d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d2a:	f001 f9e5 	bl	80050f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d2e:	1d3a      	adds	r2, r7, #4
 8003d30:	f107 0310 	add.w	r3, r7, #16
 8003d34:	4611      	mov	r1, r2
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 fe3c 	bl	80049b4 <xTaskCheckForTimeOut>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d123      	bne.n	8003d8a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d44:	f000 f993 	bl	800406e <prvIsQueueEmpty>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d017      	beq.n	8003d7e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d50:	3324      	adds	r3, #36	; 0x24
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	4611      	mov	r1, r2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 fd90 	bl	800487c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d5e:	f000 f934 	bl	8003fca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d62:	f000 fbd9 	bl	8004518 <xTaskResumeAll>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d189      	bne.n	8003c80 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003d6c:	4b0f      	ldr	r3, [pc, #60]	; (8003dac <xQueueReceive+0x1b4>)
 8003d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	f3bf 8f6f 	isb	sy
 8003d7c:	e780      	b.n	8003c80 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d80:	f000 f923 	bl	8003fca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d84:	f000 fbc8 	bl	8004518 <xTaskResumeAll>
 8003d88:	e77a      	b.n	8003c80 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d8c:	f000 f91d 	bl	8003fca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d90:	f000 fbc2 	bl	8004518 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d96:	f000 f96a 	bl	800406e <prvIsQueueEmpty>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f43f af6f 	beq.w	8003c80 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003da2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3730      	adds	r7, #48	; 0x30
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	e000ed04 	.word	0xe000ed04

08003db0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08e      	sub	sp, #56	; 0x38
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d109      	bne.n	8003dda <xQueueReceiveFromISR+0x2a>
 8003dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	623b      	str	r3, [r7, #32]
 8003dd8:	e7fe      	b.n	8003dd8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d103      	bne.n	8003de8 <xQueueReceiveFromISR+0x38>
 8003de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <xQueueReceiveFromISR+0x3c>
 8003de8:	2301      	movs	r3, #1
 8003dea:	e000      	b.n	8003dee <xQueueReceiveFromISR+0x3e>
 8003dec:	2300      	movs	r3, #0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d109      	bne.n	8003e06 <xQueueReceiveFromISR+0x56>
 8003df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	61fb      	str	r3, [r7, #28]
 8003e04:	e7fe      	b.n	8003e04 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e06:	f001 fa25 	bl	8005254 <vPortValidateInterruptPriority>
	__asm volatile
 8003e0a:	f3ef 8211 	mrs	r2, BASEPRI
 8003e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e12:	f383 8811 	msr	BASEPRI, r3
 8003e16:	f3bf 8f6f 	isb	sy
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	61ba      	str	r2, [r7, #24]
 8003e20:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003e22:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d02f      	beq.n	8003e92 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e3c:	68b9      	ldr	r1, [r7, #8]
 8003e3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e40:	f000 f89d 	bl	8003f7e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e46:	1e5a      	subs	r2, r3, #1
 8003e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003e4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e54:	d112      	bne.n	8003e7c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d016      	beq.n	8003e8c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e60:	3310      	adds	r3, #16
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 fd2e 	bl	80048c4 <xTaskRemoveFromEventList>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00e      	beq.n	8003e8c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00b      	beq.n	8003e8c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	e007      	b.n	8003e8c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e80:	3301      	adds	r3, #1
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	b25a      	sxtb	r2, r3
 8003e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e90:	e001      	b.n	8003e96 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8003e92:	2300      	movs	r3, #0
 8003e94:	637b      	str	r3, [r7, #52]	; 0x34
 8003e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e98:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3738      	adds	r7, #56	; 0x38
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b086      	sub	sp, #24
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	60f8      	str	r0, [r7, #12]
 8003eb2:	60b9      	str	r1, [r7, #8]
 8003eb4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10d      	bne.n	8003ee4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d14d      	bne.n	8003f6c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 fecf 	bl	8004c78 <xTaskPriorityDisinherit>
 8003eda:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	605a      	str	r2, [r3, #4]
 8003ee2:	e043      	b.n	8003f6c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d119      	bne.n	8003f1e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6898      	ldr	r0, [r3, #8]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	68b9      	ldr	r1, [r7, #8]
 8003ef6:	f001 fbe5 	bl	80056c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	441a      	add	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d32b      	bcc.n	8003f6c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	609a      	str	r2, [r3, #8]
 8003f1c:	e026      	b.n	8003f6c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	68d8      	ldr	r0, [r3, #12]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	461a      	mov	r2, r3
 8003f28:	68b9      	ldr	r1, [r7, #8]
 8003f2a:	f001 fbcb 	bl	80056c4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	425b      	negs	r3, r3
 8003f38:	441a      	add	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d207      	bcs.n	8003f5a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	425b      	negs	r3, r3
 8003f54:	441a      	add	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d105      	bne.n	8003f6c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003f74:	697b      	ldr	r3, [r7, #20]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b082      	sub	sp, #8
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d018      	beq.n	8003fc2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68da      	ldr	r2, [r3, #12]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	441a      	add	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d303      	bcc.n	8003fb2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68d9      	ldr	r1, [r3, #12]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	461a      	mov	r2, r3
 8003fbc:	6838      	ldr	r0, [r7, #0]
 8003fbe:	f001 fb81 	bl	80056c4 <memcpy>
	}
}
 8003fc2:	bf00      	nop
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b084      	sub	sp, #16
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003fd2:	f001 f863 	bl	800509c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fdc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fde:	e011      	b.n	8004004 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d012      	beq.n	800400e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3324      	adds	r3, #36	; 0x24
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 fc69 	bl	80048c4 <xTaskRemoveFromEventList>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003ff8:	f000 fd3c 	bl	8004a74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b2db      	uxtb	r3, r3
 8004002:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004008:	2b00      	cmp	r3, #0
 800400a:	dce9      	bgt.n	8003fe0 <prvUnlockQueue+0x16>
 800400c:	e000      	b.n	8004010 <prvUnlockQueue+0x46>
					break;
 800400e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	22ff      	movs	r2, #255	; 0xff
 8004014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004018:	f001 f86e 	bl	80050f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800401c:	f001 f83e 	bl	800509c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004026:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004028:	e011      	b.n	800404e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d012      	beq.n	8004058 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3310      	adds	r3, #16
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fc44 	bl	80048c4 <xTaskRemoveFromEventList>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004042:	f000 fd17 	bl	8004a74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004046:	7bbb      	ldrb	r3, [r7, #14]
 8004048:	3b01      	subs	r3, #1
 800404a:	b2db      	uxtb	r3, r3
 800404c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800404e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004052:	2b00      	cmp	r3, #0
 8004054:	dce9      	bgt.n	800402a <prvUnlockQueue+0x60>
 8004056:	e000      	b.n	800405a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004058:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	22ff      	movs	r2, #255	; 0xff
 800405e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004062:	f001 f849 	bl	80050f8 <vPortExitCritical>
}
 8004066:	bf00      	nop
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b084      	sub	sp, #16
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004076:	f001 f811 	bl	800509c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	2b00      	cmp	r3, #0
 8004080:	d102      	bne.n	8004088 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004082:	2301      	movs	r3, #1
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	e001      	b.n	800408c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004088:	2300      	movs	r3, #0
 800408a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800408c:	f001 f834 	bl	80050f8 <vPortExitCritical>

	return xReturn;
 8004090:	68fb      	ldr	r3, [r7, #12]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b084      	sub	sp, #16
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040a2:	f000 fffb 	bl	800509c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d102      	bne.n	80040b8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80040b2:	2301      	movs	r3, #1
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	e001      	b.n	80040bc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80040b8:	2300      	movs	r3, #0
 80040ba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040bc:	f001 f81c 	bl	80050f8 <vPortExitCritical>

	return xReturn;
 80040c0:	68fb      	ldr	r3, [r7, #12]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b08e      	sub	sp, #56	; 0x38
 80040ce:	af04      	add	r7, sp, #16
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	607a      	str	r2, [r7, #4]
 80040d6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80040d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d109      	bne.n	80040f2 <xTaskCreateStatic+0x28>
	__asm volatile
 80040de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	623b      	str	r3, [r7, #32]
 80040f0:	e7fe      	b.n	80040f0 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80040f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d109      	bne.n	800410c <xTaskCreateStatic+0x42>
 80040f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	61fb      	str	r3, [r7, #28]
 800410a:	e7fe      	b.n	800410a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800410c:	2354      	movs	r3, #84	; 0x54
 800410e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	2b54      	cmp	r3, #84	; 0x54
 8004114:	d009      	beq.n	800412a <xTaskCreateStatic+0x60>
 8004116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411a:	f383 8811 	msr	BASEPRI, r3
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	61bb      	str	r3, [r7, #24]
 8004128:	e7fe      	b.n	8004128 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800412a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800412c:	2b00      	cmp	r3, #0
 800412e:	d01e      	beq.n	800416e <xTaskCreateStatic+0xa4>
 8004130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004132:	2b00      	cmp	r3, #0
 8004134:	d01b      	beq.n	800416e <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004138:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800413e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	2202      	movs	r2, #2
 8004144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004148:	2300      	movs	r3, #0
 800414a:	9303      	str	r3, [sp, #12]
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	9302      	str	r3, [sp, #8]
 8004150:	f107 0314 	add.w	r3, r7, #20
 8004154:	9301      	str	r3, [sp, #4]
 8004156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	68b9      	ldr	r1, [r7, #8]
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f850 	bl	8004206 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004166:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004168:	f000 f8cc 	bl	8004304 <prvAddNewTaskToReadyList>
 800416c:	e001      	b.n	8004172 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004172:	697b      	ldr	r3, [r7, #20]
	}
 8004174:	4618      	mov	r0, r3
 8004176:	3728      	adds	r7, #40	; 0x28
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800417c:	b580      	push	{r7, lr}
 800417e:	b08c      	sub	sp, #48	; 0x30
 8004180:	af04      	add	r7, sp, #16
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	603b      	str	r3, [r7, #0]
 8004188:	4613      	mov	r3, r2
 800418a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800418c:	88fb      	ldrh	r3, [r7, #6]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4618      	mov	r0, r3
 8004192:	f001 f89d 	bl	80052d0 <pvPortMalloc>
 8004196:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00e      	beq.n	80041bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800419e:	2054      	movs	r0, #84	; 0x54
 80041a0:	f001 f896 	bl	80052d0 <pvPortMalloc>
 80041a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	631a      	str	r2, [r3, #48]	; 0x30
 80041b2:	e005      	b.n	80041c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041b4:	6978      	ldr	r0, [r7, #20]
 80041b6:	f001 f94d 	bl	8005454 <vPortFree>
 80041ba:	e001      	b.n	80041c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041bc:	2300      	movs	r3, #0
 80041be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d017      	beq.n	80041f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041ce:	88fa      	ldrh	r2, [r7, #6]
 80041d0:	2300      	movs	r3, #0
 80041d2:	9303      	str	r3, [sp, #12]
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	9302      	str	r3, [sp, #8]
 80041d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041da:	9301      	str	r3, [sp, #4]
 80041dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	68b9      	ldr	r1, [r7, #8]
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 f80e 	bl	8004206 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041ea:	69f8      	ldr	r0, [r7, #28]
 80041ec:	f000 f88a 	bl	8004304 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041f0:	2301      	movs	r3, #1
 80041f2:	61bb      	str	r3, [r7, #24]
 80041f4:	e002      	b.n	80041fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041f6:	f04f 33ff 	mov.w	r3, #4294967295
 80041fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041fc:	69bb      	ldr	r3, [r7, #24]
	}
 80041fe:	4618      	mov	r0, r3
 8004200:	3720      	adds	r7, #32
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b088      	sub	sp, #32
 800420a:	af00      	add	r7, sp, #0
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	607a      	str	r2, [r7, #4]
 8004212:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800421e:	3b01      	subs	r3, #1
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	f023 0307 	bic.w	r3, r3, #7
 800422c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	2b00      	cmp	r3, #0
 8004236:	d009      	beq.n	800424c <prvInitialiseNewTask+0x46>
 8004238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	617b      	str	r3, [r7, #20]
 800424a:	e7fe      	b.n	800424a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800424c:	2300      	movs	r3, #0
 800424e:	61fb      	str	r3, [r7, #28]
 8004250:	e012      	b.n	8004278 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	4413      	add	r3, r2
 8004258:	7819      	ldrb	r1, [r3, #0]
 800425a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	4413      	add	r3, r2
 8004260:	3334      	adds	r3, #52	; 0x34
 8004262:	460a      	mov	r2, r1
 8004264:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	4413      	add	r3, r2
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d006      	beq.n	8004280 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	3301      	adds	r3, #1
 8004276:	61fb      	str	r3, [r7, #28]
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	2b0f      	cmp	r3, #15
 800427c:	d9e9      	bls.n	8004252 <prvInitialiseNewTask+0x4c>
 800427e:	e000      	b.n	8004282 <prvInitialiseNewTask+0x7c>
		{
			break;
 8004280:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800428a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428c:	2b06      	cmp	r3, #6
 800428e:	d901      	bls.n	8004294 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004290:	2306      	movs	r3, #6
 8004292:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004296:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004298:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800429a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800429e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80042a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a2:	2200      	movs	r2, #0
 80042a4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a8:	3304      	adds	r3, #4
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff f94c 	bl	8003548 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b2:	3318      	adds	r3, #24
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff f947 	bl	8003548 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c2:	f1c3 0207 	rsb	r2, r3, #7
 80042c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d2:	2200      	movs	r2, #0
 80042d4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	68f9      	ldr	r1, [r7, #12]
 80042e2:	69b8      	ldr	r0, [r7, #24]
 80042e4:	f000 fdb2 	bl	8004e4c <pxPortInitialiseStack>
 80042e8:	4602      	mov	r2, r0
 80042ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ec:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80042ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042fa:	bf00      	nop
 80042fc:	3720      	adds	r7, #32
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800430c:	f000 fec6 	bl	800509c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004310:	4b2a      	ldr	r3, [pc, #168]	; (80043bc <prvAddNewTaskToReadyList+0xb8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3301      	adds	r3, #1
 8004316:	4a29      	ldr	r2, [pc, #164]	; (80043bc <prvAddNewTaskToReadyList+0xb8>)
 8004318:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800431a:	4b29      	ldr	r3, [pc, #164]	; (80043c0 <prvAddNewTaskToReadyList+0xbc>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d109      	bne.n	8004336 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004322:	4a27      	ldr	r2, [pc, #156]	; (80043c0 <prvAddNewTaskToReadyList+0xbc>)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004328:	4b24      	ldr	r3, [pc, #144]	; (80043bc <prvAddNewTaskToReadyList+0xb8>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d110      	bne.n	8004352 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004330:	f000 fbc4 	bl	8004abc <prvInitialiseTaskLists>
 8004334:	e00d      	b.n	8004352 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004336:	4b23      	ldr	r3, [pc, #140]	; (80043c4 <prvAddNewTaskToReadyList+0xc0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d109      	bne.n	8004352 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800433e:	4b20      	ldr	r3, [pc, #128]	; (80043c0 <prvAddNewTaskToReadyList+0xbc>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	429a      	cmp	r2, r3
 800434a:	d802      	bhi.n	8004352 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800434c:	4a1c      	ldr	r2, [pc, #112]	; (80043c0 <prvAddNewTaskToReadyList+0xbc>)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004352:	4b1d      	ldr	r3, [pc, #116]	; (80043c8 <prvAddNewTaskToReadyList+0xc4>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	3301      	adds	r3, #1
 8004358:	4a1b      	ldr	r2, [pc, #108]	; (80043c8 <prvAddNewTaskToReadyList+0xc4>)
 800435a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	2201      	movs	r2, #1
 8004362:	409a      	lsls	r2, r3
 8004364:	4b19      	ldr	r3, [pc, #100]	; (80043cc <prvAddNewTaskToReadyList+0xc8>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4313      	orrs	r3, r2
 800436a:	4a18      	ldr	r2, [pc, #96]	; (80043cc <prvAddNewTaskToReadyList+0xc8>)
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004372:	4613      	mov	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4a15      	ldr	r2, [pc, #84]	; (80043d0 <prvAddNewTaskToReadyList+0xcc>)
 800437c:	441a      	add	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3304      	adds	r3, #4
 8004382:	4619      	mov	r1, r3
 8004384:	4610      	mov	r0, r2
 8004386:	f7ff f8ec 	bl	8003562 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800438a:	f000 feb5 	bl	80050f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800438e:	4b0d      	ldr	r3, [pc, #52]	; (80043c4 <prvAddNewTaskToReadyList+0xc0>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00e      	beq.n	80043b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004396:	4b0a      	ldr	r3, [pc, #40]	; (80043c0 <prvAddNewTaskToReadyList+0xbc>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d207      	bcs.n	80043b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043a4:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <prvAddNewTaskToReadyList+0xd0>)
 80043a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043b4:	bf00      	nop
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	20000380 	.word	0x20000380
 80043c0:	20000280 	.word	0x20000280
 80043c4:	2000038c 	.word	0x2000038c
 80043c8:	2000039c 	.word	0x2000039c
 80043cc:	20000388 	.word	0x20000388
 80043d0:	20000284 	.word	0x20000284
 80043d4:	e000ed04 	.word	0xe000ed04

080043d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80043e0:	2300      	movs	r3, #0
 80043e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d016      	beq.n	8004418 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80043ea:	4b13      	ldr	r3, [pc, #76]	; (8004438 <vTaskDelay+0x60>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d009      	beq.n	8004406 <vTaskDelay+0x2e>
 80043f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	60bb      	str	r3, [r7, #8]
 8004404:	e7fe      	b.n	8004404 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004406:	f000 f879 	bl	80044fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800440a:	2100      	movs	r1, #0
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 fcb7 	bl	8004d80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004412:	f000 f881 	bl	8004518 <xTaskResumeAll>
 8004416:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d107      	bne.n	800442e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800441e:	4b07      	ldr	r3, [pc, #28]	; (800443c <vTaskDelay+0x64>)
 8004420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800442e:	bf00      	nop
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	200003a8 	.word	0x200003a8
 800443c:	e000ed04 	.word	0xe000ed04

08004440 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08a      	sub	sp, #40	; 0x28
 8004444:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004446:	2300      	movs	r3, #0
 8004448:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800444a:	2300      	movs	r3, #0
 800444c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800444e:	463a      	mov	r2, r7
 8004450:	1d39      	adds	r1, r7, #4
 8004452:	f107 0308 	add.w	r3, r7, #8
 8004456:	4618      	mov	r0, r3
 8004458:	f7fc f842 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800445c:	6839      	ldr	r1, [r7, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	9202      	str	r2, [sp, #8]
 8004464:	9301      	str	r3, [sp, #4]
 8004466:	2300      	movs	r3, #0
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	2300      	movs	r3, #0
 800446c:	460a      	mov	r2, r1
 800446e:	491d      	ldr	r1, [pc, #116]	; (80044e4 <vTaskStartScheduler+0xa4>)
 8004470:	481d      	ldr	r0, [pc, #116]	; (80044e8 <vTaskStartScheduler+0xa8>)
 8004472:	f7ff fe2a 	bl	80040ca <xTaskCreateStatic>
 8004476:	4602      	mov	r2, r0
 8004478:	4b1c      	ldr	r3, [pc, #112]	; (80044ec <vTaskStartScheduler+0xac>)
 800447a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800447c:	4b1b      	ldr	r3, [pc, #108]	; (80044ec <vTaskStartScheduler+0xac>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d002      	beq.n	800448a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004484:	2301      	movs	r3, #1
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	e001      	b.n	800448e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800448a:	2300      	movs	r3, #0
 800448c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d115      	bne.n	80044c0 <vTaskStartScheduler+0x80>
 8004494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044a6:	4b12      	ldr	r3, [pc, #72]	; (80044f0 <vTaskStartScheduler+0xb0>)
 80044a8:	f04f 32ff 	mov.w	r2, #4294967295
 80044ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80044ae:	4b11      	ldr	r3, [pc, #68]	; (80044f4 <vTaskStartScheduler+0xb4>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80044b4:	4b10      	ldr	r3, [pc, #64]	; (80044f8 <vTaskStartScheduler+0xb8>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80044ba:	f000 fd51 	bl	8004f60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80044be:	e00d      	b.n	80044dc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c6:	d109      	bne.n	80044dc <vTaskStartScheduler+0x9c>
 80044c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044cc:	f383 8811 	msr	BASEPRI, r3
 80044d0:	f3bf 8f6f 	isb	sy
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	e7fe      	b.n	80044da <vTaskStartScheduler+0x9a>
}
 80044dc:	bf00      	nop
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	0800575c 	.word	0x0800575c
 80044e8:	08004a8d 	.word	0x08004a8d
 80044ec:	200003a4 	.word	0x200003a4
 80044f0:	200003a0 	.word	0x200003a0
 80044f4:	2000038c 	.word	0x2000038c
 80044f8:	20000384 	.word	0x20000384

080044fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004500:	4b04      	ldr	r3, [pc, #16]	; (8004514 <vTaskSuspendAll+0x18>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3301      	adds	r3, #1
 8004506:	4a03      	ldr	r2, [pc, #12]	; (8004514 <vTaskSuspendAll+0x18>)
 8004508:	6013      	str	r3, [r2, #0]
}
 800450a:	bf00      	nop
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	200003a8 	.word	0x200003a8

08004518 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800451e:	2300      	movs	r3, #0
 8004520:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004522:	2300      	movs	r3, #0
 8004524:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004526:	4b41      	ldr	r3, [pc, #260]	; (800462c <xTaskResumeAll+0x114>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d109      	bne.n	8004542 <xTaskResumeAll+0x2a>
 800452e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004532:	f383 8811 	msr	BASEPRI, r3
 8004536:	f3bf 8f6f 	isb	sy
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	603b      	str	r3, [r7, #0]
 8004540:	e7fe      	b.n	8004540 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004542:	f000 fdab 	bl	800509c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004546:	4b39      	ldr	r3, [pc, #228]	; (800462c <xTaskResumeAll+0x114>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3b01      	subs	r3, #1
 800454c:	4a37      	ldr	r2, [pc, #220]	; (800462c <xTaskResumeAll+0x114>)
 800454e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004550:	4b36      	ldr	r3, [pc, #216]	; (800462c <xTaskResumeAll+0x114>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d161      	bne.n	800461c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004558:	4b35      	ldr	r3, [pc, #212]	; (8004630 <xTaskResumeAll+0x118>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d05d      	beq.n	800461c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004560:	e02e      	b.n	80045c0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004562:	4b34      	ldr	r3, [pc, #208]	; (8004634 <xTaskResumeAll+0x11c>)
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	3318      	adds	r3, #24
 800456e:	4618      	mov	r0, r3
 8004570:	f7ff f854 	bl	800361c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	3304      	adds	r3, #4
 8004578:	4618      	mov	r0, r3
 800457a:	f7ff f84f 	bl	800361c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004582:	2201      	movs	r2, #1
 8004584:	409a      	lsls	r2, r3
 8004586:	4b2c      	ldr	r3, [pc, #176]	; (8004638 <xTaskResumeAll+0x120>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4313      	orrs	r3, r2
 800458c:	4a2a      	ldr	r2, [pc, #168]	; (8004638 <xTaskResumeAll+0x120>)
 800458e:	6013      	str	r3, [r2, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004594:	4613      	mov	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4a27      	ldr	r2, [pc, #156]	; (800463c <xTaskResumeAll+0x124>)
 800459e:	441a      	add	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	3304      	adds	r3, #4
 80045a4:	4619      	mov	r1, r3
 80045a6:	4610      	mov	r0, r2
 80045a8:	f7fe ffdb 	bl	8003562 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b0:	4b23      	ldr	r3, [pc, #140]	; (8004640 <xTaskResumeAll+0x128>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d302      	bcc.n	80045c0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80045ba:	4b22      	ldr	r3, [pc, #136]	; (8004644 <xTaskResumeAll+0x12c>)
 80045bc:	2201      	movs	r2, #1
 80045be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045c0:	4b1c      	ldr	r3, [pc, #112]	; (8004634 <xTaskResumeAll+0x11c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1cc      	bne.n	8004562 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80045ce:	f000 fb0f 	bl	8004bf0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80045d2:	4b1d      	ldr	r3, [pc, #116]	; (8004648 <xTaskResumeAll+0x130>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d010      	beq.n	8004600 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80045de:	f000 f837 	bl	8004650 <xTaskIncrementTick>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d002      	beq.n	80045ee <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80045e8:	4b16      	ldr	r3, [pc, #88]	; (8004644 <xTaskResumeAll+0x12c>)
 80045ea:	2201      	movs	r2, #1
 80045ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	3b01      	subs	r3, #1
 80045f2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1f1      	bne.n	80045de <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80045fa:	4b13      	ldr	r3, [pc, #76]	; (8004648 <xTaskResumeAll+0x130>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004600:	4b10      	ldr	r3, [pc, #64]	; (8004644 <xTaskResumeAll+0x12c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d009      	beq.n	800461c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004608:	2301      	movs	r3, #1
 800460a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800460c:	4b0f      	ldr	r3, [pc, #60]	; (800464c <xTaskResumeAll+0x134>)
 800460e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800461c:	f000 fd6c 	bl	80050f8 <vPortExitCritical>

	return xAlreadyYielded;
 8004620:	68bb      	ldr	r3, [r7, #8]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	200003a8 	.word	0x200003a8
 8004630:	20000380 	.word	0x20000380
 8004634:	20000340 	.word	0x20000340
 8004638:	20000388 	.word	0x20000388
 800463c:	20000284 	.word	0x20000284
 8004640:	20000280 	.word	0x20000280
 8004644:	20000394 	.word	0x20000394
 8004648:	20000390 	.word	0x20000390
 800464c:	e000ed04 	.word	0xe000ed04

08004650 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004656:	2300      	movs	r3, #0
 8004658:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800465a:	4b50      	ldr	r3, [pc, #320]	; (800479c <xTaskIncrementTick+0x14c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	f040 808c 	bne.w	800477c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004664:	4b4e      	ldr	r3, [pc, #312]	; (80047a0 <xTaskIncrementTick+0x150>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3301      	adds	r3, #1
 800466a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800466c:	4a4c      	ldr	r2, [pc, #304]	; (80047a0 <xTaskIncrementTick+0x150>)
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d11f      	bne.n	80046b8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004678:	4b4a      	ldr	r3, [pc, #296]	; (80047a4 <xTaskIncrementTick+0x154>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d009      	beq.n	8004696 <xTaskIncrementTick+0x46>
 8004682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	603b      	str	r3, [r7, #0]
 8004694:	e7fe      	b.n	8004694 <xTaskIncrementTick+0x44>
 8004696:	4b43      	ldr	r3, [pc, #268]	; (80047a4 <xTaskIncrementTick+0x154>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	4b42      	ldr	r3, [pc, #264]	; (80047a8 <xTaskIncrementTick+0x158>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a40      	ldr	r2, [pc, #256]	; (80047a4 <xTaskIncrementTick+0x154>)
 80046a2:	6013      	str	r3, [r2, #0]
 80046a4:	4a40      	ldr	r2, [pc, #256]	; (80047a8 <xTaskIncrementTick+0x158>)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	4b40      	ldr	r3, [pc, #256]	; (80047ac <xTaskIncrementTick+0x15c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3301      	adds	r3, #1
 80046b0:	4a3e      	ldr	r2, [pc, #248]	; (80047ac <xTaskIncrementTick+0x15c>)
 80046b2:	6013      	str	r3, [r2, #0]
 80046b4:	f000 fa9c 	bl	8004bf0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80046b8:	4b3d      	ldr	r3, [pc, #244]	; (80047b0 <xTaskIncrementTick+0x160>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d34d      	bcc.n	800475e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046c2:	4b38      	ldr	r3, [pc, #224]	; (80047a4 <xTaskIncrementTick+0x154>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <xTaskIncrementTick+0x80>
 80046cc:	2301      	movs	r3, #1
 80046ce:	e000      	b.n	80046d2 <xTaskIncrementTick+0x82>
 80046d0:	2300      	movs	r3, #0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d004      	beq.n	80046e0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046d6:	4b36      	ldr	r3, [pc, #216]	; (80047b0 <xTaskIncrementTick+0x160>)
 80046d8:	f04f 32ff 	mov.w	r2, #4294967295
 80046dc:	601a      	str	r2, [r3, #0]
					break;
 80046de:	e03e      	b.n	800475e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80046e0:	4b30      	ldr	r3, [pc, #192]	; (80047a4 <xTaskIncrementTick+0x154>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d203      	bcs.n	8004700 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046f8:	4a2d      	ldr	r2, [pc, #180]	; (80047b0 <xTaskIncrementTick+0x160>)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6013      	str	r3, [r2, #0]
						break;
 80046fe:	e02e      	b.n	800475e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	3304      	adds	r3, #4
 8004704:	4618      	mov	r0, r3
 8004706:	f7fe ff89 	bl	800361c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470e:	2b00      	cmp	r3, #0
 8004710:	d004      	beq.n	800471c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	3318      	adds	r3, #24
 8004716:	4618      	mov	r0, r3
 8004718:	f7fe ff80 	bl	800361c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	2201      	movs	r2, #1
 8004722:	409a      	lsls	r2, r3
 8004724:	4b23      	ldr	r3, [pc, #140]	; (80047b4 <xTaskIncrementTick+0x164>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4313      	orrs	r3, r2
 800472a:	4a22      	ldr	r2, [pc, #136]	; (80047b4 <xTaskIncrementTick+0x164>)
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004732:	4613      	mov	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4a1f      	ldr	r2, [pc, #124]	; (80047b8 <xTaskIncrementTick+0x168>)
 800473c:	441a      	add	r2, r3
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	3304      	adds	r3, #4
 8004742:	4619      	mov	r1, r3
 8004744:	4610      	mov	r0, r2
 8004746:	f7fe ff0c 	bl	8003562 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800474e:	4b1b      	ldr	r3, [pc, #108]	; (80047bc <xTaskIncrementTick+0x16c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004754:	429a      	cmp	r2, r3
 8004756:	d3b4      	bcc.n	80046c2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004758:	2301      	movs	r3, #1
 800475a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800475c:	e7b1      	b.n	80046c2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800475e:	4b17      	ldr	r3, [pc, #92]	; (80047bc <xTaskIncrementTick+0x16c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004764:	4914      	ldr	r1, [pc, #80]	; (80047b8 <xTaskIncrementTick+0x168>)
 8004766:	4613      	mov	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	440b      	add	r3, r1
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d907      	bls.n	8004786 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8004776:	2301      	movs	r3, #1
 8004778:	617b      	str	r3, [r7, #20]
 800477a:	e004      	b.n	8004786 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800477c:	4b10      	ldr	r3, [pc, #64]	; (80047c0 <xTaskIncrementTick+0x170>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3301      	adds	r3, #1
 8004782:	4a0f      	ldr	r2, [pc, #60]	; (80047c0 <xTaskIncrementTick+0x170>)
 8004784:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004786:	4b0f      	ldr	r3, [pc, #60]	; (80047c4 <xTaskIncrementTick+0x174>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800478e:	2301      	movs	r3, #1
 8004790:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004792:	697b      	ldr	r3, [r7, #20]
}
 8004794:	4618      	mov	r0, r3
 8004796:	3718      	adds	r7, #24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	200003a8 	.word	0x200003a8
 80047a0:	20000384 	.word	0x20000384
 80047a4:	20000338 	.word	0x20000338
 80047a8:	2000033c 	.word	0x2000033c
 80047ac:	20000398 	.word	0x20000398
 80047b0:	200003a0 	.word	0x200003a0
 80047b4:	20000388 	.word	0x20000388
 80047b8:	20000284 	.word	0x20000284
 80047bc:	20000280 	.word	0x20000280
 80047c0:	20000390 	.word	0x20000390
 80047c4:	20000394 	.word	0x20000394

080047c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047c8:	b480      	push	{r7}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047ce:	4b26      	ldr	r3, [pc, #152]	; (8004868 <vTaskSwitchContext+0xa0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80047d6:	4b25      	ldr	r3, [pc, #148]	; (800486c <vTaskSwitchContext+0xa4>)
 80047d8:	2201      	movs	r2, #1
 80047da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80047dc:	e03e      	b.n	800485c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80047de:	4b23      	ldr	r3, [pc, #140]	; (800486c <vTaskSwitchContext+0xa4>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80047e4:	4b22      	ldr	r3, [pc, #136]	; (8004870 <vTaskSwitchContext+0xa8>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	fab3 f383 	clz	r3, r3
 80047f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80047f2:	7afb      	ldrb	r3, [r7, #11]
 80047f4:	f1c3 031f 	rsb	r3, r3, #31
 80047f8:	617b      	str	r3, [r7, #20]
 80047fa:	491e      	ldr	r1, [pc, #120]	; (8004874 <vTaskSwitchContext+0xac>)
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	4613      	mov	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	440b      	add	r3, r1
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d109      	bne.n	8004822 <vTaskSwitchContext+0x5a>
	__asm volatile
 800480e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	607b      	str	r3, [r7, #4]
 8004820:	e7fe      	b.n	8004820 <vTaskSwitchContext+0x58>
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	4613      	mov	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4a11      	ldr	r2, [pc, #68]	; (8004874 <vTaskSwitchContext+0xac>)
 800482e:	4413      	add	r3, r2
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	605a      	str	r2, [r3, #4]
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	3308      	adds	r3, #8
 8004844:	429a      	cmp	r2, r3
 8004846:	d104      	bne.n	8004852 <vTaskSwitchContext+0x8a>
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	605a      	str	r2, [r3, #4]
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	4a07      	ldr	r2, [pc, #28]	; (8004878 <vTaskSwitchContext+0xb0>)
 800485a:	6013      	str	r3, [r2, #0]
}
 800485c:	bf00      	nop
 800485e:	371c      	adds	r7, #28
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	200003a8 	.word	0x200003a8
 800486c:	20000394 	.word	0x20000394
 8004870:	20000388 	.word	0x20000388
 8004874:	20000284 	.word	0x20000284
 8004878:	20000280 	.word	0x20000280

0800487c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d109      	bne.n	80048a0 <vTaskPlaceOnEventList+0x24>
 800488c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004890:	f383 8811 	msr	BASEPRI, r3
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	e7fe      	b.n	800489e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048a0:	4b07      	ldr	r3, [pc, #28]	; (80048c0 <vTaskPlaceOnEventList+0x44>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3318      	adds	r3, #24
 80048a6:	4619      	mov	r1, r3
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7fe fe7e 	bl	80035aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048ae:	2101      	movs	r1, #1
 80048b0:	6838      	ldr	r0, [r7, #0]
 80048b2:	f000 fa65 	bl	8004d80 <prvAddCurrentTaskToDelayedList>
}
 80048b6:	bf00      	nop
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	20000280 	.word	0x20000280

080048c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d109      	bne.n	80048ee <xTaskRemoveFromEventList+0x2a>
 80048da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	e7fe      	b.n	80048ec <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	3318      	adds	r3, #24
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fe fe92 	bl	800361c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048f8:	4b1d      	ldr	r3, [pc, #116]	; (8004970 <xTaskRemoveFromEventList+0xac>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d11c      	bne.n	800493a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	3304      	adds	r3, #4
 8004904:	4618      	mov	r0, r3
 8004906:	f7fe fe89 	bl	800361c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490e:	2201      	movs	r2, #1
 8004910:	409a      	lsls	r2, r3
 8004912:	4b18      	ldr	r3, [pc, #96]	; (8004974 <xTaskRemoveFromEventList+0xb0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4313      	orrs	r3, r2
 8004918:	4a16      	ldr	r2, [pc, #88]	; (8004974 <xTaskRemoveFromEventList+0xb0>)
 800491a:	6013      	str	r3, [r2, #0]
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004920:	4613      	mov	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4a13      	ldr	r2, [pc, #76]	; (8004978 <xTaskRemoveFromEventList+0xb4>)
 800492a:	441a      	add	r2, r3
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	3304      	adds	r3, #4
 8004930:	4619      	mov	r1, r3
 8004932:	4610      	mov	r0, r2
 8004934:	f7fe fe15 	bl	8003562 <vListInsertEnd>
 8004938:	e005      	b.n	8004946 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	3318      	adds	r3, #24
 800493e:	4619      	mov	r1, r3
 8004940:	480e      	ldr	r0, [pc, #56]	; (800497c <xTaskRemoveFromEventList+0xb8>)
 8004942:	f7fe fe0e 	bl	8003562 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800494a:	4b0d      	ldr	r3, [pc, #52]	; (8004980 <xTaskRemoveFromEventList+0xbc>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004950:	429a      	cmp	r2, r3
 8004952:	d905      	bls.n	8004960 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004954:	2301      	movs	r3, #1
 8004956:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004958:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <xTaskRemoveFromEventList+0xc0>)
 800495a:	2201      	movs	r2, #1
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	e001      	b.n	8004964 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004960:	2300      	movs	r3, #0
 8004962:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004964:	697b      	ldr	r3, [r7, #20]
}
 8004966:	4618      	mov	r0, r3
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	200003a8 	.word	0x200003a8
 8004974:	20000388 	.word	0x20000388
 8004978:	20000284 	.word	0x20000284
 800497c:	20000340 	.word	0x20000340
 8004980:	20000280 	.word	0x20000280
 8004984:	20000394 	.word	0x20000394

08004988 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004990:	4b06      	ldr	r3, [pc, #24]	; (80049ac <vTaskInternalSetTimeOutState+0x24>)
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004998:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <vTaskInternalSetTimeOutState+0x28>)
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	605a      	str	r2, [r3, #4]
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	20000398 	.word	0x20000398
 80049b0:	20000384 	.word	0x20000384

080049b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b088      	sub	sp, #32
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d109      	bne.n	80049d8 <xTaskCheckForTimeOut+0x24>
 80049c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	613b      	str	r3, [r7, #16]
 80049d6:	e7fe      	b.n	80049d6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d109      	bne.n	80049f2 <xTaskCheckForTimeOut+0x3e>
 80049de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e2:	f383 8811 	msr	BASEPRI, r3
 80049e6:	f3bf 8f6f 	isb	sy
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	e7fe      	b.n	80049f0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80049f2:	f000 fb53 	bl	800509c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80049f6:	4b1d      	ldr	r3, [pc, #116]	; (8004a6c <xTaskCheckForTimeOut+0xb8>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0e:	d102      	bne.n	8004a16 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004a10:	2300      	movs	r3, #0
 8004a12:	61fb      	str	r3, [r7, #28]
 8004a14:	e023      	b.n	8004a5e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	4b15      	ldr	r3, [pc, #84]	; (8004a70 <xTaskCheckForTimeOut+0xbc>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d007      	beq.n	8004a32 <xTaskCheckForTimeOut+0x7e>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d302      	bcc.n	8004a32 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	61fb      	str	r3, [r7, #28]
 8004a30:	e015      	b.n	8004a5e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d20b      	bcs.n	8004a54 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	1ad2      	subs	r2, r2, r3
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f7ff ff9d 	bl	8004988 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	61fb      	str	r3, [r7, #28]
 8004a52:	e004      	b.n	8004a5e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2200      	movs	r2, #0
 8004a58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004a5e:	f000 fb4b 	bl	80050f8 <vPortExitCritical>

	return xReturn;
 8004a62:	69fb      	ldr	r3, [r7, #28]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3720      	adds	r7, #32
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	20000384 	.word	0x20000384
 8004a70:	20000398 	.word	0x20000398

08004a74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a78:	4b03      	ldr	r3, [pc, #12]	; (8004a88 <vTaskMissedYield+0x14>)
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	601a      	str	r2, [r3, #0]
}
 8004a7e:	bf00      	nop
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	20000394 	.word	0x20000394

08004a8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a94:	f000 f852 	bl	8004b3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a98:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <prvIdleTask+0x28>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d9f9      	bls.n	8004a94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004aa0:	4b05      	ldr	r3, [pc, #20]	; (8004ab8 <prvIdleTask+0x2c>)
 8004aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ab0:	e7f0      	b.n	8004a94 <prvIdleTask+0x8>
 8004ab2:	bf00      	nop
 8004ab4:	20000284 	.word	0x20000284
 8004ab8:	e000ed04 	.word	0xe000ed04

08004abc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	607b      	str	r3, [r7, #4]
 8004ac6:	e00c      	b.n	8004ae2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	4613      	mov	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4a12      	ldr	r2, [pc, #72]	; (8004b1c <prvInitialiseTaskLists+0x60>)
 8004ad4:	4413      	add	r3, r2
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fe fd16 	bl	8003508 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	607b      	str	r3, [r7, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b06      	cmp	r3, #6
 8004ae6:	d9ef      	bls.n	8004ac8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ae8:	480d      	ldr	r0, [pc, #52]	; (8004b20 <prvInitialiseTaskLists+0x64>)
 8004aea:	f7fe fd0d 	bl	8003508 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004aee:	480d      	ldr	r0, [pc, #52]	; (8004b24 <prvInitialiseTaskLists+0x68>)
 8004af0:	f7fe fd0a 	bl	8003508 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004af4:	480c      	ldr	r0, [pc, #48]	; (8004b28 <prvInitialiseTaskLists+0x6c>)
 8004af6:	f7fe fd07 	bl	8003508 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004afa:	480c      	ldr	r0, [pc, #48]	; (8004b2c <prvInitialiseTaskLists+0x70>)
 8004afc:	f7fe fd04 	bl	8003508 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b00:	480b      	ldr	r0, [pc, #44]	; (8004b30 <prvInitialiseTaskLists+0x74>)
 8004b02:	f7fe fd01 	bl	8003508 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b06:	4b0b      	ldr	r3, [pc, #44]	; (8004b34 <prvInitialiseTaskLists+0x78>)
 8004b08:	4a05      	ldr	r2, [pc, #20]	; (8004b20 <prvInitialiseTaskLists+0x64>)
 8004b0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b0c:	4b0a      	ldr	r3, [pc, #40]	; (8004b38 <prvInitialiseTaskLists+0x7c>)
 8004b0e:	4a05      	ldr	r2, [pc, #20]	; (8004b24 <prvInitialiseTaskLists+0x68>)
 8004b10:	601a      	str	r2, [r3, #0]
}
 8004b12:	bf00      	nop
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20000284 	.word	0x20000284
 8004b20:	20000310 	.word	0x20000310
 8004b24:	20000324 	.word	0x20000324
 8004b28:	20000340 	.word	0x20000340
 8004b2c:	20000354 	.word	0x20000354
 8004b30:	2000036c 	.word	0x2000036c
 8004b34:	20000338 	.word	0x20000338
 8004b38:	2000033c 	.word	0x2000033c

08004b3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b42:	e019      	b.n	8004b78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b44:	f000 faaa 	bl	800509c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004b48:	4b0f      	ldr	r3, [pc, #60]	; (8004b88 <prvCheckTasksWaitingTermination+0x4c>)
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3304      	adds	r3, #4
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fe fd61 	bl	800361c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b5a:	4b0c      	ldr	r3, [pc, #48]	; (8004b8c <prvCheckTasksWaitingTermination+0x50>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	4a0a      	ldr	r2, [pc, #40]	; (8004b8c <prvCheckTasksWaitingTermination+0x50>)
 8004b62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b64:	4b0a      	ldr	r3, [pc, #40]	; (8004b90 <prvCheckTasksWaitingTermination+0x54>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	4a09      	ldr	r2, [pc, #36]	; (8004b90 <prvCheckTasksWaitingTermination+0x54>)
 8004b6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b6e:	f000 fac3 	bl	80050f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f80e 	bl	8004b94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b78:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <prvCheckTasksWaitingTermination+0x54>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1e1      	bne.n	8004b44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b80:	bf00      	nop
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	20000354 	.word	0x20000354
 8004b8c:	20000380 	.word	0x20000380
 8004b90:	20000368 	.word	0x20000368

08004b94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d108      	bne.n	8004bb8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 fc52 	bl	8005454 <vPortFree>
				vPortFree( pxTCB );
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 fc4f 	bl	8005454 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004bb6:	e017      	b.n	8004be8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d103      	bne.n	8004bca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fc46 	bl	8005454 <vPortFree>
	}
 8004bc8:	e00e      	b.n	8004be8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d009      	beq.n	8004be8 <prvDeleteTCB+0x54>
 8004bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	e7fe      	b.n	8004be6 <prvDeleteTCB+0x52>
	}
 8004be8:	bf00      	nop
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bf6:	4b0f      	ldr	r3, [pc, #60]	; (8004c34 <prvResetNextTaskUnblockTime+0x44>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <prvResetNextTaskUnblockTime+0x14>
 8004c00:	2301      	movs	r3, #1
 8004c02:	e000      	b.n	8004c06 <prvResetNextTaskUnblockTime+0x16>
 8004c04:	2300      	movs	r3, #0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d004      	beq.n	8004c14 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c0a:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <prvResetNextTaskUnblockTime+0x48>)
 8004c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c10:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c12:	e008      	b.n	8004c26 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c14:	4b07      	ldr	r3, [pc, #28]	; (8004c34 <prvResetNextTaskUnblockTime+0x44>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	4a05      	ldr	r2, [pc, #20]	; (8004c38 <prvResetNextTaskUnblockTime+0x48>)
 8004c24:	6013      	str	r3, [r2, #0]
}
 8004c26:	bf00      	nop
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	20000338 	.word	0x20000338
 8004c38:	200003a0 	.word	0x200003a0

08004c3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004c42:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <xTaskGetSchedulerState+0x34>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d102      	bne.n	8004c50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	607b      	str	r3, [r7, #4]
 8004c4e:	e008      	b.n	8004c62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c50:	4b08      	ldr	r3, [pc, #32]	; (8004c74 <xTaskGetSchedulerState+0x38>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d102      	bne.n	8004c5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c58:	2302      	movs	r3, #2
 8004c5a:	607b      	str	r3, [r7, #4]
 8004c5c:	e001      	b.n	8004c62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c62:	687b      	ldr	r3, [r7, #4]
	}
 8004c64:	4618      	mov	r0, r3
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	2000038c 	.word	0x2000038c
 8004c74:	200003a8 	.word	0x200003a8

08004c78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004c84:	2300      	movs	r3, #0
 8004c86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d06c      	beq.n	8004d68 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c8e:	4b39      	ldr	r3, [pc, #228]	; (8004d74 <xTaskPriorityDisinherit+0xfc>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d009      	beq.n	8004cac <xTaskPriorityDisinherit+0x34>
 8004c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9c:	f383 8811 	msr	BASEPRI, r3
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	60fb      	str	r3, [r7, #12]
 8004caa:	e7fe      	b.n	8004caa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d109      	bne.n	8004cc8 <xTaskPriorityDisinherit+0x50>
 8004cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb8:	f383 8811 	msr	BASEPRI, r3
 8004cbc:	f3bf 8f6f 	isb	sy
 8004cc0:	f3bf 8f4f 	dsb	sy
 8004cc4:	60bb      	str	r3, [r7, #8]
 8004cc6:	e7fe      	b.n	8004cc6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ccc:	1e5a      	subs	r2, r3, #1
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d044      	beq.n	8004d68 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d140      	bne.n	8004d68 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	3304      	adds	r3, #4
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7fe fc96 	bl	800361c <uxListRemove>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d115      	bne.n	8004d22 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cfa:	491f      	ldr	r1, [pc, #124]	; (8004d78 <xTaskPriorityDisinherit+0x100>)
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4413      	add	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	440b      	add	r3, r1
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10a      	bne.n	8004d22 <xTaskPriorityDisinherit+0xaa>
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d10:	2201      	movs	r2, #1
 8004d12:	fa02 f303 	lsl.w	r3, r2, r3
 8004d16:	43da      	mvns	r2, r3
 8004d18:	4b18      	ldr	r3, [pc, #96]	; (8004d7c <xTaskPriorityDisinherit+0x104>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	4a17      	ldr	r2, [pc, #92]	; (8004d7c <xTaskPriorityDisinherit+0x104>)
 8004d20:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2e:	f1c3 0207 	rsb	r2, r3, #7
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	409a      	lsls	r2, r3
 8004d3e:	4b0f      	ldr	r3, [pc, #60]	; (8004d7c <xTaskPriorityDisinherit+0x104>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	4a0d      	ldr	r2, [pc, #52]	; (8004d7c <xTaskPriorityDisinherit+0x104>)
 8004d46:	6013      	str	r3, [r2, #0]
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4a08      	ldr	r2, [pc, #32]	; (8004d78 <xTaskPriorityDisinherit+0x100>)
 8004d56:	441a      	add	r2, r3
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4610      	mov	r0, r2
 8004d60:	f7fe fbff 	bl	8003562 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004d64:	2301      	movs	r3, #1
 8004d66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d68:	697b      	ldr	r3, [r7, #20]
	}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	20000280 	.word	0x20000280
 8004d78:	20000284 	.word	0x20000284
 8004d7c:	20000388 	.word	0x20000388

08004d80 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d8a:	4b29      	ldr	r3, [pc, #164]	; (8004e30 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d90:	4b28      	ldr	r3, [pc, #160]	; (8004e34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3304      	adds	r3, #4
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fe fc40 	bl	800361c <uxListRemove>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10b      	bne.n	8004dba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004da2:	4b24      	ldr	r3, [pc, #144]	; (8004e34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da8:	2201      	movs	r2, #1
 8004daa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dae:	43da      	mvns	r2, r3
 8004db0:	4b21      	ldr	r3, [pc, #132]	; (8004e38 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4013      	ands	r3, r2
 8004db6:	4a20      	ldr	r2, [pc, #128]	; (8004e38 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004db8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc0:	d10a      	bne.n	8004dd8 <prvAddCurrentTaskToDelayedList+0x58>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d007      	beq.n	8004dd8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dc8:	4b1a      	ldr	r3, [pc, #104]	; (8004e34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	3304      	adds	r3, #4
 8004dce:	4619      	mov	r1, r3
 8004dd0:	481a      	ldr	r0, [pc, #104]	; (8004e3c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004dd2:	f7fe fbc6 	bl	8003562 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004dd6:	e026      	b.n	8004e26 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4413      	add	r3, r2
 8004dde:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004de0:	4b14      	ldr	r3, [pc, #80]	; (8004e34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d209      	bcs.n	8004e04 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004df0:	4b13      	ldr	r3, [pc, #76]	; (8004e40 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	4b0f      	ldr	r3, [pc, #60]	; (8004e34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3304      	adds	r3, #4
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	f7fe fbd4 	bl	80035aa <vListInsert>
}
 8004e02:	e010      	b.n	8004e26 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e04:	4b0f      	ldr	r3, [pc, #60]	; (8004e44 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4610      	mov	r0, r2
 8004e12:	f7fe fbca 	bl	80035aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e16:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d202      	bcs.n	8004e26 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004e20:	4a09      	ldr	r2, [pc, #36]	; (8004e48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	6013      	str	r3, [r2, #0]
}
 8004e26:	bf00      	nop
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000384 	.word	0x20000384
 8004e34:	20000280 	.word	0x20000280
 8004e38:	20000388 	.word	0x20000388
 8004e3c:	2000036c 	.word	0x2000036c
 8004e40:	2000033c 	.word	0x2000033c
 8004e44:	20000338 	.word	0x20000338
 8004e48:	200003a0 	.word	0x200003a0

08004e4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	3b04      	subs	r3, #4
 8004e5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	3b04      	subs	r3, #4
 8004e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	f023 0201 	bic.w	r2, r3, #1
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	3b04      	subs	r3, #4
 8004e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e7c:	4a0c      	ldr	r2, [pc, #48]	; (8004eb0 <pxPortInitialiseStack+0x64>)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	3b14      	subs	r3, #20
 8004e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	3b04      	subs	r3, #4
 8004e92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f06f 0202 	mvn.w	r2, #2
 8004e9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	3b20      	subs	r3, #32
 8004ea0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	08004eb5 	.word	0x08004eb5

08004eb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ebe:	4b11      	ldr	r3, [pc, #68]	; (8004f04 <prvTaskExitError+0x50>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec6:	d009      	beq.n	8004edc <prvTaskExitError+0x28>
 8004ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ecc:	f383 8811 	msr	BASEPRI, r3
 8004ed0:	f3bf 8f6f 	isb	sy
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	e7fe      	b.n	8004eda <prvTaskExitError+0x26>
 8004edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004eee:	bf00      	nop
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0fc      	beq.n	8004ef0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004ef6:	bf00      	nop
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	2000000c 	.word	0x2000000c
	...

08004f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f10:	4b07      	ldr	r3, [pc, #28]	; (8004f30 <pxCurrentTCBConst2>)
 8004f12:	6819      	ldr	r1, [r3, #0]
 8004f14:	6808      	ldr	r0, [r1, #0]
 8004f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f1a:	f380 8809 	msr	PSP, r0
 8004f1e:	f3bf 8f6f 	isb	sy
 8004f22:	f04f 0000 	mov.w	r0, #0
 8004f26:	f380 8811 	msr	BASEPRI, r0
 8004f2a:	4770      	bx	lr
 8004f2c:	f3af 8000 	nop.w

08004f30 <pxCurrentTCBConst2>:
 8004f30:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f34:	bf00      	nop
 8004f36:	bf00      	nop

08004f38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f38:	4808      	ldr	r0, [pc, #32]	; (8004f5c <prvPortStartFirstTask+0x24>)
 8004f3a:	6800      	ldr	r0, [r0, #0]
 8004f3c:	6800      	ldr	r0, [r0, #0]
 8004f3e:	f380 8808 	msr	MSP, r0
 8004f42:	f04f 0000 	mov.w	r0, #0
 8004f46:	f380 8814 	msr	CONTROL, r0
 8004f4a:	b662      	cpsie	i
 8004f4c:	b661      	cpsie	f
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	df00      	svc	0
 8004f58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f5a:	bf00      	nop
 8004f5c:	e000ed08 	.word	0xe000ed08

08004f60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f66:	4b44      	ldr	r3, [pc, #272]	; (8005078 <xPortStartScheduler+0x118>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a44      	ldr	r2, [pc, #272]	; (800507c <xPortStartScheduler+0x11c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d109      	bne.n	8004f84 <xPortStartScheduler+0x24>
 8004f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	613b      	str	r3, [r7, #16]
 8004f82:	e7fe      	b.n	8004f82 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f84:	4b3c      	ldr	r3, [pc, #240]	; (8005078 <xPortStartScheduler+0x118>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a3d      	ldr	r2, [pc, #244]	; (8005080 <xPortStartScheduler+0x120>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d109      	bne.n	8004fa2 <xPortStartScheduler+0x42>
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	e7fe      	b.n	8004fa0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004fa2:	4b38      	ldr	r3, [pc, #224]	; (8005084 <xPortStartScheduler+0x124>)
 8004fa4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	22ff      	movs	r2, #255	; 0xff
 8004fb2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004fbc:	78fb      	ldrb	r3, [r7, #3]
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	4b30      	ldr	r3, [pc, #192]	; (8005088 <xPortStartScheduler+0x128>)
 8004fc8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004fca:	4b30      	ldr	r3, [pc, #192]	; (800508c <xPortStartScheduler+0x12c>)
 8004fcc:	2207      	movs	r2, #7
 8004fce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fd0:	e009      	b.n	8004fe6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004fd2:	4b2e      	ldr	r3, [pc, #184]	; (800508c <xPortStartScheduler+0x12c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	4a2c      	ldr	r2, [pc, #176]	; (800508c <xPortStartScheduler+0x12c>)
 8004fda:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004fdc:	78fb      	ldrb	r3, [r7, #3]
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fe6:	78fb      	ldrb	r3, [r7, #3]
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fee:	2b80      	cmp	r3, #128	; 0x80
 8004ff0:	d0ef      	beq.n	8004fd2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ff2:	4b26      	ldr	r3, [pc, #152]	; (800508c <xPortStartScheduler+0x12c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f1c3 0307 	rsb	r3, r3, #7
 8004ffa:	2b04      	cmp	r3, #4
 8004ffc:	d009      	beq.n	8005012 <xPortStartScheduler+0xb2>
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	60bb      	str	r3, [r7, #8]
 8005010:	e7fe      	b.n	8005010 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005012:	4b1e      	ldr	r3, [pc, #120]	; (800508c <xPortStartScheduler+0x12c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	021b      	lsls	r3, r3, #8
 8005018:	4a1c      	ldr	r2, [pc, #112]	; (800508c <xPortStartScheduler+0x12c>)
 800501a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800501c:	4b1b      	ldr	r3, [pc, #108]	; (800508c <xPortStartScheduler+0x12c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005024:	4a19      	ldr	r2, [pc, #100]	; (800508c <xPortStartScheduler+0x12c>)
 8005026:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	b2da      	uxtb	r2, r3
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005030:	4b17      	ldr	r3, [pc, #92]	; (8005090 <xPortStartScheduler+0x130>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a16      	ldr	r2, [pc, #88]	; (8005090 <xPortStartScheduler+0x130>)
 8005036:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800503a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800503c:	4b14      	ldr	r3, [pc, #80]	; (8005090 <xPortStartScheduler+0x130>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a13      	ldr	r2, [pc, #76]	; (8005090 <xPortStartScheduler+0x130>)
 8005042:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005046:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005048:	f000 f8d6 	bl	80051f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800504c:	4b11      	ldr	r3, [pc, #68]	; (8005094 <xPortStartScheduler+0x134>)
 800504e:	2200      	movs	r2, #0
 8005050:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005052:	f000 f8f5 	bl	8005240 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005056:	4b10      	ldr	r3, [pc, #64]	; (8005098 <xPortStartScheduler+0x138>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a0f      	ldr	r2, [pc, #60]	; (8005098 <xPortStartScheduler+0x138>)
 800505c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005060:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005062:	f7ff ff69 	bl	8004f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005066:	f7ff fbaf 	bl	80047c8 <vTaskSwitchContext>
	prvTaskExitError();
 800506a:	f7ff ff23 	bl	8004eb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3718      	adds	r7, #24
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	e000ed00 	.word	0xe000ed00
 800507c:	410fc271 	.word	0x410fc271
 8005080:	410fc270 	.word	0x410fc270
 8005084:	e000e400 	.word	0xe000e400
 8005088:	200003ac 	.word	0x200003ac
 800508c:	200003b0 	.word	0x200003b0
 8005090:	e000ed20 	.word	0xe000ed20
 8005094:	2000000c 	.word	0x2000000c
 8005098:	e000ef34 	.word	0xe000ef34

0800509c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80050b4:	4b0e      	ldr	r3, [pc, #56]	; (80050f0 <vPortEnterCritical+0x54>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3301      	adds	r3, #1
 80050ba:	4a0d      	ldr	r2, [pc, #52]	; (80050f0 <vPortEnterCritical+0x54>)
 80050bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80050be:	4b0c      	ldr	r3, [pc, #48]	; (80050f0 <vPortEnterCritical+0x54>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d10e      	bne.n	80050e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80050c6:	4b0b      	ldr	r3, [pc, #44]	; (80050f4 <vPortEnterCritical+0x58>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d009      	beq.n	80050e4 <vPortEnterCritical+0x48>
 80050d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d4:	f383 8811 	msr	BASEPRI, r3
 80050d8:	f3bf 8f6f 	isb	sy
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	603b      	str	r3, [r7, #0]
 80050e2:	e7fe      	b.n	80050e2 <vPortEnterCritical+0x46>
	}
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	2000000c 	.word	0x2000000c
 80050f4:	e000ed04 	.word	0xe000ed04

080050f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050fe:	4b11      	ldr	r3, [pc, #68]	; (8005144 <vPortExitCritical+0x4c>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d109      	bne.n	800511a <vPortExitCritical+0x22>
 8005106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	607b      	str	r3, [r7, #4]
 8005118:	e7fe      	b.n	8005118 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800511a:	4b0a      	ldr	r3, [pc, #40]	; (8005144 <vPortExitCritical+0x4c>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	3b01      	subs	r3, #1
 8005120:	4a08      	ldr	r2, [pc, #32]	; (8005144 <vPortExitCritical+0x4c>)
 8005122:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005124:	4b07      	ldr	r3, [pc, #28]	; (8005144 <vPortExitCritical+0x4c>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d104      	bne.n	8005136 <vPortExitCritical+0x3e>
 800512c:	2300      	movs	r3, #0
 800512e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	2000000c 	.word	0x2000000c
	...

08005150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005150:	f3ef 8009 	mrs	r0, PSP
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	4b15      	ldr	r3, [pc, #84]	; (80051b0 <pxCurrentTCBConst>)
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	f01e 0f10 	tst.w	lr, #16
 8005160:	bf08      	it	eq
 8005162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800516a:	6010      	str	r0, [r2, #0]
 800516c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005170:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005174:	f380 8811 	msr	BASEPRI, r0
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	f7ff fb22 	bl	80047c8 <vTaskSwitchContext>
 8005184:	f04f 0000 	mov.w	r0, #0
 8005188:	f380 8811 	msr	BASEPRI, r0
 800518c:	bc09      	pop	{r0, r3}
 800518e:	6819      	ldr	r1, [r3, #0]
 8005190:	6808      	ldr	r0, [r1, #0]
 8005192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005196:	f01e 0f10 	tst.w	lr, #16
 800519a:	bf08      	it	eq
 800519c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80051a0:	f380 8809 	msr	PSP, r0
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	f3af 8000 	nop.w

080051b0 <pxCurrentTCBConst>:
 80051b0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051b4:	bf00      	nop
 80051b6:	bf00      	nop

080051b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80051d0:	f7ff fa3e 	bl	8004650 <xTaskIncrementTick>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051da:	4b06      	ldr	r3, [pc, #24]	; (80051f4 <SysTick_Handler+0x3c>)
 80051dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	2300      	movs	r3, #0
 80051e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80051ec:	bf00      	nop
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	e000ed04 	.word	0xe000ed04

080051f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80051f8:	b480      	push	{r7}
 80051fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051fc:	4b0b      	ldr	r3, [pc, #44]	; (800522c <vPortSetupTimerInterrupt+0x34>)
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005202:	4b0b      	ldr	r3, [pc, #44]	; (8005230 <vPortSetupTimerInterrupt+0x38>)
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005208:	4b0a      	ldr	r3, [pc, #40]	; (8005234 <vPortSetupTimerInterrupt+0x3c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a0a      	ldr	r2, [pc, #40]	; (8005238 <vPortSetupTimerInterrupt+0x40>)
 800520e:	fba2 2303 	umull	r2, r3, r2, r3
 8005212:	099b      	lsrs	r3, r3, #6
 8005214:	4a09      	ldr	r2, [pc, #36]	; (800523c <vPortSetupTimerInterrupt+0x44>)
 8005216:	3b01      	subs	r3, #1
 8005218:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800521a:	4b04      	ldr	r3, [pc, #16]	; (800522c <vPortSetupTimerInterrupt+0x34>)
 800521c:	2207      	movs	r2, #7
 800521e:	601a      	str	r2, [r3, #0]
}
 8005220:	bf00      	nop
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	e000e010 	.word	0xe000e010
 8005230:	e000e018 	.word	0xe000e018
 8005234:	20000000 	.word	0x20000000
 8005238:	10624dd3 	.word	0x10624dd3
 800523c:	e000e014 	.word	0xe000e014

08005240 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005240:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005250 <vPortEnableVFP+0x10>
 8005244:	6801      	ldr	r1, [r0, #0]
 8005246:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800524a:	6001      	str	r1, [r0, #0]
 800524c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800524e:	bf00      	nop
 8005250:	e000ed88 	.word	0xe000ed88

08005254 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800525a:	f3ef 8305 	mrs	r3, IPSR
 800525e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b0f      	cmp	r3, #15
 8005264:	d913      	bls.n	800528e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005266:	4a16      	ldr	r2, [pc, #88]	; (80052c0 <vPortValidateInterruptPriority+0x6c>)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005270:	4b14      	ldr	r3, [pc, #80]	; (80052c4 <vPortValidateInterruptPriority+0x70>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	7afa      	ldrb	r2, [r7, #11]
 8005276:	429a      	cmp	r2, r3
 8005278:	d209      	bcs.n	800528e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	607b      	str	r3, [r7, #4]
 800528c:	e7fe      	b.n	800528c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800528e:	4b0e      	ldr	r3, [pc, #56]	; (80052c8 <vPortValidateInterruptPriority+0x74>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005296:	4b0d      	ldr	r3, [pc, #52]	; (80052cc <vPortValidateInterruptPriority+0x78>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d909      	bls.n	80052b2 <vPortValidateInterruptPriority+0x5e>
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	603b      	str	r3, [r7, #0]
 80052b0:	e7fe      	b.n	80052b0 <vPortValidateInterruptPriority+0x5c>
	}
 80052b2:	bf00      	nop
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	e000e3f0 	.word	0xe000e3f0
 80052c4:	200003ac 	.word	0x200003ac
 80052c8:	e000ed0c 	.word	0xe000ed0c
 80052cc:	200003b0 	.word	0x200003b0

080052d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b08a      	sub	sp, #40	; 0x28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80052d8:	2300      	movs	r3, #0
 80052da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80052dc:	f7ff f90e 	bl	80044fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80052e0:	4b57      	ldr	r3, [pc, #348]	; (8005440 <pvPortMalloc+0x170>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80052e8:	f000 f90c 	bl	8005504 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052ec:	4b55      	ldr	r3, [pc, #340]	; (8005444 <pvPortMalloc+0x174>)
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4013      	ands	r3, r2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f040 808c 	bne.w	8005412 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d01c      	beq.n	800533a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005300:	2208      	movs	r2, #8
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4413      	add	r3, r2
 8005306:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	2b00      	cmp	r3, #0
 8005310:	d013      	beq.n	800533a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f023 0307 	bic.w	r3, r3, #7
 8005318:	3308      	adds	r3, #8
 800531a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	2b00      	cmp	r3, #0
 8005324:	d009      	beq.n	800533a <pvPortMalloc+0x6a>
 8005326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	617b      	str	r3, [r7, #20]
 8005338:	e7fe      	b.n	8005338 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d068      	beq.n	8005412 <pvPortMalloc+0x142>
 8005340:	4b41      	ldr	r3, [pc, #260]	; (8005448 <pvPortMalloc+0x178>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	429a      	cmp	r2, r3
 8005348:	d863      	bhi.n	8005412 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800534a:	4b40      	ldr	r3, [pc, #256]	; (800544c <pvPortMalloc+0x17c>)
 800534c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800534e:	4b3f      	ldr	r3, [pc, #252]	; (800544c <pvPortMalloc+0x17c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005354:	e004      	b.n	8005360 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	429a      	cmp	r2, r3
 8005368:	d903      	bls.n	8005372 <pvPortMalloc+0xa2>
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1f1      	bne.n	8005356 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005372:	4b33      	ldr	r3, [pc, #204]	; (8005440 <pvPortMalloc+0x170>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005378:	429a      	cmp	r2, r3
 800537a:	d04a      	beq.n	8005412 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2208      	movs	r2, #8
 8005382:	4413      	add	r3, r2
 8005384:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	1ad2      	subs	r2, r2, r3
 8005396:	2308      	movs	r3, #8
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	429a      	cmp	r2, r3
 800539c:	d91e      	bls.n	80053dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800539e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4413      	add	r3, r2
 80053a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	f003 0307 	and.w	r3, r3, #7
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d009      	beq.n	80053c4 <pvPortMalloc+0xf4>
 80053b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	613b      	str	r3, [r7, #16]
 80053c2:	e7fe      	b.n	80053c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	1ad2      	subs	r2, r2, r3
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80053d6:	69b8      	ldr	r0, [r7, #24]
 80053d8:	f000 f8f6 	bl	80055c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053dc:	4b1a      	ldr	r3, [pc, #104]	; (8005448 <pvPortMalloc+0x178>)
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	4a18      	ldr	r2, [pc, #96]	; (8005448 <pvPortMalloc+0x178>)
 80053e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053ea:	4b17      	ldr	r3, [pc, #92]	; (8005448 <pvPortMalloc+0x178>)
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	4b18      	ldr	r3, [pc, #96]	; (8005450 <pvPortMalloc+0x180>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d203      	bcs.n	80053fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053f6:	4b14      	ldr	r3, [pc, #80]	; (8005448 <pvPortMalloc+0x178>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a15      	ldr	r2, [pc, #84]	; (8005450 <pvPortMalloc+0x180>)
 80053fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	4b10      	ldr	r3, [pc, #64]	; (8005444 <pvPortMalloc+0x174>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	431a      	orrs	r2, r3
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005412:	f7ff f881 	bl	8004518 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	2b00      	cmp	r3, #0
 800541e:	d009      	beq.n	8005434 <pvPortMalloc+0x164>
 8005420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	e7fe      	b.n	8005432 <pvPortMalloc+0x162>
	return pvReturn;
 8005434:	69fb      	ldr	r3, [r7, #28]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3728      	adds	r7, #40	; 0x28
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	20003fbc 	.word	0x20003fbc
 8005444:	20003fc8 	.word	0x20003fc8
 8005448:	20003fc0 	.word	0x20003fc0
 800544c:	20003fb4 	.word	0x20003fb4
 8005450:	20003fc4 	.word	0x20003fc4

08005454 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d046      	beq.n	80054f4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005466:	2308      	movs	r3, #8
 8005468:	425b      	negs	r3, r3
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	4413      	add	r3, r2
 800546e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	4b20      	ldr	r3, [pc, #128]	; (80054fc <vPortFree+0xa8>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4013      	ands	r3, r2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d109      	bne.n	8005496 <vPortFree+0x42>
 8005482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005486:	f383 8811 	msr	BASEPRI, r3
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	e7fe      	b.n	8005494 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d009      	beq.n	80054b2 <vPortFree+0x5e>
 800549e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	60bb      	str	r3, [r7, #8]
 80054b0:	e7fe      	b.n	80054b0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	4b11      	ldr	r3, [pc, #68]	; (80054fc <vPortFree+0xa8>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4013      	ands	r3, r2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d019      	beq.n	80054f4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d115      	bne.n	80054f4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	4b0b      	ldr	r3, [pc, #44]	; (80054fc <vPortFree+0xa8>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	43db      	mvns	r3, r3
 80054d2:	401a      	ands	r2, r3
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80054d8:	f7ff f810 	bl	80044fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	4b07      	ldr	r3, [pc, #28]	; (8005500 <vPortFree+0xac>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4413      	add	r3, r2
 80054e6:	4a06      	ldr	r2, [pc, #24]	; (8005500 <vPortFree+0xac>)
 80054e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054ea:	6938      	ldr	r0, [r7, #16]
 80054ec:	f000 f86c 	bl	80055c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80054f0:	f7ff f812 	bl	8004518 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80054f4:	bf00      	nop
 80054f6:	3718      	adds	r7, #24
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	20003fc8 	.word	0x20003fc8
 8005500:	20003fc0 	.word	0x20003fc0

08005504 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800550a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800550e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005510:	4b27      	ldr	r3, [pc, #156]	; (80055b0 <prvHeapInit+0xac>)
 8005512:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f003 0307 	and.w	r3, r3, #7
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00c      	beq.n	8005538 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	3307      	adds	r3, #7
 8005522:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0307 	bic.w	r3, r3, #7
 800552a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	4a1f      	ldr	r2, [pc, #124]	; (80055b0 <prvHeapInit+0xac>)
 8005534:	4413      	add	r3, r2
 8005536:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800553c:	4a1d      	ldr	r2, [pc, #116]	; (80055b4 <prvHeapInit+0xb0>)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005542:	4b1c      	ldr	r3, [pc, #112]	; (80055b4 <prvHeapInit+0xb0>)
 8005544:	2200      	movs	r2, #0
 8005546:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	4413      	add	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005550:	2208      	movs	r2, #8
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	1a9b      	subs	r3, r3, r2
 8005556:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0307 	bic.w	r3, r3, #7
 800555e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4a15      	ldr	r2, [pc, #84]	; (80055b8 <prvHeapInit+0xb4>)
 8005564:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005566:	4b14      	ldr	r3, [pc, #80]	; (80055b8 <prvHeapInit+0xb4>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2200      	movs	r2, #0
 800556c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800556e:	4b12      	ldr	r3, [pc, #72]	; (80055b8 <prvHeapInit+0xb4>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2200      	movs	r2, #0
 8005574:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	1ad2      	subs	r2, r2, r3
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005584:	4b0c      	ldr	r3, [pc, #48]	; (80055b8 <prvHeapInit+0xb4>)
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	4a0a      	ldr	r2, [pc, #40]	; (80055bc <prvHeapInit+0xb8>)
 8005592:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	4a09      	ldr	r2, [pc, #36]	; (80055c0 <prvHeapInit+0xbc>)
 800559a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800559c:	4b09      	ldr	r3, [pc, #36]	; (80055c4 <prvHeapInit+0xc0>)
 800559e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80055a2:	601a      	str	r2, [r3, #0]
}
 80055a4:	bf00      	nop
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	200003b4 	.word	0x200003b4
 80055b4:	20003fb4 	.word	0x20003fb4
 80055b8:	20003fbc 	.word	0x20003fbc
 80055bc:	20003fc4 	.word	0x20003fc4
 80055c0:	20003fc0 	.word	0x20003fc0
 80055c4:	20003fc8 	.word	0x20003fc8

080055c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055d0:	4b28      	ldr	r3, [pc, #160]	; (8005674 <prvInsertBlockIntoFreeList+0xac>)
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	e002      	b.n	80055dc <prvInsertBlockIntoFreeList+0x14>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d8f7      	bhi.n	80055d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	4413      	add	r3, r2
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d108      	bne.n	800560a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	441a      	add	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	441a      	add	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	d118      	bne.n	8005650 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	4b15      	ldr	r3, [pc, #84]	; (8005678 <prvInsertBlockIntoFreeList+0xb0>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	429a      	cmp	r2, r3
 8005628:	d00d      	beq.n	8005646 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	441a      	add	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	e008      	b.n	8005658 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005646:	4b0c      	ldr	r3, [pc, #48]	; (8005678 <prvInsertBlockIntoFreeList+0xb0>)
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	e003      	b.n	8005658 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	429a      	cmp	r2, r3
 800565e:	d002      	beq.n	8005666 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005666:	bf00      	nop
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	20003fb4 	.word	0x20003fb4
 8005678:	20003fbc 	.word	0x20003fbc

0800567c <__libc_init_array>:
 800567c:	b570      	push	{r4, r5, r6, lr}
 800567e:	4e0d      	ldr	r6, [pc, #52]	; (80056b4 <__libc_init_array+0x38>)
 8005680:	4c0d      	ldr	r4, [pc, #52]	; (80056b8 <__libc_init_array+0x3c>)
 8005682:	1ba4      	subs	r4, r4, r6
 8005684:	10a4      	asrs	r4, r4, #2
 8005686:	2500      	movs	r5, #0
 8005688:	42a5      	cmp	r5, r4
 800568a:	d109      	bne.n	80056a0 <__libc_init_array+0x24>
 800568c:	4e0b      	ldr	r6, [pc, #44]	; (80056bc <__libc_init_array+0x40>)
 800568e:	4c0c      	ldr	r4, [pc, #48]	; (80056c0 <__libc_init_array+0x44>)
 8005690:	f000 f82c 	bl	80056ec <_init>
 8005694:	1ba4      	subs	r4, r4, r6
 8005696:	10a4      	asrs	r4, r4, #2
 8005698:	2500      	movs	r5, #0
 800569a:	42a5      	cmp	r5, r4
 800569c:	d105      	bne.n	80056aa <__libc_init_array+0x2e>
 800569e:	bd70      	pop	{r4, r5, r6, pc}
 80056a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056a4:	4798      	blx	r3
 80056a6:	3501      	adds	r5, #1
 80056a8:	e7ee      	b.n	8005688 <__libc_init_array+0xc>
 80056aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056ae:	4798      	blx	r3
 80056b0:	3501      	adds	r5, #1
 80056b2:	e7f2      	b.n	800569a <__libc_init_array+0x1e>
 80056b4:	08005784 	.word	0x08005784
 80056b8:	08005784 	.word	0x08005784
 80056bc:	08005784 	.word	0x08005784
 80056c0:	08005788 	.word	0x08005788

080056c4 <memcpy>:
 80056c4:	b510      	push	{r4, lr}
 80056c6:	1e43      	subs	r3, r0, #1
 80056c8:	440a      	add	r2, r1
 80056ca:	4291      	cmp	r1, r2
 80056cc:	d100      	bne.n	80056d0 <memcpy+0xc>
 80056ce:	bd10      	pop	{r4, pc}
 80056d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056d8:	e7f7      	b.n	80056ca <memcpy+0x6>

080056da <memset>:
 80056da:	4402      	add	r2, r0
 80056dc:	4603      	mov	r3, r0
 80056de:	4293      	cmp	r3, r2
 80056e0:	d100      	bne.n	80056e4 <memset+0xa>
 80056e2:	4770      	bx	lr
 80056e4:	f803 1b01 	strb.w	r1, [r3], #1
 80056e8:	e7f9      	b.n	80056de <memset+0x4>
	...

080056ec <_init>:
 80056ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ee:	bf00      	nop
 80056f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056f2:	bc08      	pop	{r3}
 80056f4:	469e      	mov	lr, r3
 80056f6:	4770      	bx	lr

080056f8 <_fini>:
 80056f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056fa:	bf00      	nop
 80056fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056fe:	bc08      	pop	{r3}
 8005700:	469e      	mov	lr, r3
 8005702:	4770      	bx	lr
