
Exercise_13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004860  08004860  00014860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048f4  080048f4  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080048f4  080048f4  000148f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048fc  080048fc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048fc  080048fc  000148fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004900  08004900  00014900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004904  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004148  20000014  08004918  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000415c  08004918  0002415c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a43  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f7a  00000000  00000000  00035a87  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014a0  00000000  00000000  00038a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001348  00000000  00000000  00039ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001877f  00000000  00000000  0003b1f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fabd  00000000  00000000  0005396f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097a4b  00000000  00000000  0006342c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fae77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000566c  00000000  00000000  000faef4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004848 	.word	0x08004848

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	08004848 	.word	0x08004848

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <Set_InterThreadCom_F>:

InterThreadCom_F BLUE2GREEN_F = RESET_F;
InterThreadCom_F BLUE2RED_F = RESET_F;

void Set_InterThreadCom_F (InterThreadCom_F_ID id)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]
   switch(id)
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d002      	beq.n	80004f6 <Set_InterThreadCom_F+0x16>
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d004      	beq.n	80004fe <Set_InterThreadCom_F+0x1e>
    	  break;
      case BLUE2RED_ID:
    	  BLUE2RED_F = SET_F;
    	  break;
   }
};
 80004f4:	e007      	b.n	8000506 <Set_InterThreadCom_F+0x26>
    	  BLUE2GREEN_F = SET_F;
 80004f6:	4b07      	ldr	r3, [pc, #28]	; (8000514 <Set_InterThreadCom_F+0x34>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]
    	  break;
 80004fc:	e003      	b.n	8000506 <Set_InterThreadCom_F+0x26>
    	  BLUE2RED_F = SET_F;
 80004fe:	4b06      	ldr	r3, [pc, #24]	; (8000518 <Set_InterThreadCom_F+0x38>)
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
    	  break;
 8000504:	bf00      	nop
};
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	20000000 	.word	0x20000000
 8000518:	20000001 	.word	0x20000001

0800051c <Reset_InterThreadCom_F>:
void Reset_InterThreadCom_F (InterThreadCom_F_ID id)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	71fb      	strb	r3, [r7, #7]
    switch(id)
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d002      	beq.n	8000532 <Reset_InterThreadCom_F+0x16>
 800052c:	2b01      	cmp	r3, #1
 800052e:	d004      	beq.n	800053a <Reset_InterThreadCom_F+0x1e>
	       break;
	   case BLUE2RED_ID:
	       BLUE2RED_F = RESET_F;
	       break;
    }
};
 8000530:	e007      	b.n	8000542 <Reset_InterThreadCom_F+0x26>
	       BLUE2GREEN_F = RESET_F;
 8000532:	4b07      	ldr	r3, [pc, #28]	; (8000550 <Reset_InterThreadCom_F+0x34>)
 8000534:	2201      	movs	r2, #1
 8000536:	701a      	strb	r2, [r3, #0]
	       break;
 8000538:	e003      	b.n	8000542 <Reset_InterThreadCom_F+0x26>
	       BLUE2RED_F = RESET_F;
 800053a:	4b06      	ldr	r3, [pc, #24]	; (8000554 <Reset_InterThreadCom_F+0x38>)
 800053c:	2201      	movs	r2, #1
 800053e:	701a      	strb	r2, [r3, #0]
	       break;
 8000540:	bf00      	nop
};
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	20000000 	.word	0x20000000
 8000554:	20000001 	.word	0x20000001

08000558 <Check_InterThreadCom_F>:
InterThreadCom_F Check_InterThreadCom_F (InterThreadCom_F_ID id)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
    switch(id)
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d002      	beq.n	800056e <Check_InterThreadCom_F+0x16>
 8000568:	2b01      	cmp	r3, #1
 800056a:	d003      	beq.n	8000574 <Check_InterThreadCom_F+0x1c>
 800056c:	e005      	b.n	800057a <Check_InterThreadCom_F+0x22>
    {
       case BLUE2GREEN_ID:
           return BLUE2GREEN_F;
 800056e:	4b06      	ldr	r3, [pc, #24]	; (8000588 <Check_InterThreadCom_F+0x30>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	e003      	b.n	800057c <Check_InterThreadCom_F+0x24>
       case BLUE2RED_ID:
           return BLUE2RED_F;
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <Check_InterThreadCom_F+0x34>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	e000      	b.n	800057c <Check_InterThreadCom_F+0x24>
    }

    return ERROR_F;
 800057a:	2303      	movs	r3, #3
};
 800057c:	4618      	mov	r0, r3
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	20000000 	.word	0x20000000
 800058c:	20000001 	.word	0x20000001

08000590 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	4a07      	ldr	r2, [pc, #28]	; (80005bc <vApplicationGetIdleTaskMemory+0x2c>)
 80005a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <vApplicationGetIdleTaskMemory+0x30>)
 80005a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000030 	.word	0x20000030
 80005c0:	20000084 	.word	0x20000084

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	b096      	sub	sp, #88	; 0x58
 80005c8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fdd7 	bl	800117c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f851 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 f995 	bl	8000900 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005d6:	f000 f8d1 	bl	800077c <MX_I2C1_Init>
  MX_I2S2_Init();
 80005da:	f000 f8fd 	bl	80007d8 <MX_I2S2_Init>
  MX_I2S3_Init();
 80005de:	f000 f929 	bl	8000834 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005e2:	f000 f957 	bl	8000894 <MX_SPI1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of GREEN_LED */
  osThreadDef(GREEN_LED, Start_GREEN_LED, osPriorityNormal, 0, 128);
 80005e6:	4b1d      	ldr	r3, [pc, #116]	; (800065c <main+0x98>)
 80005e8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80005ec:	461d      	mov	r5, r3
 80005ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GREEN_LEDHandle = osThreadCreate(osThread(GREEN_LED), NULL);
 80005fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f002 fef0 	bl	80033e6 <osThreadCreate>
 8000606:	4602      	mov	r2, r0
 8000608:	4b15      	ldr	r3, [pc, #84]	; (8000660 <main+0x9c>)
 800060a:	601a      	str	r2, [r3, #0]

  /* definition and creation of RED_LED */
  osThreadDef(RED_LED, Start_RED_LED, osPriorityNormal, 0, 128);
 800060c:	4b15      	ldr	r3, [pc, #84]	; (8000664 <main+0xa0>)
 800060e:	f107 0420 	add.w	r4, r7, #32
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RED_LEDHandle = osThreadCreate(osThread(RED_LED), NULL);
 8000620:	f107 0320 	add.w	r3, r7, #32
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fedd 	bl	80033e6 <osThreadCreate>
 800062c:	4602      	mov	r2, r0
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <main+0xa4>)
 8000630:	601a      	str	r2, [r3, #0]

  /* definition and creation of BLUE_LED */
  osThreadDef(BLUE_LED, Start_BLUE_LED, osPriorityNormal, 0, 128);
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <main+0xa8>)
 8000634:	1d3c      	adds	r4, r7, #4
 8000636:	461d      	mov	r5, r3
 8000638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000640:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BLUE_LEDHandle = osThreadCreate(osThread(BLUE_LED), NULL);
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f002 fecc 	bl	80033e6 <osThreadCreate>
 800064e:	4602      	mov	r2, r0
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <main+0xac>)
 8000652:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000654:	f002 fec0 	bl	80033d8 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000658:	e7fe      	b.n	8000658 <main+0x94>
 800065a:	bf00      	nop
 800065c:	0800486c 	.word	0x0800486c
 8000660:	20003fd0 	.word	0x20003fd0
 8000664:	08004890 	.word	0x08004890
 8000668:	20004080 	.word	0x20004080
 800066c:	080048b8 	.word	0x080048b8
 8000670:	20004084 	.word	0x20004084

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b09a      	sub	sp, #104	; 0x68
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800067e:	2230      	movs	r2, #48	; 0x30
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f004 f8d8 	bl	8004838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
 80006a8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	4b31      	ldr	r3, [pc, #196]	; (8000774 <SystemClock_Config+0x100>)
 80006b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b2:	4a30      	ldr	r2, [pc, #192]	; (8000774 <SystemClock_Config+0x100>)
 80006b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b8:	6413      	str	r3, [r2, #64]	; 0x40
 80006ba:	4b2e      	ldr	r3, [pc, #184]	; (8000774 <SystemClock_Config+0x100>)
 80006bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	4b2b      	ldr	r3, [pc, #172]	; (8000778 <SystemClock_Config+0x104>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a2a      	ldr	r2, [pc, #168]	; (8000778 <SystemClock_Config+0x104>)
 80006d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006d4:	6013      	str	r3, [r2, #0]
 80006d6:	4b28      	ldr	r3, [pc, #160]	; (8000778 <SystemClock_Config+0x104>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e2:	2301      	movs	r3, #1
 80006e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ec:	2302      	movs	r3, #2
 80006ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006f4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006f6:	2304      	movs	r3, #4
 80006f8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006fa:	23c0      	movs	r3, #192	; 0xc0
 80006fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006fe:	2304      	movs	r3, #4
 8000700:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000702:	2308      	movs	r3, #8
 8000704:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800070a:	4618      	mov	r0, r3
 800070c:	f001 fde8 	bl	80022e0 <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000716:	f000 fae3 	bl	8000ce0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2302      	movs	r3, #2
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000726:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800072a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000734:	2103      	movs	r1, #3
 8000736:	4618      	mov	r0, r3
 8000738:	f002 f842 	bl	80027c0 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000742:	f000 facd 	bl	8000ce0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000746:	2301      	movs	r3, #1
 8000748:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800074a:	23c8      	movs	r3, #200	; 0xc8
 800074c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800074e:	2305      	movs	r3, #5
 8000750:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000752:	2302      	movs	r3, #2
 8000754:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	4618      	mov	r0, r3
 800075c:	f002 fa54 	bl	8002c08 <HAL_RCCEx_PeriphCLKConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000766:	f000 fabb 	bl	8000ce0 <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3768      	adds	r7, #104	; 0x68
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_I2C1_Init+0x50>)
 8000782:	4a13      	ldr	r2, [pc, #76]	; (80007d0 <MX_I2C1_Init+0x54>)
 8000784:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_I2C1_Init+0x50>)
 8000788:	4a12      	ldr	r2, [pc, #72]	; (80007d4 <MX_I2C1_Init+0x58>)
 800078a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_I2C1_Init+0x50>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_I2C1_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_I2C1_Init+0x50>)
 800079a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800079e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <MX_I2C1_Init+0x50>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_I2C1_Init+0x50>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <MX_I2C1_Init+0x50>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_I2C1_Init+0x50>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <MX_I2C1_Init+0x50>)
 80007ba:	f000 ffb9 	bl	8001730 <HAL_I2C_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007c4:	f000 fa8c 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20003fd4 	.word	0x20003fd4
 80007d0:	40005400 	.word	0x40005400
 80007d4:	000186a0 	.word	0x000186a0

080007d8 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_I2S2_Init+0x50>)
 80007de:	4a13      	ldr	r2, [pc, #76]	; (800082c <MX_I2S2_Init+0x54>)
 80007e0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_I2S2_Init+0x50>)
 80007e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_I2S2_Init+0x50>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007f0:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_I2S2_Init+0x50>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_I2S2_Init+0x50>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <MX_I2S2_Init+0x50>)
 80007fe:	4a0c      	ldr	r2, [pc, #48]	; (8000830 <MX_I2S2_Init+0x58>)
 8000800:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_I2S2_Init+0x50>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <MX_I2S2_Init+0x50>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_I2S2_Init+0x50>)
 8000810:	2201      	movs	r2, #1
 8000812:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_I2S2_Init+0x50>)
 8000816:	f001 f8c3 	bl	80019a0 <HAL_I2S_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000820:	f000 fa5e 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20004088 	.word	0x20004088
 800082c:	40003800 	.word	0x40003800
 8000830:	00017700 	.word	0x00017700

08000834 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_I2S3_Init+0x54>)
 800083a:	4a14      	ldr	r2, [pc, #80]	; (800088c <MX_I2S3_Init+0x58>)
 800083c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_I2S3_Init+0x54>)
 8000840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000844:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <MX_I2S3_Init+0x54>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800084c:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_I2S3_Init+0x54>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <MX_I2S3_Init+0x54>)
 8000854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000858:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_I2S3_Init+0x54>)
 800085c:	4a0c      	ldr	r2, [pc, #48]	; (8000890 <MX_I2S3_Init+0x5c>)
 800085e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_I2S3_Init+0x54>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_I2S3_Init+0x54>)
 8000868:	2200      	movs	r2, #0
 800086a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_I2S3_Init+0x54>)
 800086e:	2200      	movs	r2, #0
 8000870:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_I2S3_Init+0x54>)
 8000874:	f001 f894 	bl	80019a0 <HAL_I2S_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800087e:	f000 fa2f 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200040d0 	.word	0x200040d0
 800088c:	40003c00 	.word	0x40003c00
 8000890:	00017700 	.word	0x00017700

08000894 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000898:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_SPI1_Init+0x64>)
 800089a:	4a18      	ldr	r2, [pc, #96]	; (80008fc <MX_SPI1_Init+0x68>)
 800089c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008da:	2200      	movs	r2, #0
 80008dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008e0:	220a      	movs	r2, #10
 80008e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008e6:	f002 fadd 	bl	8002ea4 <HAL_SPI_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008f0:	f000 f9f6 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20004028 	.word	0x20004028
 80008fc:	40013000 	.word	0x40013000

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08c      	sub	sp, #48	; 0x30
 8000904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
 800091a:	4b6f      	ldr	r3, [pc, #444]	; (8000ad8 <MX_GPIO_Init+0x1d8>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a6e      	ldr	r2, [pc, #440]	; (8000ad8 <MX_GPIO_Init+0x1d8>)
 8000920:	f043 0310 	orr.w	r3, r3, #16
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b6c      	ldr	r3, [pc, #432]	; (8000ad8 <MX_GPIO_Init+0x1d8>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0310 	and.w	r3, r3, #16
 800092e:	61bb      	str	r3, [r7, #24]
 8000930:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	4b68      	ldr	r3, [pc, #416]	; (8000ad8 <MX_GPIO_Init+0x1d8>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a67      	ldr	r2, [pc, #412]	; (8000ad8 <MX_GPIO_Init+0x1d8>)
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b65      	ldr	r3, [pc, #404]	; (8000ad8 <MX_GPIO_Init+0x1d8>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	4b61      	ldr	r3, [pc, #388]	; (8000ad8 <MX_GPIO_Init+0x1d8>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a60      	ldr	r2, [pc, #384]	; (8000ad8 <MX_GPIO_Init+0x1d8>)
 8000958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b5e      	ldr	r3, [pc, #376]	; (8000ad8 <MX_GPIO_Init+0x1d8>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	4b5a      	ldr	r3, [pc, #360]	; (8000ad8 <MX_GPIO_Init+0x1d8>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a59      	ldr	r2, [pc, #356]	; (8000ad8 <MX_GPIO_Init+0x1d8>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b57      	ldr	r3, [pc, #348]	; (8000ad8 <MX_GPIO_Init+0x1d8>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	4b53      	ldr	r3, [pc, #332]	; (8000ad8 <MX_GPIO_Init+0x1d8>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a52      	ldr	r2, [pc, #328]	; (8000ad8 <MX_GPIO_Init+0x1d8>)
 8000990:	f043 0302 	orr.w	r3, r3, #2
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b50      	ldr	r3, [pc, #320]	; (8000ad8 <MX_GPIO_Init+0x1d8>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b4c      	ldr	r3, [pc, #304]	; (8000ad8 <MX_GPIO_Init+0x1d8>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a4b      	ldr	r2, [pc, #300]	; (8000ad8 <MX_GPIO_Init+0x1d8>)
 80009ac:	f043 0308 	orr.w	r3, r3, #8
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b49      	ldr	r3, [pc, #292]	; (8000ad8 <MX_GPIO_Init+0x1d8>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0308 	and.w	r3, r3, #8
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2108      	movs	r1, #8
 80009c2:	4846      	ldr	r0, [pc, #280]	; (8000adc <MX_GPIO_Init+0x1dc>)
 80009c4:	f000 fe80 	bl	80016c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009c8:	2201      	movs	r2, #1
 80009ca:	2101      	movs	r1, #1
 80009cc:	4844      	ldr	r0, [pc, #272]	; (8000ae0 <MX_GPIO_Init+0x1e0>)
 80009ce:	f000 fe7b 	bl	80016c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin 
 80009d2:	2200      	movs	r2, #0
 80009d4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009d8:	4842      	ldr	r0, [pc, #264]	; (8000ae4 <MX_GPIO_Init+0x1e4>)
 80009da:	f000 fe75 	bl	80016c8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80009de:	2304      	movs	r3, #4
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	483a      	ldr	r0, [pc, #232]	; (8000adc <MX_GPIO_Init+0x1dc>)
 80009f2:	f000 fce7 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009f6:	2308      	movs	r3, #8
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fa:	2301      	movs	r3, #1
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4833      	ldr	r0, [pc, #204]	; (8000adc <MX_GPIO_Init+0x1dc>)
 8000a0e:	f000 fcd9 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000a12:	2332      	movs	r3, #50	; 0x32
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a16:	4b34      	ldr	r3, [pc, #208]	; (8000ae8 <MX_GPIO_Init+0x1e8>)
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	482d      	ldr	r0, [pc, #180]	; (8000adc <MX_GPIO_Init+0x1dc>)
 8000a26:	f000 fccd 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4827      	ldr	r0, [pc, #156]	; (8000ae0 <MX_GPIO_Init+0x1e0>)
 8000a42:	f000 fcbf 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a46:	2301      	movs	r3, #1
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a4a:	4b27      	ldr	r3, [pc, #156]	; (8000ae8 <MX_GPIO_Init+0x1e8>)
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	4824      	ldr	r0, [pc, #144]	; (8000aec <MX_GPIO_Init+0x1ec>)
 8000a5a:	f000 fcb3 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin ORANGE_LED_Pin RED_LED_Pin BLUE_LED_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin 
 8000a5e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a62:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	481b      	ldr	r0, [pc, #108]	; (8000ae4 <MX_GPIO_Init+0x1e4>)
 8000a78:	f000 fca4 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4816      	ldr	r0, [pc, #88]	; (8000aec <MX_GPIO_Init+0x1ec>)
 8000a92:	f000 fc97 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a96:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000aa8:	230a      	movs	r3, #10
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480e      	ldr	r0, [pc, #56]	; (8000aec <MX_GPIO_Init+0x1ec>)
 8000ab4:	f000 fc86 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ab8:	2320      	movs	r3, #32
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abc:	2300      	movs	r3, #0
 8000abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <MX_GPIO_Init+0x1e4>)
 8000acc:	f000 fc7a 	bl	80013c4 <HAL_GPIO_Init>

}
 8000ad0:	bf00      	nop
 8000ad2:	3730      	adds	r7, #48	; 0x30
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40020800 	.word	0x40020800
 8000ae4:	40020c00 	.word	0x40020c00
 8000ae8:	10120000 	.word	0x10120000
 8000aec:	40020000 	.word	0x40020000

08000af0 <Start_GREEN_LED>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_Start_GREEN_LED */
void Start_GREEN_LED(void const * argument)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  int delayCnt_1 = 10000;
 8000af8:	f242 7310 	movw	r3, #10000	; 0x2710
 8000afc:	613b      	str	r3, [r7, #16]
  int freqCnt_1 = 50;
 8000afe:	2332      	movs	r3, #50	; 0x32
 8000b00:	60fb      	str	r3, [r7, #12]

  int freqCnt_2 = 500;
 8000b02:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b06:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	 for(int i = 0; i<delayCnt_1/freqCnt_1; i++)
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
 8000b0c:	e00b      	b.n	8000b26 <Start_GREEN_LED+0x36>
	 {
       HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 8000b0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b12:	4822      	ldr	r0, [pc, #136]	; (8000b9c <Start_GREEN_LED+0xac>)
 8000b14:	f000 fdf1 	bl	80016fa <HAL_GPIO_TogglePin>
	   osDelay(freqCnt_1);
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f002 fcaf 	bl	800347e <osDelay>
	 for(int i = 0; i<delayCnt_1/freqCnt_1; i++)
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	3301      	adds	r3, #1
 8000b24:	61fb      	str	r3, [r7, #28]
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b2e:	69fa      	ldr	r2, [r7, #28]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	dbec      	blt.n	8000b0e <Start_GREEN_LED+0x1e>
	 }
     Set_InterThreadCom_F(BLUE2GREEN_ID);
 8000b34:	2000      	movs	r0, #0
 8000b36:	f7ff fcd3 	bl	80004e0 <Set_InterThreadCom_F>
	 for(int i = 0; i<delayCnt_1/freqCnt_2; i++)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61bb      	str	r3, [r7, #24]
 8000b3e:	e00b      	b.n	8000b58 <Start_GREEN_LED+0x68>
	 {
	   HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 8000b40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b44:	4815      	ldr	r0, [pc, #84]	; (8000b9c <Start_GREEN_LED+0xac>)
 8000b46:	f000 fdd8 	bl	80016fa <HAL_GPIO_TogglePin>
	   osDelay(freqCnt_2);
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f002 fc96 	bl	800347e <osDelay>
	 for(int i = 0; i<delayCnt_1/freqCnt_2; i++)
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	3301      	adds	r3, #1
 8000b56:	61bb      	str	r3, [r7, #24]
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	dbec      	blt.n	8000b40 <Start_GREEN_LED+0x50>
	 }
	 Reset_InterThreadCom_F(BLUE2GREEN_ID);
 8000b66:	2000      	movs	r0, #0
 8000b68:	f7ff fcd8 	bl	800051c <Reset_InterThreadCom_F>
	 for(int i = 0; i<delayCnt_1/freqCnt_1; i++)
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	e00b      	b.n	8000b8a <Start_GREEN_LED+0x9a>
	 {
	   HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 8000b72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b76:	4809      	ldr	r0, [pc, #36]	; (8000b9c <Start_GREEN_LED+0xac>)
 8000b78:	f000 fdbf 	bl	80016fa <HAL_GPIO_TogglePin>
	   osDelay(freqCnt_1);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f002 fc7d 	bl	800347e <osDelay>
	 for(int i = 0; i<delayCnt_1/freqCnt_1; i++)
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	3301      	adds	r3, #1
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b92:	697a      	ldr	r2, [r7, #20]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	dbec      	blt.n	8000b72 <Start_GREEN_LED+0x82>
	 for(int i = 0; i<delayCnt_1/freqCnt_1; i++)
 8000b98:	e7b6      	b.n	8000b08 <Start_GREEN_LED+0x18>
 8000b9a:	bf00      	nop
 8000b9c:	40020c00 	.word	0x40020c00

08000ba0 <Start_RED_LED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_RED_LED */
void Start_RED_LED(void const * argument)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_RED_LED */
  int delayCnt_1 = 15000;
 8000ba8:	f643 2398 	movw	r3, #15000	; 0x3a98
 8000bac:	61bb      	str	r3, [r7, #24]
  int freqCnt_1 = 50;
 8000bae:	2332      	movs	r3, #50	; 0x32
 8000bb0:	617b      	str	r3, [r7, #20]

  int delayCnt_2 = 10000;
 8000bb2:	f242 7310 	movw	r3, #10000	; 0x2710
 8000bb6:	613b      	str	r3, [r7, #16]
  int freqCnt_2 = 500;
 8000bb8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bbc:	60fb      	str	r3, [r7, #12]

  int delayCnt_3 =50000;
 8000bbe:	f24c 3350 	movw	r3, #50000	; 0xc350
 8000bc2:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
		 for(int i = 0; i<delayCnt_1/freqCnt_1; i++)
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8000bc8:	e00b      	b.n	8000be2 <Start_RED_LED+0x42>
		 {
		   HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8000bca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bce:	4822      	ldr	r0, [pc, #136]	; (8000c58 <Start_RED_LED+0xb8>)
 8000bd0:	f000 fd93 	bl	80016fa <HAL_GPIO_TogglePin>
		   osDelay(freqCnt_1);
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f002 fc51 	bl	800347e <osDelay>
		 for(int i = 0; i<delayCnt_1/freqCnt_1; i++)
 8000bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bde:	3301      	adds	r3, #1
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
 8000be2:	69ba      	ldr	r2, [r7, #24]
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bec:	429a      	cmp	r2, r3
 8000bee:	dbec      	blt.n	8000bca <Start_RED_LED+0x2a>
		 }
	     Set_InterThreadCom_F(BLUE2RED_ID);
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	f7ff fc75 	bl	80004e0 <Set_InterThreadCom_F>
		 for(int i = 0; i<delayCnt_2/freqCnt_2; i++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
 8000bfa:	e00b      	b.n	8000c14 <Start_RED_LED+0x74>
		 {
		   HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8000bfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c00:	4815      	ldr	r0, [pc, #84]	; (8000c58 <Start_RED_LED+0xb8>)
 8000c02:	f000 fd7a 	bl	80016fa <HAL_GPIO_TogglePin>
		   osDelay(freqCnt_2);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f002 fc38 	bl	800347e <osDelay>
		 for(int i = 0; i<delayCnt_2/freqCnt_2; i++)
 8000c0e:	6a3b      	ldr	r3, [r7, #32]
 8000c10:	3301      	adds	r3, #1
 8000c12:	623b      	str	r3, [r7, #32]
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c1c:	6a3a      	ldr	r2, [r7, #32]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	dbec      	blt.n	8000bfc <Start_RED_LED+0x5c>
		 }
		 Reset_InterThreadCom_F(BLUE2RED_ID);
 8000c22:	2001      	movs	r0, #1
 8000c24:	f7ff fc7a 	bl	800051c <Reset_InterThreadCom_F>
		 for(int i = 0; i<delayCnt_3/freqCnt_1; i++)
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
 8000c2c:	e00b      	b.n	8000c46 <Start_RED_LED+0xa6>
		 {
		   HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8000c2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c32:	4809      	ldr	r0, [pc, #36]	; (8000c58 <Start_RED_LED+0xb8>)
 8000c34:	f000 fd61 	bl	80016fa <HAL_GPIO_TogglePin>
		   osDelay(freqCnt_1);
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f002 fc1f 	bl	800347e <osDelay>
		 for(int i = 0; i<delayCnt_3/freqCnt_1; i++)
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	3301      	adds	r3, #1
 8000c44:	61fb      	str	r3, [r7, #28]
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c4e:	69fa      	ldr	r2, [r7, #28]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	dbec      	blt.n	8000c2e <Start_RED_LED+0x8e>
		 for(int i = 0; i<delayCnt_1/freqCnt_1; i++)
 8000c54:	e7b6      	b.n	8000bc4 <Start_RED_LED+0x24>
 8000c56:	bf00      	nop
 8000c58:	40020c00 	.word	0x40020c00

08000c5c <Start_BLUE_LED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_BLUE_LED */
void Start_BLUE_LED(void const * argument)
{
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b087      	sub	sp, #28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_BLUE_LED */
  int freqCnt_1 = 50;
 8000c64:	2332      	movs	r3, #50	; 0x32
 8000c66:	613b      	str	r3, [r7, #16]
  int freqCnt_2 = 500;
 8000c68:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c6c:	60fb      	str	r3, [r7, #12]
  int freqCnt_u;
  InterThreadCom_F status;
  /* Infinite loop */
  for(;;)
  {
	  status = Check_InterThreadCom_F(BLUE2GREEN_ID)
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f7ff fc72 	bl	8000558 <Check_InterThreadCom_F>
 8000c74:	4603      	mov	r3, r0
 8000c76:	461c      	mov	r4, r3
             + Check_InterThreadCom_F(BLUE2RED_ID);
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f7ff fc6d 	bl	8000558 <Check_InterThreadCom_F>
 8000c7e:	4603      	mov	r3, r0
	  status = Check_InterThreadCom_F(BLUE2GREEN_ID)
 8000c80:	4423      	add	r3, r4
 8000c82:	72fb      	strb	r3, [r7, #11]
	  switch(status)
 8000c84:	7afb      	ldrb	r3, [r7, #11]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d00a      	beq.n	8000ca0 <Start_BLUE_LED+0x44>
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d005      	beq.n	8000c9a <Start_BLUE_LED+0x3e>
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d000      	beq.n	8000c94 <Start_BLUE_LED+0x38>
	  {
	  case SET_F: freqCnt_u = freqCnt_2; break;
	  case RESET_F: break;
	  case DRESET_F: freqCnt_u = freqCnt_1; break;
	  default:
		  continue;
 8000c92:	e00f      	b.n	8000cb4 <Start_BLUE_LED+0x58>
	  case SET_F: freqCnt_u = freqCnt_2; break;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	e003      	b.n	8000ca2 <Start_BLUE_LED+0x46>
	  case DRESET_F: freqCnt_u = freqCnt_1; break;
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	e000      	b.n	8000ca2 <Start_BLUE_LED+0x46>
	  case RESET_F: break;
 8000ca0:	bf00      	nop
	  }
	  HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8000ca2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ca6:	4804      	ldr	r0, [pc, #16]	; (8000cb8 <Start_BLUE_LED+0x5c>)
 8000ca8:	f000 fd27 	bl	80016fa <HAL_GPIO_TogglePin>
	  osDelay(freqCnt_u);
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f002 fbe5 	bl	800347e <osDelay>
	  status = Check_InterThreadCom_F(BLUE2GREEN_ID)
 8000cb4:	e7db      	b.n	8000c6e <Start_BLUE_LED+0x12>
 8000cb6:	bf00      	nop
 8000cb8:	40020c00 	.word	0x40020c00

08000cbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d101      	bne.n	8000cd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cce:	f000 fa77 	bl	80011c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40010000 	.word	0x40010000

08000ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
	...

08000cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <HAL_MspInit+0x54>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	4a11      	ldr	r2, [pc, #68]	; (8000d44 <HAL_MspInit+0x54>)
 8000d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d04:	6453      	str	r3, [r2, #68]	; 0x44
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <HAL_MspInit+0x54>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <HAL_MspInit+0x54>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <HAL_MspInit+0x54>)
 8000d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d20:	6413      	str	r3, [r2, #64]	; 0x40
 8000d22:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <HAL_MspInit+0x54>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	210f      	movs	r1, #15
 8000d32:	f06f 0001 	mvn.w	r0, #1
 8000d36:	f000 fb1b 	bl	8001370 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023800 	.word	0x40023800

08000d48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	; 0x28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a19      	ldr	r2, [pc, #100]	; (8000dcc <HAL_I2C_MspInit+0x84>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d12c      	bne.n	8000dc4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_I2C_MspInit+0x88>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a17      	ldr	r2, [pc, #92]	; (8000dd0 <HAL_I2C_MspInit+0x88>)
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <HAL_I2C_MspInit+0x88>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d86:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d8c:	2312      	movs	r3, #18
 8000d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d90:	2301      	movs	r3, #1
 8000d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d98:	2304      	movs	r3, #4
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4619      	mov	r1, r3
 8000da2:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <HAL_I2C_MspInit+0x8c>)
 8000da4:	f000 fb0e 	bl	80013c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000da8:	2300      	movs	r3, #0
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <HAL_I2C_MspInit+0x88>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db0:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <HAL_I2C_MspInit+0x88>)
 8000db2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000db6:	6413      	str	r3, [r2, #64]	; 0x40
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <HAL_I2C_MspInit+0x88>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dc4:	bf00      	nop
 8000dc6:	3728      	adds	r7, #40	; 0x28
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40005400 	.word	0x40005400
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020400 	.word	0x40020400

08000dd8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08e      	sub	sp, #56	; 0x38
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a59      	ldr	r2, [pc, #356]	; (8000f5c <HAL_I2S_MspInit+0x184>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d15b      	bne.n	8000eb2 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
 8000dfe:	4b58      	ldr	r3, [pc, #352]	; (8000f60 <HAL_I2S_MspInit+0x188>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	4a57      	ldr	r2, [pc, #348]	; (8000f60 <HAL_I2S_MspInit+0x188>)
 8000e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e08:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0a:	4b55      	ldr	r3, [pc, #340]	; (8000f60 <HAL_I2S_MspInit+0x188>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e12:	623b      	str	r3, [r7, #32]
 8000e14:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
 8000e1a:	4b51      	ldr	r3, [pc, #324]	; (8000f60 <HAL_I2S_MspInit+0x188>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a50      	ldr	r2, [pc, #320]	; (8000f60 <HAL_I2S_MspInit+0x188>)
 8000e20:	f043 0304 	orr.w	r3, r3, #4
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b4e      	ldr	r3, [pc, #312]	; (8000f60 <HAL_I2S_MspInit+0x188>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0304 	and.w	r3, r3, #4
 8000e2e:	61fb      	str	r3, [r7, #28]
 8000e30:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
 8000e36:	4b4a      	ldr	r3, [pc, #296]	; (8000f60 <HAL_I2S_MspInit+0x188>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a49      	ldr	r2, [pc, #292]	; (8000f60 <HAL_I2S_MspInit+0x188>)
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b47      	ldr	r3, [pc, #284]	; (8000f60 <HAL_I2S_MspInit+0x188>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	61bb      	str	r3, [r7, #24]
 8000e4c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e4e:	2304      	movs	r3, #4
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000e5e:	2306      	movs	r3, #6
 8000e60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e66:	4619      	mov	r1, r3
 8000e68:	483e      	ldr	r0, [pc, #248]	; (8000f64 <HAL_I2S_MspInit+0x18c>)
 8000e6a:	f000 faab 	bl	80013c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000e6e:	2308      	movs	r3, #8
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e7e:	2305      	movs	r3, #5
 8000e80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e86:	4619      	mov	r1, r3
 8000e88:	4836      	ldr	r0, [pc, #216]	; (8000f64 <HAL_I2S_MspInit+0x18c>)
 8000e8a:	f000 fa9b 	bl	80013c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000e8e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ea0:	2305      	movs	r3, #5
 8000ea2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	482f      	ldr	r0, [pc, #188]	; (8000f68 <HAL_I2S_MspInit+0x190>)
 8000eac:	f000 fa8a 	bl	80013c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000eb0:	e04f      	b.n	8000f52 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a2d      	ldr	r2, [pc, #180]	; (8000f6c <HAL_I2S_MspInit+0x194>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d14a      	bne.n	8000f52 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	4b27      	ldr	r3, [pc, #156]	; (8000f60 <HAL_I2S_MspInit+0x188>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	4a26      	ldr	r2, [pc, #152]	; (8000f60 <HAL_I2S_MspInit+0x188>)
 8000ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eca:	6413      	str	r3, [r2, #64]	; 0x40
 8000ecc:	4b24      	ldr	r3, [pc, #144]	; (8000f60 <HAL_I2S_MspInit+0x188>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed8:	2300      	movs	r3, #0
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <HAL_I2S_MspInit+0x188>)
 8000ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee0:	4a1f      	ldr	r2, [pc, #124]	; (8000f60 <HAL_I2S_MspInit+0x188>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee8:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <HAL_I2S_MspInit+0x188>)
 8000eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <HAL_I2S_MspInit+0x188>)
 8000efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efc:	4a18      	ldr	r2, [pc, #96]	; (8000f60 <HAL_I2S_MspInit+0x188>)
 8000efe:	f043 0304 	orr.w	r3, r3, #4
 8000f02:	6313      	str	r3, [r2, #48]	; 0x30
 8000f04:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <HAL_I2S_MspInit+0x188>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f08:	f003 0304 	and.w	r3, r3, #4
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f10:	2310      	movs	r3, #16
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f20:	2306      	movs	r3, #6
 8000f22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4811      	ldr	r0, [pc, #68]	; (8000f70 <HAL_I2S_MspInit+0x198>)
 8000f2c:	f000 fa4a 	bl	80013c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f30:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f42:	2306      	movs	r3, #6
 8000f44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4805      	ldr	r0, [pc, #20]	; (8000f64 <HAL_I2S_MspInit+0x18c>)
 8000f4e:	f000 fa39 	bl	80013c4 <HAL_GPIO_Init>
}
 8000f52:	bf00      	nop
 8000f54:	3738      	adds	r7, #56	; 0x38
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40003800 	.word	0x40003800
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020800 	.word	0x40020800
 8000f68:	40020400 	.word	0x40020400
 8000f6c:	40003c00 	.word	0x40003c00
 8000f70:	40020000 	.word	0x40020000

08000f74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a19      	ldr	r2, [pc, #100]	; (8000ff8 <HAL_SPI_MspInit+0x84>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d12b      	bne.n	8000fee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <HAL_SPI_MspInit+0x88>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	4a17      	ldr	r2, [pc, #92]	; (8000ffc <HAL_SPI_MspInit+0x88>)
 8000fa0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <HAL_SPI_MspInit+0x88>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <HAL_SPI_MspInit+0x88>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a10      	ldr	r2, [pc, #64]	; (8000ffc <HAL_SPI_MspInit+0x88>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <HAL_SPI_MspInit+0x88>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000fce:	23e0      	movs	r3, #224	; 0xe0
 8000fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fde:	2305      	movs	r3, #5
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <HAL_SPI_MspInit+0x8c>)
 8000fea:	f000 f9eb 	bl	80013c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fee:	bf00      	nop
 8000ff0:	3728      	adds	r7, #40	; 0x28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40013000 	.word	0x40013000
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020000 	.word	0x40020000

08001004 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08c      	sub	sp, #48	; 0x30
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	2019      	movs	r0, #25
 800101a:	f000 f9a9 	bl	8001370 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800101e:	2019      	movs	r0, #25
 8001020:	f000 f9c2 	bl	80013a8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <HAL_InitTick+0xa0>)
 800102a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102c:	4a1d      	ldr	r2, [pc, #116]	; (80010a4 <HAL_InitTick+0xa0>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	6453      	str	r3, [r2, #68]	; 0x44
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <HAL_InitTick+0xa0>)
 8001036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001040:	f107 0210 	add.w	r2, r7, #16
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	4611      	mov	r1, r2
 800104a:	4618      	mov	r0, r3
 800104c:	f001 fdaa 	bl	8002ba4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001050:	f001 fd94 	bl	8002b7c <HAL_RCC_GetPCLK2Freq>
 8001054:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001058:	4a13      	ldr	r2, [pc, #76]	; (80010a8 <HAL_InitTick+0xa4>)
 800105a:	fba2 2303 	umull	r2, r3, r2, r3
 800105e:	0c9b      	lsrs	r3, r3, #18
 8001060:	3b01      	subs	r3, #1
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <HAL_InitTick+0xa8>)
 8001066:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <HAL_InitTick+0xac>)
 8001068:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <HAL_InitTick+0xa8>)
 800106c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001070:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001072:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <HAL_InitTick+0xa8>)
 8001074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001076:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <HAL_InitTick+0xa8>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <HAL_InitTick+0xa8>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001084:	4809      	ldr	r0, [pc, #36]	; (80010ac <HAL_InitTick+0xa8>)
 8001086:	f001 ff71 	bl	8002f6c <HAL_TIM_Base_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d104      	bne.n	800109a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001090:	4806      	ldr	r0, [pc, #24]	; (80010ac <HAL_InitTick+0xa8>)
 8001092:	f001 ffa0 	bl	8002fd6 <HAL_TIM_Base_Start_IT>
 8001096:	4603      	mov	r3, r0
 8001098:	e000      	b.n	800109c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	3730      	adds	r7, #48	; 0x30
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40023800 	.word	0x40023800
 80010a8:	431bde83 	.word	0x431bde83
 80010ac:	20004118 	.word	0x20004118
 80010b0:	40010000 	.word	0x40010000

080010b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <HardFault_Handler+0x4>

080010c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <MemManage_Handler+0x4>

080010ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <BusFault_Handler+0x4>

080010d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <UsageFault_Handler+0x4>

080010da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80010ee:	f001 ff96 	bl	800301e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20004118 	.word	0x20004118

080010fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <SystemInit+0x28>)
 8001102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001106:	4a07      	ldr	r2, [pc, #28]	; (8001124 <SystemInit+0x28>)
 8001108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800110c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <SystemInit+0x28>)
 8001112:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001116:	609a      	str	r2, [r3, #8]
#endif
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001128:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001160 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800112c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800112e:	e003      	b.n	8001138 <LoopCopyDataInit>

08001130 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001132:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001134:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001136:	3104      	adds	r1, #4

08001138 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001138:	480b      	ldr	r0, [pc, #44]	; (8001168 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800113c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800113e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001140:	d3f6      	bcc.n	8001130 <CopyDataInit>
  ldr  r2, =_sbss
 8001142:	4a0b      	ldr	r2, [pc, #44]	; (8001170 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001144:	e002      	b.n	800114c <LoopFillZerobss>

08001146 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001146:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001148:	f842 3b04 	str.w	r3, [r2], #4

0800114c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800114e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001150:	d3f9      	bcc.n	8001146 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001152:	f7ff ffd3 	bl	80010fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001156:	f003 fb4b 	bl	80047f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115a:	f7ff fa33 	bl	80005c4 <main>
  bx  lr    
 800115e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001160:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001164:	08004904 	.word	0x08004904
  ldr  r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800116c:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8001170:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8001174:	2000415c 	.word	0x2000415c

08001178 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001178:	e7fe      	b.n	8001178 <ADC_IRQHandler>
	...

0800117c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <HAL_Init+0x40>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a0d      	ldr	r2, [pc, #52]	; (80011bc <HAL_Init+0x40>)
 8001186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800118a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800118c:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <HAL_Init+0x40>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <HAL_Init+0x40>)
 8001192:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001196:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <HAL_Init+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a07      	ldr	r2, [pc, #28]	; (80011bc <HAL_Init+0x40>)
 800119e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a4:	2003      	movs	r0, #3
 80011a6:	f000 f8d8 	bl	800135a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011aa:	2000      	movs	r0, #0
 80011ac:	f7ff ff2a 	bl	8001004 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b0:	f7ff fd9e 	bl	8000cf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40023c00 	.word	0x40023c00

080011c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_IncTick+0x20>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_IncTick+0x24>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <HAL_IncTick+0x24>)
 80011d2:	6013      	str	r3, [r2, #0]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	2000000c 	.word	0x2000000c
 80011e4:	20004158 	.word	0x20004158

080011e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return uwTick;
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <HAL_GetTick+0x14>)
 80011ee:	681b      	ldr	r3, [r3, #0]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20004158 	.word	0x20004158

08001200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800121c:	4013      	ands	r3, r2
 800121e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800122c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001232:	4a04      	ldr	r2, [pc, #16]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	60d3      	str	r3, [r2, #12]
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <__NVIC_GetPriorityGrouping+0x18>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	f003 0307 	and.w	r3, r3, #7
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	2b00      	cmp	r3, #0
 8001274:	db0b      	blt.n	800128e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	f003 021f 	and.w	r2, r3, #31
 800127c:	4907      	ldr	r1, [pc, #28]	; (800129c <__NVIC_EnableIRQ+0x38>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	095b      	lsrs	r3, r3, #5
 8001284:	2001      	movs	r0, #1
 8001286:	fa00 f202 	lsl.w	r2, r0, r2
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000e100 	.word	0xe000e100

080012a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	db0a      	blt.n	80012ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	490c      	ldr	r1, [pc, #48]	; (80012ec <__NVIC_SetPriority+0x4c>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	0112      	lsls	r2, r2, #4
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	440b      	add	r3, r1
 80012c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c8:	e00a      	b.n	80012e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4908      	ldr	r1, [pc, #32]	; (80012f0 <__NVIC_SetPriority+0x50>)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	3b04      	subs	r3, #4
 80012d8:	0112      	lsls	r2, r2, #4
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	440b      	add	r3, r1
 80012de:	761a      	strb	r2, [r3, #24]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000e100 	.word	0xe000e100
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	; 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f1c3 0307 	rsb	r3, r3, #7
 800130e:	2b04      	cmp	r3, #4
 8001310:	bf28      	it	cs
 8001312:	2304      	movcs	r3, #4
 8001314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3304      	adds	r3, #4
 800131a:	2b06      	cmp	r3, #6
 800131c:	d902      	bls.n	8001324 <NVIC_EncodePriority+0x30>
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3b03      	subs	r3, #3
 8001322:	e000      	b.n	8001326 <NVIC_EncodePriority+0x32>
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	f04f 32ff 	mov.w	r2, #4294967295
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43da      	mvns	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	401a      	ands	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800133c:	f04f 31ff 	mov.w	r1, #4294967295
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	43d9      	mvns	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	4313      	orrs	r3, r2
         );
}
 800134e:	4618      	mov	r0, r3
 8001350:	3724      	adds	r7, #36	; 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ff4c 	bl	8001200 <__NVIC_SetPriorityGrouping>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001382:	f7ff ff61 	bl	8001248 <__NVIC_GetPriorityGrouping>
 8001386:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	68b9      	ldr	r1, [r7, #8]
 800138c:	6978      	ldr	r0, [r7, #20]
 800138e:	f7ff ffb1 	bl	80012f4 <NVIC_EncodePriority>
 8001392:	4602      	mov	r2, r0
 8001394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001398:	4611      	mov	r1, r2
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ff80 	bl	80012a0 <__NVIC_SetPriority>
}
 80013a0:	bf00      	nop
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ff54 	bl	8001264 <__NVIC_EnableIRQ>
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
 80013de:	e159      	b.n	8001694 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013e0:	2201      	movs	r2, #1
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	f040 8148 	bne.w	800168e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d00b      	beq.n	800141e <HAL_GPIO_Init+0x5a>
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b02      	cmp	r3, #2
 800140c:	d007      	beq.n	800141e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001412:	2b11      	cmp	r3, #17
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b12      	cmp	r3, #18
 800141c:	d130      	bne.n	8001480 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	2203      	movs	r2, #3
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	68da      	ldr	r2, [r3, #12]
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001454:	2201      	movs	r2, #1
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	091b      	lsrs	r3, r3, #4
 800146a:	f003 0201 	and.w	r2, r3, #1
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	2203      	movs	r2, #3
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d003      	beq.n	80014c0 <HAL_GPIO_Init+0xfc>
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b12      	cmp	r3, #18
 80014be:	d123      	bne.n	8001508 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	08da      	lsrs	r2, r3, #3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3208      	adds	r2, #8
 80014c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	f003 0307 	and.w	r3, r3, #7
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	220f      	movs	r2, #15
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	691a      	ldr	r2, [r3, #16]
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	08da      	lsrs	r2, r3, #3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3208      	adds	r2, #8
 8001502:	69b9      	ldr	r1, [r7, #24]
 8001504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	2203      	movs	r2, #3
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 0203 	and.w	r2, r3, #3
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001544:	2b00      	cmp	r3, #0
 8001546:	f000 80a2 	beq.w	800168e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b56      	ldr	r3, [pc, #344]	; (80016a8 <HAL_GPIO_Init+0x2e4>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	4a55      	ldr	r2, [pc, #340]	; (80016a8 <HAL_GPIO_Init+0x2e4>)
 8001554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001558:	6453      	str	r3, [r2, #68]	; 0x44
 800155a:	4b53      	ldr	r3, [pc, #332]	; (80016a8 <HAL_GPIO_Init+0x2e4>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001566:	4a51      	ldr	r2, [pc, #324]	; (80016ac <HAL_GPIO_Init+0x2e8>)
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	089b      	lsrs	r3, r3, #2
 800156c:	3302      	adds	r3, #2
 800156e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001572:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f003 0303 	and.w	r3, r3, #3
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	220f      	movs	r2, #15
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4013      	ands	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a48      	ldr	r2, [pc, #288]	; (80016b0 <HAL_GPIO_Init+0x2ec>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d019      	beq.n	80015c6 <HAL_GPIO_Init+0x202>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a47      	ldr	r2, [pc, #284]	; (80016b4 <HAL_GPIO_Init+0x2f0>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d013      	beq.n	80015c2 <HAL_GPIO_Init+0x1fe>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a46      	ldr	r2, [pc, #280]	; (80016b8 <HAL_GPIO_Init+0x2f4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d00d      	beq.n	80015be <HAL_GPIO_Init+0x1fa>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a45      	ldr	r2, [pc, #276]	; (80016bc <HAL_GPIO_Init+0x2f8>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d007      	beq.n	80015ba <HAL_GPIO_Init+0x1f6>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a44      	ldr	r2, [pc, #272]	; (80016c0 <HAL_GPIO_Init+0x2fc>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d101      	bne.n	80015b6 <HAL_GPIO_Init+0x1f2>
 80015b2:	2304      	movs	r3, #4
 80015b4:	e008      	b.n	80015c8 <HAL_GPIO_Init+0x204>
 80015b6:	2307      	movs	r3, #7
 80015b8:	e006      	b.n	80015c8 <HAL_GPIO_Init+0x204>
 80015ba:	2303      	movs	r3, #3
 80015bc:	e004      	b.n	80015c8 <HAL_GPIO_Init+0x204>
 80015be:	2302      	movs	r3, #2
 80015c0:	e002      	b.n	80015c8 <HAL_GPIO_Init+0x204>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <HAL_GPIO_Init+0x204>
 80015c6:	2300      	movs	r3, #0
 80015c8:	69fa      	ldr	r2, [r7, #28]
 80015ca:	f002 0203 	and.w	r2, r2, #3
 80015ce:	0092      	lsls	r2, r2, #2
 80015d0:	4093      	lsls	r3, r2
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015d8:	4934      	ldr	r1, [pc, #208]	; (80016ac <HAL_GPIO_Init+0x2e8>)
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	3302      	adds	r3, #2
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015e6:	4b37      	ldr	r3, [pc, #220]	; (80016c4 <HAL_GPIO_Init+0x300>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800160a:	4a2e      	ldr	r2, [pc, #184]	; (80016c4 <HAL_GPIO_Init+0x300>)
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001610:	4b2c      	ldr	r3, [pc, #176]	; (80016c4 <HAL_GPIO_Init+0x300>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001634:	4a23      	ldr	r2, [pc, #140]	; (80016c4 <HAL_GPIO_Init+0x300>)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800163a:	4b22      	ldr	r3, [pc, #136]	; (80016c4 <HAL_GPIO_Init+0x300>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800165e:	4a19      	ldr	r2, [pc, #100]	; (80016c4 <HAL_GPIO_Init+0x300>)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001664:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <HAL_GPIO_Init+0x300>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001688:	4a0e      	ldr	r2, [pc, #56]	; (80016c4 <HAL_GPIO_Init+0x300>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3301      	adds	r3, #1
 8001692:	61fb      	str	r3, [r7, #28]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	2b0f      	cmp	r3, #15
 8001698:	f67f aea2 	bls.w	80013e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800169c:	bf00      	nop
 800169e:	3724      	adds	r7, #36	; 0x24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40013800 	.word	0x40013800
 80016b0:	40020000 	.word	0x40020000
 80016b4:	40020400 	.word	0x40020400
 80016b8:	40020800 	.word	0x40020800
 80016bc:	40020c00 	.word	0x40020c00
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40013c00 	.word	0x40013c00

080016c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	807b      	strh	r3, [r7, #2]
 80016d4:	4613      	mov	r3, r2
 80016d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016d8:	787b      	ldrb	r3, [r7, #1]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016de:	887a      	ldrh	r2, [r7, #2]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016e4:	e003      	b.n	80016ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016e6:	887b      	ldrh	r3, [r7, #2]
 80016e8:	041a      	lsls	r2, r3, #16
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	619a      	str	r2, [r3, #24]
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	460b      	mov	r3, r1
 8001704:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695a      	ldr	r2, [r3, #20]
 800170a:	887b      	ldrh	r3, [r7, #2]
 800170c:	401a      	ands	r2, r3
 800170e:	887b      	ldrh	r3, [r7, #2]
 8001710:	429a      	cmp	r2, r3
 8001712:	d104      	bne.n	800171e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001714:	887b      	ldrh	r3, [r7, #2]
 8001716:	041a      	lsls	r2, r3, #16
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800171c:	e002      	b.n	8001724 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800171e:	887a      	ldrh	r2, [r7, #2]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	619a      	str	r2, [r3, #24]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e11f      	b.n	8001982 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d106      	bne.n	800175c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff faf6 	bl	8000d48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2224      	movs	r2, #36	; 0x24
 8001760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 0201 	bic.w	r2, r2, #1
 8001772:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001782:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001792:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001794:	f001 f9de 	bl	8002b54 <HAL_RCC_GetPCLK1Freq>
 8001798:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	4a7b      	ldr	r2, [pc, #492]	; (800198c <HAL_I2C_Init+0x25c>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d807      	bhi.n	80017b4 <HAL_I2C_Init+0x84>
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4a7a      	ldr	r2, [pc, #488]	; (8001990 <HAL_I2C_Init+0x260>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	bf94      	ite	ls
 80017ac:	2301      	movls	r3, #1
 80017ae:	2300      	movhi	r3, #0
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	e006      	b.n	80017c2 <HAL_I2C_Init+0x92>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4a77      	ldr	r2, [pc, #476]	; (8001994 <HAL_I2C_Init+0x264>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	bf94      	ite	ls
 80017bc:	2301      	movls	r3, #1
 80017be:	2300      	movhi	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e0db      	b.n	8001982 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	4a72      	ldr	r2, [pc, #456]	; (8001998 <HAL_I2C_Init+0x268>)
 80017ce:	fba2 2303 	umull	r2, r3, r2, r3
 80017d2:	0c9b      	lsrs	r3, r3, #18
 80017d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	4a64      	ldr	r2, [pc, #400]	; (800198c <HAL_I2C_Init+0x25c>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d802      	bhi.n	8001804 <HAL_I2C_Init+0xd4>
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	3301      	adds	r3, #1
 8001802:	e009      	b.n	8001818 <HAL_I2C_Init+0xe8>
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800180a:	fb02 f303 	mul.w	r3, r2, r3
 800180e:	4a63      	ldr	r2, [pc, #396]	; (800199c <HAL_I2C_Init+0x26c>)
 8001810:	fba2 2303 	umull	r2, r3, r2, r3
 8001814:	099b      	lsrs	r3, r3, #6
 8001816:	3301      	adds	r3, #1
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6812      	ldr	r2, [r2, #0]
 800181c:	430b      	orrs	r3, r1
 800181e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800182a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	4956      	ldr	r1, [pc, #344]	; (800198c <HAL_I2C_Init+0x25c>)
 8001834:	428b      	cmp	r3, r1
 8001836:	d80d      	bhi.n	8001854 <HAL_I2C_Init+0x124>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	1e59      	subs	r1, r3, #1
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	fbb1 f3f3 	udiv	r3, r1, r3
 8001846:	3301      	adds	r3, #1
 8001848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800184c:	2b04      	cmp	r3, #4
 800184e:	bf38      	it	cc
 8001850:	2304      	movcc	r3, #4
 8001852:	e04f      	b.n	80018f4 <HAL_I2C_Init+0x1c4>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d111      	bne.n	8001880 <HAL_I2C_Init+0x150>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	1e58      	subs	r0, r3, #1
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6859      	ldr	r1, [r3, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	440b      	add	r3, r1
 800186a:	fbb0 f3f3 	udiv	r3, r0, r3
 800186e:	3301      	adds	r3, #1
 8001870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001874:	2b00      	cmp	r3, #0
 8001876:	bf0c      	ite	eq
 8001878:	2301      	moveq	r3, #1
 800187a:	2300      	movne	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	e012      	b.n	80018a6 <HAL_I2C_Init+0x176>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	1e58      	subs	r0, r3, #1
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6859      	ldr	r1, [r3, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	0099      	lsls	r1, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	fbb0 f3f3 	udiv	r3, r0, r3
 8001896:	3301      	adds	r3, #1
 8001898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800189c:	2b00      	cmp	r3, #0
 800189e:	bf0c      	ite	eq
 80018a0:	2301      	moveq	r3, #1
 80018a2:	2300      	movne	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_I2C_Init+0x17e>
 80018aa:	2301      	movs	r3, #1
 80018ac:	e022      	b.n	80018f4 <HAL_I2C_Init+0x1c4>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10e      	bne.n	80018d4 <HAL_I2C_Init+0x1a4>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	1e58      	subs	r0, r3, #1
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6859      	ldr	r1, [r3, #4]
 80018be:	460b      	mov	r3, r1
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	440b      	add	r3, r1
 80018c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80018c8:	3301      	adds	r3, #1
 80018ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018d2:	e00f      	b.n	80018f4 <HAL_I2C_Init+0x1c4>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	1e58      	subs	r0, r3, #1
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6859      	ldr	r1, [r3, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	440b      	add	r3, r1
 80018e2:	0099      	lsls	r1, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ea:	3301      	adds	r3, #1
 80018ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	6809      	ldr	r1, [r1, #0]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69da      	ldr	r2, [r3, #28]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001922:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6911      	ldr	r1, [r2, #16]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	68d2      	ldr	r2, [r2, #12]
 800192e:	4311      	orrs	r1, r2
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	430b      	orrs	r3, r1
 8001936:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	695a      	ldr	r2, [r3, #20]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 0201 	orr.w	r2, r2, #1
 8001962:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2220      	movs	r2, #32
 800196e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	000186a0 	.word	0x000186a0
 8001990:	001e847f 	.word	0x001e847f
 8001994:	003d08ff 	.word	0x003d08ff
 8001998:	431bde83 	.word	0x431bde83
 800199c:	10624dd3 	.word	0x10624dd3

080019a0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e128      	b.n	8001c04 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d109      	bne.n	80019d2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a90      	ldr	r2, [pc, #576]	; (8001c0c <HAL_I2S_Init+0x26c>)
 80019ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff fa03 	bl	8000dd8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2202      	movs	r2, #2
 80019d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80019e8:	f023 030f 	bic.w	r3, r3, #15
 80019ec:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2202      	movs	r2, #2
 80019f4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d060      	beq.n	8001ac0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d102      	bne.n	8001a0c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001a06:	2310      	movs	r3, #16
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	e001      	b.n	8001a10 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001a0c:	2320      	movs	r3, #32
 8001a0e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2b20      	cmp	r3, #32
 8001a16:	d802      	bhi.n	8001a1e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f001 f9e2 	bl	8002de8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001a24:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a2e:	d125      	bne.n	8001a7c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d010      	beq.n	8001a5a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a54:	3305      	adds	r3, #5
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	e01f      	b.n	8001a9a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a76:	3305      	adds	r3, #5
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	e00e      	b.n	8001a9a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a96:	3305      	adds	r3, #5
 8001a98:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4a5c      	ldr	r2, [pc, #368]	; (8001c10 <HAL_I2S_Init+0x270>)
 8001a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa2:	08db      	lsrs	r3, r3, #3
 8001aa4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	085b      	lsrs	r3, r3, #1
 8001ab6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	021b      	lsls	r3, r3, #8
 8001abc:	61bb      	str	r3, [r7, #24]
 8001abe:	e003      	b.n	8001ac8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d902      	bls.n	8001ad4 <HAL_I2S_Init+0x134>
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	2bff      	cmp	r3, #255	; 0xff
 8001ad2:	d907      	bls.n	8001ae4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad8:	f043 0210 	orr.w	r2, r3, #16
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e08f      	b.n	8001c04 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	691a      	ldr	r2, [r3, #16]
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	ea42 0103 	orr.w	r1, r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	69fa      	ldr	r2, [r7, #28]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001b02:	f023 030f 	bic.w	r3, r3, #15
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6851      	ldr	r1, [r2, #4]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6892      	ldr	r2, [r2, #8]
 8001b0e:	4311      	orrs	r1, r2
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	68d2      	ldr	r2, [r2, #12]
 8001b14:	4311      	orrs	r1, r2
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6992      	ldr	r2, [r2, #24]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b26:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d161      	bne.n	8001bf4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a38      	ldr	r2, [pc, #224]	; (8001c14 <HAL_I2S_Init+0x274>)
 8001b34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a37      	ldr	r2, [pc, #220]	; (8001c18 <HAL_I2S_Init+0x278>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d101      	bne.n	8001b44 <HAL_I2S_Init+0x1a4>
 8001b40:	4b36      	ldr	r3, [pc, #216]	; (8001c1c <HAL_I2S_Init+0x27c>)
 8001b42:	e001      	b.n	8001b48 <HAL_I2S_Init+0x1a8>
 8001b44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6812      	ldr	r2, [r2, #0]
 8001b4e:	4932      	ldr	r1, [pc, #200]	; (8001c18 <HAL_I2S_Init+0x278>)
 8001b50:	428a      	cmp	r2, r1
 8001b52:	d101      	bne.n	8001b58 <HAL_I2S_Init+0x1b8>
 8001b54:	4a31      	ldr	r2, [pc, #196]	; (8001c1c <HAL_I2S_Init+0x27c>)
 8001b56:	e001      	b.n	8001b5c <HAL_I2S_Init+0x1bc>
 8001b58:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001b5c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001b60:	f023 030f 	bic.w	r3, r3, #15
 8001b64:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a2b      	ldr	r2, [pc, #172]	; (8001c18 <HAL_I2S_Init+0x278>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d101      	bne.n	8001b74 <HAL_I2S_Init+0x1d4>
 8001b70:	4b2a      	ldr	r3, [pc, #168]	; (8001c1c <HAL_I2S_Init+0x27c>)
 8001b72:	e001      	b.n	8001b78 <HAL_I2S_Init+0x1d8>
 8001b74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b78:	2202      	movs	r2, #2
 8001b7a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a25      	ldr	r2, [pc, #148]	; (8001c18 <HAL_I2S_Init+0x278>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d101      	bne.n	8001b8a <HAL_I2S_Init+0x1ea>
 8001b86:	4b25      	ldr	r3, [pc, #148]	; (8001c1c <HAL_I2S_Init+0x27c>)
 8001b88:	e001      	b.n	8001b8e <HAL_I2S_Init+0x1ee>
 8001b8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b8e:	69db      	ldr	r3, [r3, #28]
 8001b90:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b9a:	d003      	beq.n	8001ba4 <HAL_I2S_Init+0x204>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d103      	bne.n	8001bac <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001ba4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	e001      	b.n	8001bb0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001bac:	2300      	movs	r3, #0
 8001bae:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	b299      	uxth	r1, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001bc6:	4303      	orrs	r3, r0
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	430b      	orrs	r3, r1
 8001bcc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	897b      	ldrh	r3, [r7, #10]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bdc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a0d      	ldr	r2, [pc, #52]	; (8001c18 <HAL_I2S_Init+0x278>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d101      	bne.n	8001bec <HAL_I2S_Init+0x24c>
 8001be8:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <HAL_I2S_Init+0x27c>)
 8001bea:	e001      	b.n	8001bf0 <HAL_I2S_Init+0x250>
 8001bec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bf0:	897a      	ldrh	r2, [r7, #10]
 8001bf2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3720      	adds	r7, #32
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	08001d17 	.word	0x08001d17
 8001c10:	cccccccd 	.word	0xcccccccd
 8001c14:	08001e2d 	.word	0x08001e2d
 8001c18:	40003800 	.word	0x40003800
 8001c1c:	40003400 	.word	0x40003400

08001c20 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	881a      	ldrh	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	1c9a      	adds	r2, r3, #2
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	3b01      	subs	r3, #1
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10e      	bne.n	8001cb0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ca0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff ffb8 	bl	8001c20 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cca:	b292      	uxth	r2, r2
 8001ccc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd2:	1c9a      	adds	r2, r3, #2
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10e      	bne.n	8001d0e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cfe:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff ff93 	bl	8001c34 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b086      	sub	sp, #24
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d13a      	bne.n	8001da8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d109      	bne.n	8001d50 <I2S_IRQHandler+0x3a>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d46:	2b40      	cmp	r3, #64	; 0x40
 8001d48:	d102      	bne.n	8001d50 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff ffb4 	bl	8001cb8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d56:	2b40      	cmp	r3, #64	; 0x40
 8001d58:	d126      	bne.n	8001da8 <I2S_IRQHandler+0x92>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0320 	and.w	r3, r3, #32
 8001d64:	2b20      	cmp	r3, #32
 8001d66:	d11f      	bne.n	8001da8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d76:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001d78:	2300      	movs	r3, #0
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	f043 0202 	orr.w	r2, r3, #2
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ff50 	bl	8001c48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	d136      	bne.n	8001e22 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d109      	bne.n	8001dd2 <I2S_IRQHandler+0xbc>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc8:	2b80      	cmp	r3, #128	; 0x80
 8001dca:	d102      	bne.n	8001dd2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff ff45 	bl	8001c5c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d122      	bne.n	8001e22 <I2S_IRQHandler+0x10c>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	2b20      	cmp	r3, #32
 8001de8:	d11b      	bne.n	8001e22 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001df8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e14:	f043 0204 	orr.w	r2, r3, #4
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff ff13 	bl	8001c48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4aa2      	ldr	r2, [pc, #648]	; (80020cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d101      	bne.n	8001e4a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001e46:	4ba2      	ldr	r3, [pc, #648]	; (80020d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001e48:	e001      	b.n	8001e4e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001e4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a9b      	ldr	r2, [pc, #620]	; (80020cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d101      	bne.n	8001e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001e64:	4b9a      	ldr	r3, [pc, #616]	; (80020d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001e66:	e001      	b.n	8001e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001e68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e78:	d004      	beq.n	8001e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f040 8099 	bne.w	8001fb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d107      	bne.n	8001e9e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d002      	beq.n	8001e9e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f925 	bl	80020e8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d107      	bne.n	8001eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f9c8 	bl	8002248 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ebe:	2b40      	cmp	r3, #64	; 0x40
 8001ec0:	d13a      	bne.n	8001f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	f003 0320 	and.w	r3, r3, #32
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d035      	beq.n	8001f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a7e      	ldr	r2, [pc, #504]	; (80020cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d101      	bne.n	8001eda <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001ed6:	4b7e      	ldr	r3, [pc, #504]	; (80020d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ed8:	e001      	b.n	8001ede <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001eda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4979      	ldr	r1, [pc, #484]	; (80020cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001ee6:	428b      	cmp	r3, r1
 8001ee8:	d101      	bne.n	8001eee <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001eea:	4b79      	ldr	r3, [pc, #484]	; (80020d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001eec:	e001      	b.n	8001ef2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001eee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ef2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ef6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f06:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	f043 0202 	orr.w	r2, r3, #2
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff fe88 	bl	8001c48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	f040 80be 	bne.w	80020c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f003 0320 	and.w	r3, r3, #32
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 80b8 	beq.w	80020c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f5e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a59      	ldr	r2, [pc, #356]	; (80020cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d101      	bne.n	8001f6e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001f6a:	4b59      	ldr	r3, [pc, #356]	; (80020d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001f6c:	e001      	b.n	8001f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001f6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4954      	ldr	r1, [pc, #336]	; (80020cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001f7a:	428b      	cmp	r3, r1
 8001f7c:	d101      	bne.n	8001f82 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001f7e:	4b54      	ldr	r3, [pc, #336]	; (80020d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001f80:	e001      	b.n	8001f86 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001f82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f8a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	f043 0204 	orr.w	r2, r3, #4
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff fe4a 	bl	8001c48 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001fb4:	e084      	b.n	80020c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d107      	bne.n	8001fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d002      	beq.n	8001fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f8be 	bl	800214c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d107      	bne.n	8001fea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d002      	beq.n	8001fea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f8fd 	bl	80021e4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff0:	2b40      	cmp	r3, #64	; 0x40
 8001ff2:	d12f      	bne.n	8002054 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f003 0320 	and.w	r3, r3, #32
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d02a      	beq.n	8002054 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800200c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a2e      	ldr	r2, [pc, #184]	; (80020cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d101      	bne.n	800201c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002018:	4b2d      	ldr	r3, [pc, #180]	; (80020d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800201a:	e001      	b.n	8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800201c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4929      	ldr	r1, [pc, #164]	; (80020cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002028:	428b      	cmp	r3, r1
 800202a:	d101      	bne.n	8002030 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800202c:	4b28      	ldr	r3, [pc, #160]	; (80020d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800202e:	e001      	b.n	8002034 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002030:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002034:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002038:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	f043 0202 	orr.w	r2, r3, #2
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff fdfa 	bl	8001c48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b08      	cmp	r3, #8
 800205c:	d131      	bne.n	80020c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	f003 0320 	and.w	r3, r3, #32
 8002064:	2b00      	cmp	r3, #0
 8002066:	d02c      	beq.n	80020c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a17      	ldr	r2, [pc, #92]	; (80020cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d101      	bne.n	8002076 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002072:	4b17      	ldr	r3, [pc, #92]	; (80020d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002074:	e001      	b.n	800207a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002076:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4912      	ldr	r1, [pc, #72]	; (80020cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002082:	428b      	cmp	r3, r1
 8002084:	d101      	bne.n	800208a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002086:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002088:	e001      	b.n	800208e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800208a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800208e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002092:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020a2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b0:	f043 0204 	orr.w	r2, r3, #4
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff fdc5 	bl	8001c48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80020be:	e000      	b.n	80020c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80020c0:	bf00      	nop
}
 80020c2:	bf00      	nop
 80020c4:	3720      	adds	r7, #32
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40003800 	.word	0x40003800
 80020d0:	40003400 	.word	0x40003400

080020d4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	1c99      	adds	r1, r3, #2
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6251      	str	r1, [r2, #36]	; 0x24
 80020fa:	881a      	ldrh	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002106:	b29b      	uxth	r3, r3
 8002108:	3b01      	subs	r3, #1
 800210a:	b29a      	uxth	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002114:	b29b      	uxth	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d113      	bne.n	8002142 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002128:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800212e:	b29b      	uxth	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d106      	bne.n	8002142 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff ffc9 	bl	80020d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	1c99      	adds	r1, r3, #2
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6251      	str	r1, [r2, #36]	; 0x24
 800215e:	8819      	ldrh	r1, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a1d      	ldr	r2, [pc, #116]	; (80021dc <I2SEx_TxISR_I2SExt+0x90>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d101      	bne.n	800216e <I2SEx_TxISR_I2SExt+0x22>
 800216a:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <I2SEx_TxISR_I2SExt+0x94>)
 800216c:	e001      	b.n	8002172 <I2SEx_TxISR_I2SExt+0x26>
 800216e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002172:	460a      	mov	r2, r1
 8002174:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217a:	b29b      	uxth	r3, r3
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002188:	b29b      	uxth	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d121      	bne.n	80021d2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a12      	ldr	r2, [pc, #72]	; (80021dc <I2SEx_TxISR_I2SExt+0x90>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d101      	bne.n	800219c <I2SEx_TxISR_I2SExt+0x50>
 8002198:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <I2SEx_TxISR_I2SExt+0x94>)
 800219a:	e001      	b.n	80021a0 <I2SEx_TxISR_I2SExt+0x54>
 800219c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	490d      	ldr	r1, [pc, #52]	; (80021dc <I2SEx_TxISR_I2SExt+0x90>)
 80021a8:	428b      	cmp	r3, r1
 80021aa:	d101      	bne.n	80021b0 <I2SEx_TxISR_I2SExt+0x64>
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <I2SEx_TxISR_I2SExt+0x94>)
 80021ae:	e001      	b.n	80021b4 <I2SEx_TxISR_I2SExt+0x68>
 80021b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021b8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021be:	b29b      	uxth	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d106      	bne.n	80021d2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff ff81 	bl	80020d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40003800 	.word	0x40003800
 80021e0:	40003400 	.word	0x40003400

080021e4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68d8      	ldr	r0, [r3, #12]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f6:	1c99      	adds	r1, r3, #2
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	62d1      	str	r1, [r2, #44]	; 0x2c
 80021fc:	b282      	uxth	r2, r0
 80021fe:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002204:	b29b      	uxth	r3, r3
 8002206:	3b01      	subs	r3, #1
 8002208:	b29a      	uxth	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002212:	b29b      	uxth	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	d113      	bne.n	8002240 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002226:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222c:	b29b      	uxth	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d106      	bne.n	8002240 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff ff4a 	bl	80020d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a20      	ldr	r2, [pc, #128]	; (80022d8 <I2SEx_RxISR_I2SExt+0x90>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d101      	bne.n	800225e <I2SEx_RxISR_I2SExt+0x16>
 800225a:	4b20      	ldr	r3, [pc, #128]	; (80022dc <I2SEx_RxISR_I2SExt+0x94>)
 800225c:	e001      	b.n	8002262 <I2SEx_RxISR_I2SExt+0x1a>
 800225e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002262:	68d8      	ldr	r0, [r3, #12]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002268:	1c99      	adds	r1, r3, #2
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800226e:	b282      	uxth	r2, r0
 8002270:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002276:	b29b      	uxth	r3, r3
 8002278:	3b01      	subs	r3, #1
 800227a:	b29a      	uxth	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002284:	b29b      	uxth	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d121      	bne.n	80022ce <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a12      	ldr	r2, [pc, #72]	; (80022d8 <I2SEx_RxISR_I2SExt+0x90>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d101      	bne.n	8002298 <I2SEx_RxISR_I2SExt+0x50>
 8002294:	4b11      	ldr	r3, [pc, #68]	; (80022dc <I2SEx_RxISR_I2SExt+0x94>)
 8002296:	e001      	b.n	800229c <I2SEx_RxISR_I2SExt+0x54>
 8002298:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	490d      	ldr	r1, [pc, #52]	; (80022d8 <I2SEx_RxISR_I2SExt+0x90>)
 80022a4:	428b      	cmp	r3, r1
 80022a6:	d101      	bne.n	80022ac <I2SEx_RxISR_I2SExt+0x64>
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <I2SEx_RxISR_I2SExt+0x94>)
 80022aa:	e001      	b.n	80022b0 <I2SEx_RxISR_I2SExt+0x68>
 80022ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022b4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d106      	bne.n	80022ce <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff ff03 	bl	80020d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40003800 	.word	0x40003800
 80022dc:	40003400 	.word	0x40003400

080022e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e25b      	b.n	80027aa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d075      	beq.n	80023ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022fe:	4ba3      	ldr	r3, [pc, #652]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b04      	cmp	r3, #4
 8002308:	d00c      	beq.n	8002324 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800230a:	4ba0      	ldr	r3, [pc, #640]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002312:	2b08      	cmp	r3, #8
 8002314:	d112      	bne.n	800233c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002316:	4b9d      	ldr	r3, [pc, #628]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800231e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002322:	d10b      	bne.n	800233c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002324:	4b99      	ldr	r3, [pc, #612]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d05b      	beq.n	80023e8 <HAL_RCC_OscConfig+0x108>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d157      	bne.n	80023e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e236      	b.n	80027aa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002344:	d106      	bne.n	8002354 <HAL_RCC_OscConfig+0x74>
 8002346:	4b91      	ldr	r3, [pc, #580]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a90      	ldr	r2, [pc, #576]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 800234c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e01d      	b.n	8002390 <HAL_RCC_OscConfig+0xb0>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800235c:	d10c      	bne.n	8002378 <HAL_RCC_OscConfig+0x98>
 800235e:	4b8b      	ldr	r3, [pc, #556]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a8a      	ldr	r2, [pc, #552]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	4b88      	ldr	r3, [pc, #544]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a87      	ldr	r2, [pc, #540]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	e00b      	b.n	8002390 <HAL_RCC_OscConfig+0xb0>
 8002378:	4b84      	ldr	r3, [pc, #528]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a83      	ldr	r2, [pc, #524]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 800237e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	4b81      	ldr	r3, [pc, #516]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a80      	ldr	r2, [pc, #512]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 800238a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800238e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d013      	beq.n	80023c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7fe ff26 	bl	80011e8 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a0:	f7fe ff22 	bl	80011e8 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b64      	cmp	r3, #100	; 0x64
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e1fb      	b.n	80027aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b2:	4b76      	ldr	r3, [pc, #472]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0xc0>
 80023be:	e014      	b.n	80023ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c0:	f7fe ff12 	bl	80011e8 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023c8:	f7fe ff0e 	bl	80011e8 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b64      	cmp	r3, #100	; 0x64
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e1e7      	b.n	80027aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023da:	4b6c      	ldr	r3, [pc, #432]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0xe8>
 80023e6:	e000      	b.n	80023ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d063      	beq.n	80024be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023f6:	4b65      	ldr	r3, [pc, #404]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00b      	beq.n	800241a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002402:	4b62      	ldr	r3, [pc, #392]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800240a:	2b08      	cmp	r3, #8
 800240c:	d11c      	bne.n	8002448 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800240e:	4b5f      	ldr	r3, [pc, #380]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d116      	bne.n	8002448 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241a:	4b5c      	ldr	r3, [pc, #368]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d005      	beq.n	8002432 <HAL_RCC_OscConfig+0x152>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d001      	beq.n	8002432 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e1bb      	b.n	80027aa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002432:	4b56      	ldr	r3, [pc, #344]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4952      	ldr	r1, [pc, #328]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002442:	4313      	orrs	r3, r2
 8002444:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002446:	e03a      	b.n	80024be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d020      	beq.n	8002492 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002450:	4b4f      	ldr	r3, [pc, #316]	; (8002590 <HAL_RCC_OscConfig+0x2b0>)
 8002452:	2201      	movs	r2, #1
 8002454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002456:	f7fe fec7 	bl	80011e8 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800245e:	f7fe fec3 	bl	80011e8 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e19c      	b.n	80027aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002470:	4b46      	ldr	r3, [pc, #280]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0f0      	beq.n	800245e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247c:	4b43      	ldr	r3, [pc, #268]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4940      	ldr	r1, [pc, #256]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 800248c:	4313      	orrs	r3, r2
 800248e:	600b      	str	r3, [r1, #0]
 8002490:	e015      	b.n	80024be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002492:	4b3f      	ldr	r3, [pc, #252]	; (8002590 <HAL_RCC_OscConfig+0x2b0>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7fe fea6 	bl	80011e8 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a0:	f7fe fea2 	bl	80011e8 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e17b      	b.n	80027aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b2:	4b36      	ldr	r3, [pc, #216]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d030      	beq.n	800252c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d016      	beq.n	8002500 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d2:	4b30      	ldr	r3, [pc, #192]	; (8002594 <HAL_RCC_OscConfig+0x2b4>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d8:	f7fe fe86 	bl	80011e8 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e0:	f7fe fe82 	bl	80011e8 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e15b      	b.n	80027aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f2:	4b26      	ldr	r3, [pc, #152]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 80024f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x200>
 80024fe:	e015      	b.n	800252c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002500:	4b24      	ldr	r3, [pc, #144]	; (8002594 <HAL_RCC_OscConfig+0x2b4>)
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002506:	f7fe fe6f 	bl	80011e8 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800250e:	f7fe fe6b 	bl	80011e8 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e144      	b.n	80027aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002520:	4b1a      	ldr	r3, [pc, #104]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1f0      	bne.n	800250e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 80a0 	beq.w	800267a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800253a:	2300      	movs	r3, #0
 800253c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800253e:	4b13      	ldr	r3, [pc, #76]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10f      	bne.n	800256a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	4b0f      	ldr	r3, [pc, #60]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	4a0e      	ldr	r2, [pc, #56]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002558:	6413      	str	r3, [r2, #64]	; 0x40
 800255a:	4b0c      	ldr	r3, [pc, #48]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002566:	2301      	movs	r3, #1
 8002568:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256a:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <HAL_RCC_OscConfig+0x2b8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002572:	2b00      	cmp	r3, #0
 8002574:	d121      	bne.n	80025ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002576:	4b08      	ldr	r3, [pc, #32]	; (8002598 <HAL_RCC_OscConfig+0x2b8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a07      	ldr	r2, [pc, #28]	; (8002598 <HAL_RCC_OscConfig+0x2b8>)
 800257c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002582:	f7fe fe31 	bl	80011e8 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002588:	e011      	b.n	80025ae <HAL_RCC_OscConfig+0x2ce>
 800258a:	bf00      	nop
 800258c:	40023800 	.word	0x40023800
 8002590:	42470000 	.word	0x42470000
 8002594:	42470e80 	.word	0x42470e80
 8002598:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259c:	f7fe fe24 	bl	80011e8 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e0fd      	b.n	80027aa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ae:	4b81      	ldr	r3, [pc, #516]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d106      	bne.n	80025d0 <HAL_RCC_OscConfig+0x2f0>
 80025c2:	4b7d      	ldr	r3, [pc, #500]	; (80027b8 <HAL_RCC_OscConfig+0x4d8>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c6:	4a7c      	ldr	r2, [pc, #496]	; (80027b8 <HAL_RCC_OscConfig+0x4d8>)
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	6713      	str	r3, [r2, #112]	; 0x70
 80025ce:	e01c      	b.n	800260a <HAL_RCC_OscConfig+0x32a>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2b05      	cmp	r3, #5
 80025d6:	d10c      	bne.n	80025f2 <HAL_RCC_OscConfig+0x312>
 80025d8:	4b77      	ldr	r3, [pc, #476]	; (80027b8 <HAL_RCC_OscConfig+0x4d8>)
 80025da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025dc:	4a76      	ldr	r2, [pc, #472]	; (80027b8 <HAL_RCC_OscConfig+0x4d8>)
 80025de:	f043 0304 	orr.w	r3, r3, #4
 80025e2:	6713      	str	r3, [r2, #112]	; 0x70
 80025e4:	4b74      	ldr	r3, [pc, #464]	; (80027b8 <HAL_RCC_OscConfig+0x4d8>)
 80025e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e8:	4a73      	ldr	r2, [pc, #460]	; (80027b8 <HAL_RCC_OscConfig+0x4d8>)
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	6713      	str	r3, [r2, #112]	; 0x70
 80025f0:	e00b      	b.n	800260a <HAL_RCC_OscConfig+0x32a>
 80025f2:	4b71      	ldr	r3, [pc, #452]	; (80027b8 <HAL_RCC_OscConfig+0x4d8>)
 80025f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f6:	4a70      	ldr	r2, [pc, #448]	; (80027b8 <HAL_RCC_OscConfig+0x4d8>)
 80025f8:	f023 0301 	bic.w	r3, r3, #1
 80025fc:	6713      	str	r3, [r2, #112]	; 0x70
 80025fe:	4b6e      	ldr	r3, [pc, #440]	; (80027b8 <HAL_RCC_OscConfig+0x4d8>)
 8002600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002602:	4a6d      	ldr	r2, [pc, #436]	; (80027b8 <HAL_RCC_OscConfig+0x4d8>)
 8002604:	f023 0304 	bic.w	r3, r3, #4
 8002608:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d015      	beq.n	800263e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002612:	f7fe fde9 	bl	80011e8 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002618:	e00a      	b.n	8002630 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800261a:	f7fe fde5 	bl	80011e8 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	f241 3288 	movw	r2, #5000	; 0x1388
 8002628:	4293      	cmp	r3, r2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e0bc      	b.n	80027aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002630:	4b61      	ldr	r3, [pc, #388]	; (80027b8 <HAL_RCC_OscConfig+0x4d8>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0ee      	beq.n	800261a <HAL_RCC_OscConfig+0x33a>
 800263c:	e014      	b.n	8002668 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263e:	f7fe fdd3 	bl	80011e8 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002644:	e00a      	b.n	800265c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002646:	f7fe fdcf 	bl	80011e8 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	f241 3288 	movw	r2, #5000	; 0x1388
 8002654:	4293      	cmp	r3, r2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e0a6      	b.n	80027aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800265c:	4b56      	ldr	r3, [pc, #344]	; (80027b8 <HAL_RCC_OscConfig+0x4d8>)
 800265e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1ee      	bne.n	8002646 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002668:	7dfb      	ldrb	r3, [r7, #23]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d105      	bne.n	800267a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800266e:	4b52      	ldr	r3, [pc, #328]	; (80027b8 <HAL_RCC_OscConfig+0x4d8>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	4a51      	ldr	r2, [pc, #324]	; (80027b8 <HAL_RCC_OscConfig+0x4d8>)
 8002674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002678:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 8092 	beq.w	80027a8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002684:	4b4c      	ldr	r3, [pc, #304]	; (80027b8 <HAL_RCC_OscConfig+0x4d8>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 030c 	and.w	r3, r3, #12
 800268c:	2b08      	cmp	r3, #8
 800268e:	d05c      	beq.n	800274a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	2b02      	cmp	r3, #2
 8002696:	d141      	bne.n	800271c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002698:	4b48      	ldr	r3, [pc, #288]	; (80027bc <HAL_RCC_OscConfig+0x4dc>)
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269e:	f7fe fda3 	bl	80011e8 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a6:	f7fe fd9f 	bl	80011e8 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e078      	b.n	80027aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b8:	4b3f      	ldr	r3, [pc, #252]	; (80027b8 <HAL_RCC_OscConfig+0x4d8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1f0      	bne.n	80026a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69da      	ldr	r2, [r3, #28]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	019b      	lsls	r3, r3, #6
 80026d4:	431a      	orrs	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026da:	085b      	lsrs	r3, r3, #1
 80026dc:	3b01      	subs	r3, #1
 80026de:	041b      	lsls	r3, r3, #16
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e6:	061b      	lsls	r3, r3, #24
 80026e8:	4933      	ldr	r1, [pc, #204]	; (80027b8 <HAL_RCC_OscConfig+0x4d8>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026ee:	4b33      	ldr	r3, [pc, #204]	; (80027bc <HAL_RCC_OscConfig+0x4dc>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe fd78 	bl	80011e8 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fd74 	bl	80011e8 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e04d      	b.n	80027aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270e:	4b2a      	ldr	r3, [pc, #168]	; (80027b8 <HAL_RCC_OscConfig+0x4d8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x41c>
 800271a:	e045      	b.n	80027a8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271c:	4b27      	ldr	r3, [pc, #156]	; (80027bc <HAL_RCC_OscConfig+0x4dc>)
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002722:	f7fe fd61 	bl	80011e8 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272a:	f7fe fd5d 	bl	80011e8 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e036      	b.n	80027aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273c:	4b1e      	ldr	r3, [pc, #120]	; (80027b8 <HAL_RCC_OscConfig+0x4d8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1f0      	bne.n	800272a <HAL_RCC_OscConfig+0x44a>
 8002748:	e02e      	b.n	80027a8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e029      	b.n	80027aa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002756:	4b18      	ldr	r3, [pc, #96]	; (80027b8 <HAL_RCC_OscConfig+0x4d8>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	429a      	cmp	r2, r3
 8002768:	d11c      	bne.n	80027a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002774:	429a      	cmp	r2, r3
 8002776:	d115      	bne.n	80027a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800277e:	4013      	ands	r3, r2
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002784:	4293      	cmp	r3, r2
 8002786:	d10d      	bne.n	80027a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002792:	429a      	cmp	r2, r3
 8002794:	d106      	bne.n	80027a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40007000 	.word	0x40007000
 80027b8:	40023800 	.word	0x40023800
 80027bc:	42470060 	.word	0x42470060

080027c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0cc      	b.n	800296e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027d4:	4b68      	ldr	r3, [pc, #416]	; (8002978 <HAL_RCC_ClockConfig+0x1b8>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 030f 	and.w	r3, r3, #15
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d90c      	bls.n	80027fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e2:	4b65      	ldr	r3, [pc, #404]	; (8002978 <HAL_RCC_ClockConfig+0x1b8>)
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ea:	4b63      	ldr	r3, [pc, #396]	; (8002978 <HAL_RCC_ClockConfig+0x1b8>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d001      	beq.n	80027fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0b8      	b.n	800296e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d020      	beq.n	800284a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	d005      	beq.n	8002820 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002814:	4b59      	ldr	r3, [pc, #356]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	4a58      	ldr	r2, [pc, #352]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800281e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0308 	and.w	r3, r3, #8
 8002828:	2b00      	cmp	r3, #0
 800282a:	d005      	beq.n	8002838 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800282c:	4b53      	ldr	r3, [pc, #332]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	4a52      	ldr	r2, [pc, #328]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002836:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002838:	4b50      	ldr	r3, [pc, #320]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	494d      	ldr	r1, [pc, #308]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	4313      	orrs	r3, r2
 8002848:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d044      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d107      	bne.n	800286e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285e:	4b47      	ldr	r3, [pc, #284]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d119      	bne.n	800289e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e07f      	b.n	800296e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d003      	beq.n	800287e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800287a:	2b03      	cmp	r3, #3
 800287c:	d107      	bne.n	800288e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287e:	4b3f      	ldr	r3, [pc, #252]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d109      	bne.n	800289e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e06f      	b.n	800296e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288e:	4b3b      	ldr	r3, [pc, #236]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e067      	b.n	800296e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800289e:	4b37      	ldr	r3, [pc, #220]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f023 0203 	bic.w	r2, r3, #3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	4934      	ldr	r1, [pc, #208]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028b0:	f7fe fc9a 	bl	80011e8 <HAL_GetTick>
 80028b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b6:	e00a      	b.n	80028ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b8:	f7fe fc96 	bl	80011e8 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e04f      	b.n	800296e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ce:	4b2b      	ldr	r3, [pc, #172]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 020c 	and.w	r2, r3, #12
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	429a      	cmp	r2, r3
 80028de:	d1eb      	bne.n	80028b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028e0:	4b25      	ldr	r3, [pc, #148]	; (8002978 <HAL_RCC_ClockConfig+0x1b8>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 030f 	and.w	r3, r3, #15
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d20c      	bcs.n	8002908 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ee:	4b22      	ldr	r3, [pc, #136]	; (8002978 <HAL_RCC_ClockConfig+0x1b8>)
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f6:	4b20      	ldr	r3, [pc, #128]	; (8002978 <HAL_RCC_ClockConfig+0x1b8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d001      	beq.n	8002908 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e032      	b.n	800296e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002914:	4b19      	ldr	r3, [pc, #100]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	4916      	ldr	r1, [pc, #88]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 8002922:	4313      	orrs	r3, r2
 8002924:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	2b00      	cmp	r3, #0
 8002930:	d009      	beq.n	8002946 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002932:	4b12      	ldr	r3, [pc, #72]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	490e      	ldr	r1, [pc, #56]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	4313      	orrs	r3, r2
 8002944:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002946:	f000 f821 	bl	800298c <HAL_RCC_GetSysClockFreq>
 800294a:	4601      	mov	r1, r0
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	091b      	lsrs	r3, r3, #4
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	4a0a      	ldr	r2, [pc, #40]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 8002958:	5cd3      	ldrb	r3, [r2, r3]
 800295a:	fa21 f303 	lsr.w	r3, r1, r3
 800295e:	4a09      	ldr	r2, [pc, #36]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 8002960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002962:	4b09      	ldr	r3, [pc, #36]	; (8002988 <HAL_RCC_ClockConfig+0x1c8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f7fe fb4c 	bl	8001004 <HAL_InitTick>

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40023c00 	.word	0x40023c00
 800297c:	40023800 	.word	0x40023800
 8002980:	080048dc 	.word	0x080048dc
 8002984:	20000004 	.word	0x20000004
 8002988:	20000008 	.word	0x20000008

0800298c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800298c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	607b      	str	r3, [r7, #4]
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	2300      	movs	r3, #0
 800299c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800299e:	2300      	movs	r3, #0
 80029a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029a2:	4b63      	ldr	r3, [pc, #396]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d007      	beq.n	80029be <HAL_RCC_GetSysClockFreq+0x32>
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d008      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0x38>
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f040 80b4 	bne.w	8002b20 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029b8:	4b5e      	ldr	r3, [pc, #376]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80029ba:	60bb      	str	r3, [r7, #8]
       break;
 80029bc:	e0b3      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029be:	4b5e      	ldr	r3, [pc, #376]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80029c0:	60bb      	str	r3, [r7, #8]
      break;
 80029c2:	e0b0      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029c4:	4b5a      	ldr	r3, [pc, #360]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029ce:	4b58      	ldr	r3, [pc, #352]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d04a      	beq.n	8002a70 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029da:	4b55      	ldr	r3, [pc, #340]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	099b      	lsrs	r3, r3, #6
 80029e0:	f04f 0400 	mov.w	r4, #0
 80029e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029e8:	f04f 0200 	mov.w	r2, #0
 80029ec:	ea03 0501 	and.w	r5, r3, r1
 80029f0:	ea04 0602 	and.w	r6, r4, r2
 80029f4:	4629      	mov	r1, r5
 80029f6:	4632      	mov	r2, r6
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	f04f 0400 	mov.w	r4, #0
 8002a00:	0154      	lsls	r4, r2, #5
 8002a02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a06:	014b      	lsls	r3, r1, #5
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4622      	mov	r2, r4
 8002a0c:	1b49      	subs	r1, r1, r5
 8002a0e:	eb62 0206 	sbc.w	r2, r2, r6
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	f04f 0400 	mov.w	r4, #0
 8002a1a:	0194      	lsls	r4, r2, #6
 8002a1c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a20:	018b      	lsls	r3, r1, #6
 8002a22:	1a5b      	subs	r3, r3, r1
 8002a24:	eb64 0402 	sbc.w	r4, r4, r2
 8002a28:	f04f 0100 	mov.w	r1, #0
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	00e2      	lsls	r2, r4, #3
 8002a32:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a36:	00d9      	lsls	r1, r3, #3
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4614      	mov	r4, r2
 8002a3c:	195b      	adds	r3, r3, r5
 8002a3e:	eb44 0406 	adc.w	r4, r4, r6
 8002a42:	f04f 0100 	mov.w	r1, #0
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	0262      	lsls	r2, r4, #9
 8002a4c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002a50:	0259      	lsls	r1, r3, #9
 8002a52:	460b      	mov	r3, r1
 8002a54:	4614      	mov	r4, r2
 8002a56:	4618      	mov	r0, r3
 8002a58:	4621      	mov	r1, r4
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f04f 0400 	mov.w	r4, #0
 8002a60:	461a      	mov	r2, r3
 8002a62:	4623      	mov	r3, r4
 8002a64:	f7fd fbbc 	bl	80001e0 <__aeabi_uldivmod>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	460c      	mov	r4, r1
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	e049      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a70:	4b2f      	ldr	r3, [pc, #188]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	099b      	lsrs	r3, r3, #6
 8002a76:	f04f 0400 	mov.w	r4, #0
 8002a7a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	ea03 0501 	and.w	r5, r3, r1
 8002a86:	ea04 0602 	and.w	r6, r4, r2
 8002a8a:	4629      	mov	r1, r5
 8002a8c:	4632      	mov	r2, r6
 8002a8e:	f04f 0300 	mov.w	r3, #0
 8002a92:	f04f 0400 	mov.w	r4, #0
 8002a96:	0154      	lsls	r4, r2, #5
 8002a98:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a9c:	014b      	lsls	r3, r1, #5
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4622      	mov	r2, r4
 8002aa2:	1b49      	subs	r1, r1, r5
 8002aa4:	eb62 0206 	sbc.w	r2, r2, r6
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	f04f 0400 	mov.w	r4, #0
 8002ab0:	0194      	lsls	r4, r2, #6
 8002ab2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ab6:	018b      	lsls	r3, r1, #6
 8002ab8:	1a5b      	subs	r3, r3, r1
 8002aba:	eb64 0402 	sbc.w	r4, r4, r2
 8002abe:	f04f 0100 	mov.w	r1, #0
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	00e2      	lsls	r2, r4, #3
 8002ac8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002acc:	00d9      	lsls	r1, r3, #3
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4614      	mov	r4, r2
 8002ad2:	195b      	adds	r3, r3, r5
 8002ad4:	eb44 0406 	adc.w	r4, r4, r6
 8002ad8:	f04f 0100 	mov.w	r1, #0
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	02a2      	lsls	r2, r4, #10
 8002ae2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ae6:	0299      	lsls	r1, r3, #10
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4614      	mov	r4, r2
 8002aec:	4618      	mov	r0, r3
 8002aee:	4621      	mov	r1, r4
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f04f 0400 	mov.w	r4, #0
 8002af6:	461a      	mov	r2, r3
 8002af8:	4623      	mov	r3, r4
 8002afa:	f7fd fb71 	bl	80001e0 <__aeabi_uldivmod>
 8002afe:	4603      	mov	r3, r0
 8002b00:	460c      	mov	r4, r1
 8002b02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b04:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	0c1b      	lsrs	r3, r3, #16
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	3301      	adds	r3, #1
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1c:	60bb      	str	r3, [r7, #8]
      break;
 8002b1e:	e002      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b20:	4b04      	ldr	r3, [pc, #16]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b22:	60bb      	str	r3, [r7, #8]
      break;
 8002b24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b26:	68bb      	ldr	r3, [r7, #8]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b30:	40023800 	.word	0x40023800
 8002b34:	00f42400 	.word	0x00f42400
 8002b38:	007a1200 	.word	0x007a1200

08002b3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b40:	4b03      	ldr	r3, [pc, #12]	; (8002b50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b42:	681b      	ldr	r3, [r3, #0]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	20000004 	.word	0x20000004

08002b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b58:	f7ff fff0 	bl	8002b3c <HAL_RCC_GetHCLKFreq>
 8002b5c:	4601      	mov	r1, r0
 8002b5e:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	0a9b      	lsrs	r3, r3, #10
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	4a03      	ldr	r2, [pc, #12]	; (8002b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b6a:	5cd3      	ldrb	r3, [r2, r3]
 8002b6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40023800 	.word	0x40023800
 8002b78:	080048ec 	.word	0x080048ec

08002b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b80:	f7ff ffdc 	bl	8002b3c <HAL_RCC_GetHCLKFreq>
 8002b84:	4601      	mov	r1, r0
 8002b86:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	0b5b      	lsrs	r3, r3, #13
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	4a03      	ldr	r2, [pc, #12]	; (8002ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b92:	5cd3      	ldrb	r3, [r2, r3]
 8002b94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	080048ec 	.word	0x080048ec

08002ba4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	220f      	movs	r2, #15
 8002bb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002bb4:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <HAL_RCC_GetClockConfig+0x5c>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 0203 	and.w	r2, r3, #3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002bc0:	4b0f      	ldr	r3, [pc, #60]	; (8002c00 <HAL_RCC_GetClockConfig+0x5c>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <HAL_RCC_GetClockConfig+0x5c>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002bd8:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <HAL_RCC_GetClockConfig+0x5c>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	08db      	lsrs	r3, r3, #3
 8002bde:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002be6:	4b07      	ldr	r3, [pc, #28]	; (8002c04 <HAL_RCC_GetClockConfig+0x60>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 020f 	and.w	r2, r3, #15
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	601a      	str	r2, [r3, #0]
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40023c00 	.word	0x40023c00

08002c08 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d105      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d038      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c30:	4b68      	ldr	r3, [pc, #416]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c36:	f7fe fad7 	bl	80011e8 <HAL_GetTick>
 8002c3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c3e:	f7fe fad3 	bl	80011e8 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e0bd      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c50:	4b61      	ldr	r3, [pc, #388]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1f0      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	019b      	lsls	r3, r3, #6
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	071b      	lsls	r3, r3, #28
 8002c6e:	495a      	ldr	r1, [pc, #360]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c76:	4b57      	ldr	r3, [pc, #348]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c78:	2201      	movs	r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c7c:	f7fe fab4 	bl	80011e8 <HAL_GetTick>
 8002c80:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c84:	f7fe fab0 	bl	80011e8 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e09a      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c96:	4b50      	ldr	r3, [pc, #320]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 8083 	beq.w	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	4b48      	ldr	r3, [pc, #288]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	4a47      	ldr	r2, [pc, #284]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc0:	4b45      	ldr	r3, [pc, #276]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002ccc:	4b43      	ldr	r3, [pc, #268]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a42      	ldr	r2, [pc, #264]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002cd8:	f7fe fa86 	bl	80011e8 <HAL_GetTick>
 8002cdc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002ce0:	f7fe fa82 	bl	80011e8 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e06c      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002cf2:	4b3a      	ldr	r3, [pc, #232]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f0      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cfe:	4b36      	ldr	r3, [pc, #216]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d06:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d02f      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d028      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d1c:	4b2e      	ldr	r3, [pc, #184]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d24:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d26:	4b2e      	ldr	r3, [pc, #184]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d2c:	4b2c      	ldr	r3, [pc, #176]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002d32:	4a29      	ldr	r2, [pc, #164]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d38:	4b27      	ldr	r3, [pc, #156]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d114      	bne.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002d44:	f7fe fa50 	bl	80011e8 <HAL_GetTick>
 8002d48:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4a:	e00a      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d4c:	f7fe fa4c 	bl	80011e8 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e034      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d62:	4b1d      	ldr	r3, [pc, #116]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0ee      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d7a:	d10d      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002d7c:	4b16      	ldr	r3, [pc, #88]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d90:	4911      	ldr	r1, [pc, #68]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	608b      	str	r3, [r1, #8]
 8002d96:	e005      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002d98:	4b0f      	ldr	r3, [pc, #60]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4a0e      	ldr	r2, [pc, #56]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002da2:	6093      	str	r3, [r2, #8]
 8002da4:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db0:	4909      	ldr	r1, [pc, #36]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	7d1a      	ldrb	r2, [r3, #20]
 8002dc6:	4b07      	ldr	r3, [pc, #28]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002dc8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	42470068 	.word	0x42470068
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40007000 	.word	0x40007000
 8002de0:	42470e40 	.word	0x42470e40
 8002de4:	424711e0 	.word	0x424711e0

08002de8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d13f      	bne.n	8002e86 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002e06:	4b23      	ldr	r3, [pc, #140]	; (8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e0e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d004      	beq.n	8002e20 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d131      	bne.n	8002e7e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002e1a:	4b1f      	ldr	r3, [pc, #124]	; (8002e98 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002e1c:	617b      	str	r3, [r7, #20]
          break;
 8002e1e:	e031      	b.n	8002e84 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002e20:	4b1c      	ldr	r3, [pc, #112]	; (8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e2c:	d109      	bne.n	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002e2e:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e38:	4a18      	ldr	r2, [pc, #96]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	e008      	b.n	8002e54 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002e42:	4b14      	ldr	r3, [pc, #80]	; (8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e4c:	4a14      	ldr	r2, [pc, #80]	; (8002ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e52:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002e54:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e5a:	099b      	lsrs	r3, r3, #6
 8002e5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	fb02 f303 	mul.w	r3, r2, r3
 8002e66:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002e68:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e6e:	0f1b      	lsrs	r3, r3, #28
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7a:	617b      	str	r3, [r7, #20]
          break;
 8002e7c:	e002      	b.n	8002e84 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
          break;
 8002e82:	bf00      	nop
        }
      }
      break;
 8002e84:	bf00      	nop
    }
  }
  return frequency;
 8002e86:	697b      	ldr	r3, [r7, #20]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	371c      	adds	r7, #28
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	40023800 	.word	0x40023800
 8002e98:	00bb8000 	.word	0x00bb8000
 8002e9c:	007a1200 	.word	0x007a1200
 8002ea0:	00f42400 	.word	0x00f42400

08002ea4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e056      	b.n	8002f64 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d106      	bne.n	8002ed6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7fe f84f 	bl	8000f74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2202      	movs	r2, #2
 8002eda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	ea42 0103 	orr.w	r1, r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	0c1b      	lsrs	r3, r3, #16
 8002f34:	f003 0104 	and.w	r1, r3, #4
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	69da      	ldr	r2, [r3, #28]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e01d      	b.n	8002fba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d106      	bne.n	8002f98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f815 	bl	8002fc2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4610      	mov	r0, r2
 8002fac:	f000 f968 	bl	8003280 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b085      	sub	sp, #20
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68da      	ldr	r2, [r3, #12]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f042 0201 	orr.w	r2, r2, #1
 8002fec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2b06      	cmp	r3, #6
 8002ffe:	d007      	beq.n	8003010 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0201 	orr.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b02      	cmp	r3, #2
 8003032:	d122      	bne.n	800307a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b02      	cmp	r3, #2
 8003040:	d11b      	bne.n	800307a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f06f 0202 	mvn.w	r2, #2
 800304a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	f003 0303 	and.w	r3, r3, #3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f8ee 	bl	8003242 <HAL_TIM_IC_CaptureCallback>
 8003066:	e005      	b.n	8003074 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f8e0 	bl	800322e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f8f1 	bl	8003256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b04      	cmp	r3, #4
 8003086:	d122      	bne.n	80030ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	2b04      	cmp	r3, #4
 8003094:	d11b      	bne.n	80030ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f06f 0204 	mvn.w	r2, #4
 800309e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2202      	movs	r2, #2
 80030a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f8c4 	bl	8003242 <HAL_TIM_IC_CaptureCallback>
 80030ba:	e005      	b.n	80030c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f8b6 	bl	800322e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f8c7 	bl	8003256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d122      	bne.n	8003122 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d11b      	bne.n	8003122 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f06f 0208 	mvn.w	r2, #8
 80030f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2204      	movs	r2, #4
 80030f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f89a 	bl	8003242 <HAL_TIM_IC_CaptureCallback>
 800310e:	e005      	b.n	800311c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f88c 	bl	800322e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f89d 	bl	8003256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	f003 0310 	and.w	r3, r3, #16
 800312c:	2b10      	cmp	r3, #16
 800312e:	d122      	bne.n	8003176 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f003 0310 	and.w	r3, r3, #16
 800313a:	2b10      	cmp	r3, #16
 800313c:	d11b      	bne.n	8003176 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f06f 0210 	mvn.w	r2, #16
 8003146:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2208      	movs	r2, #8
 800314c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	69db      	ldr	r3, [r3, #28]
 8003154:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f870 	bl	8003242 <HAL_TIM_IC_CaptureCallback>
 8003162:	e005      	b.n	8003170 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f862 	bl	800322e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f873 	bl	8003256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b01      	cmp	r3, #1
 8003182:	d10e      	bne.n	80031a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b01      	cmp	r3, #1
 8003190:	d107      	bne.n	80031a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f06f 0201 	mvn.w	r2, #1
 800319a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7fd fd8d 	bl	8000cbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ac:	2b80      	cmp	r3, #128	; 0x80
 80031ae:	d10e      	bne.n	80031ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ba:	2b80      	cmp	r3, #128	; 0x80
 80031bc:	d107      	bne.n	80031ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f8e3 	bl	8003394 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d8:	2b40      	cmp	r3, #64	; 0x40
 80031da:	d10e      	bne.n	80031fa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e6:	2b40      	cmp	r3, #64	; 0x40
 80031e8:	d107      	bne.n	80031fa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f838 	bl	800326a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	f003 0320 	and.w	r3, r3, #32
 8003204:	2b20      	cmp	r3, #32
 8003206:	d10e      	bne.n	8003226 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f003 0320 	and.w	r3, r3, #32
 8003212:	2b20      	cmp	r3, #32
 8003214:	d107      	bne.n	8003226 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f06f 0220 	mvn.w	r2, #32
 800321e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f8ad 	bl	8003380 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
	...

08003280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a34      	ldr	r2, [pc, #208]	; (8003364 <TIM_Base_SetConfig+0xe4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d00f      	beq.n	80032b8 <TIM_Base_SetConfig+0x38>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800329e:	d00b      	beq.n	80032b8 <TIM_Base_SetConfig+0x38>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a31      	ldr	r2, [pc, #196]	; (8003368 <TIM_Base_SetConfig+0xe8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d007      	beq.n	80032b8 <TIM_Base_SetConfig+0x38>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a30      	ldr	r2, [pc, #192]	; (800336c <TIM_Base_SetConfig+0xec>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d003      	beq.n	80032b8 <TIM_Base_SetConfig+0x38>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a2f      	ldr	r2, [pc, #188]	; (8003370 <TIM_Base_SetConfig+0xf0>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d108      	bne.n	80032ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a25      	ldr	r2, [pc, #148]	; (8003364 <TIM_Base_SetConfig+0xe4>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d01b      	beq.n	800330a <TIM_Base_SetConfig+0x8a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d8:	d017      	beq.n	800330a <TIM_Base_SetConfig+0x8a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a22      	ldr	r2, [pc, #136]	; (8003368 <TIM_Base_SetConfig+0xe8>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d013      	beq.n	800330a <TIM_Base_SetConfig+0x8a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a21      	ldr	r2, [pc, #132]	; (800336c <TIM_Base_SetConfig+0xec>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00f      	beq.n	800330a <TIM_Base_SetConfig+0x8a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a20      	ldr	r2, [pc, #128]	; (8003370 <TIM_Base_SetConfig+0xf0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00b      	beq.n	800330a <TIM_Base_SetConfig+0x8a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a1f      	ldr	r2, [pc, #124]	; (8003374 <TIM_Base_SetConfig+0xf4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d007      	beq.n	800330a <TIM_Base_SetConfig+0x8a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a1e      	ldr	r2, [pc, #120]	; (8003378 <TIM_Base_SetConfig+0xf8>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d003      	beq.n	800330a <TIM_Base_SetConfig+0x8a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a1d      	ldr	r2, [pc, #116]	; (800337c <TIM_Base_SetConfig+0xfc>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d108      	bne.n	800331c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4313      	orrs	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a08      	ldr	r2, [pc, #32]	; (8003364 <TIM_Base_SetConfig+0xe4>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d103      	bne.n	8003350 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	615a      	str	r2, [r3, #20]
}
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40010000 	.word	0x40010000
 8003368:	40000400 	.word	0x40000400
 800336c:	40000800 	.word	0x40000800
 8003370:	40000c00 	.word	0x40000c00
 8003374:	40014000 	.word	0x40014000
 8003378:	40014400 	.word	0x40014400
 800337c:	40014800 	.word	0x40014800

08003380 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80033b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033ba:	2b84      	cmp	r3, #132	; 0x84
 80033bc:	d005      	beq.n	80033ca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80033be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4413      	add	r3, r2
 80033c6:	3303      	adds	r3, #3
 80033c8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80033ca:	68fb      	ldr	r3, [r7, #12]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80033dc:	f000 fad2 	bl	8003984 <vTaskStartScheduler>
  
  return osOK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80033e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033e8:	b089      	sub	sp, #36	; 0x24
 80033ea:	af04      	add	r7, sp, #16
 80033ec:	6078      	str	r0, [r7, #4]
 80033ee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d020      	beq.n	800343a <osThreadCreate+0x54>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01c      	beq.n	800343a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685c      	ldr	r4, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681d      	ldr	r5, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691e      	ldr	r6, [r3, #16]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff ffc8 	bl	80033a8 <makeFreeRtosPriority>
 8003418:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003422:	9202      	str	r2, [sp, #8]
 8003424:	9301      	str	r3, [sp, #4]
 8003426:	9100      	str	r1, [sp, #0]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	4632      	mov	r2, r6
 800342c:	4629      	mov	r1, r5
 800342e:	4620      	mov	r0, r4
 8003430:	f000 f8ed 	bl	800360e <xTaskCreateStatic>
 8003434:	4603      	mov	r3, r0
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	e01c      	b.n	8003474 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685c      	ldr	r4, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003446:	b29e      	uxth	r6, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff ffaa 	bl	80033a8 <makeFreeRtosPriority>
 8003454:	4602      	mov	r2, r0
 8003456:	f107 030c 	add.w	r3, r7, #12
 800345a:	9301      	str	r3, [sp, #4]
 800345c:	9200      	str	r2, [sp, #0]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	4632      	mov	r2, r6
 8003462:	4629      	mov	r1, r5
 8003464:	4620      	mov	r0, r4
 8003466:	f000 f92b 	bl	80036c0 <xTaskCreate>
 800346a:	4603      	mov	r3, r0
 800346c:	2b01      	cmp	r3, #1
 800346e:	d001      	beq.n	8003474 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003470:	2300      	movs	r3, #0
 8003472:	e000      	b.n	8003476 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003474:	68fb      	ldr	r3, [r7, #12]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800347e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b084      	sub	sp, #16
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <osDelay+0x16>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	e000      	b.n	8003496 <osDelay+0x18>
 8003494:	2301      	movs	r3, #1
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fa40 	bl	800391c <vTaskDelay>
  
  return osOK;
 800349c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f103 0208 	add.w	r2, r3, #8
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f04f 32ff 	mov.w	r2, #4294967295
 80034be:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f103 0208 	add.w	r2, r3, #8
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f103 0208 	add.w	r2, r3, #8
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	1c5a      	adds	r2, r3, #1
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	601a      	str	r2, [r3, #0]
}
 800353c:	bf00      	nop
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355e:	d103      	bne.n	8003568 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	e00c      	b.n	8003582 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3308      	adds	r3, #8
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	e002      	b.n	8003576 <vListInsert+0x2e>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	429a      	cmp	r2, r3
 8003580:	d2f6      	bcs.n	8003570 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	601a      	str	r2, [r3, #0]
}
 80035ae:	bf00      	nop
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035ba:	b480      	push	{r7}
 80035bc:	b085      	sub	sp, #20
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6892      	ldr	r2, [r2, #8]
 80035d0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6852      	ldr	r2, [r2, #4]
 80035da:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d103      	bne.n	80035ee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	1e5a      	subs	r2, r3, #1
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800360e:	b580      	push	{r7, lr}
 8003610:	b08e      	sub	sp, #56	; 0x38
 8003612:	af04      	add	r7, sp, #16
 8003614:	60f8      	str	r0, [r7, #12]
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	607a      	str	r2, [r7, #4]
 800361a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800361c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800361e:	2b00      	cmp	r3, #0
 8003620:	d109      	bne.n	8003636 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003626:	f383 8811 	msr	BASEPRI, r3
 800362a:	f3bf 8f6f 	isb	sy
 800362e:	f3bf 8f4f 	dsb	sy
 8003632:	623b      	str	r3, [r7, #32]
 8003634:	e7fe      	b.n	8003634 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003638:	2b00      	cmp	r3, #0
 800363a:	d109      	bne.n	8003650 <xTaskCreateStatic+0x42>
 800363c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003640:	f383 8811 	msr	BASEPRI, r3
 8003644:	f3bf 8f6f 	isb	sy
 8003648:	f3bf 8f4f 	dsb	sy
 800364c:	61fb      	str	r3, [r7, #28]
 800364e:	e7fe      	b.n	800364e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003650:	2354      	movs	r3, #84	; 0x54
 8003652:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	2b54      	cmp	r3, #84	; 0x54
 8003658:	d009      	beq.n	800366e <xTaskCreateStatic+0x60>
 800365a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365e:	f383 8811 	msr	BASEPRI, r3
 8003662:	f3bf 8f6f 	isb	sy
 8003666:	f3bf 8f4f 	dsb	sy
 800366a:	61bb      	str	r3, [r7, #24]
 800366c:	e7fe      	b.n	800366c <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800366e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003670:	2b00      	cmp	r3, #0
 8003672:	d01e      	beq.n	80036b2 <xTaskCreateStatic+0xa4>
 8003674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003676:	2b00      	cmp	r3, #0
 8003678:	d01b      	beq.n	80036b2 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800367a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003682:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	2202      	movs	r2, #2
 8003688:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800368c:	2300      	movs	r3, #0
 800368e:	9303      	str	r3, [sp, #12]
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	9302      	str	r3, [sp, #8]
 8003694:	f107 0314 	add.w	r3, r7, #20
 8003698:	9301      	str	r3, [sp, #4]
 800369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	68b9      	ldr	r1, [r7, #8]
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 f850 	bl	800374a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036ac:	f000 f8cc 	bl	8003848 <prvAddNewTaskToReadyList>
 80036b0:	e001      	b.n	80036b6 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036b6:	697b      	ldr	r3, [r7, #20]
	}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3728      	adds	r7, #40	; 0x28
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08c      	sub	sp, #48	; 0x30
 80036c4:	af04      	add	r7, sp, #16
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	4613      	mov	r3, r2
 80036ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 feb5 	bl	8004444 <pvPortMalloc>
 80036da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00e      	beq.n	8003700 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80036e2:	2054      	movs	r0, #84	; 0x54
 80036e4:	f000 feae 	bl	8004444 <pvPortMalloc>
 80036e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	631a      	str	r2, [r3, #48]	; 0x30
 80036f6:	e005      	b.n	8003704 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036f8:	6978      	ldr	r0, [r7, #20]
 80036fa:	f000 ff65 	bl	80045c8 <vPortFree>
 80036fe:	e001      	b.n	8003704 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003700:	2300      	movs	r3, #0
 8003702:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d017      	beq.n	800373a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003712:	88fa      	ldrh	r2, [r7, #6]
 8003714:	2300      	movs	r3, #0
 8003716:	9303      	str	r3, [sp, #12]
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	9302      	str	r3, [sp, #8]
 800371c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371e:	9301      	str	r3, [sp, #4]
 8003720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	68b9      	ldr	r1, [r7, #8]
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 f80e 	bl	800374a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800372e:	69f8      	ldr	r0, [r7, #28]
 8003730:	f000 f88a 	bl	8003848 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003734:	2301      	movs	r3, #1
 8003736:	61bb      	str	r3, [r7, #24]
 8003738:	e002      	b.n	8003740 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800373a:	f04f 33ff 	mov.w	r3, #4294967295
 800373e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003740:	69bb      	ldr	r3, [r7, #24]
	}
 8003742:	4618      	mov	r0, r3
 8003744:	3720      	adds	r7, #32
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b088      	sub	sp, #32
 800374e:	af00      	add	r7, sp, #0
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	607a      	str	r2, [r7, #4]
 8003756:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003762:	3b01      	subs	r3, #1
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	f023 0307 	bic.w	r3, r3, #7
 8003770:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	2b00      	cmp	r3, #0
 800377a:	d009      	beq.n	8003790 <prvInitialiseNewTask+0x46>
 800377c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003780:	f383 8811 	msr	BASEPRI, r3
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	617b      	str	r3, [r7, #20]
 800378e:	e7fe      	b.n	800378e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003790:	2300      	movs	r3, #0
 8003792:	61fb      	str	r3, [r7, #28]
 8003794:	e012      	b.n	80037bc <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	4413      	add	r3, r2
 800379c:	7819      	ldrb	r1, [r3, #0]
 800379e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	4413      	add	r3, r2
 80037a4:	3334      	adds	r3, #52	; 0x34
 80037a6:	460a      	mov	r2, r1
 80037a8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	4413      	add	r3, r2
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d006      	beq.n	80037c4 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	3301      	adds	r3, #1
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	2b0f      	cmp	r3, #15
 80037c0:	d9e9      	bls.n	8003796 <prvInitialiseNewTask+0x4c>
 80037c2:	e000      	b.n	80037c6 <prvInitialiseNewTask+0x7c>
		{
			break;
 80037c4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d0:	2b06      	cmp	r3, #6
 80037d2:	d901      	bls.n	80037d8 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037d4:	2306      	movs	r3, #6
 80037d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037e2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80037e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e6:	2200      	movs	r2, #0
 80037e8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ec:	3304      	adds	r3, #4
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff fe79 	bl	80034e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f6:	3318      	adds	r3, #24
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff fe74 	bl	80034e6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003802:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003806:	f1c3 0207 	rsb	r2, r3, #7
 800380a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003812:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	2200      	movs	r2, #0
 8003818:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	68f9      	ldr	r1, [r7, #12]
 8003826:	69b8      	ldr	r0, [r7, #24]
 8003828:	f000 fc08 	bl	800403c <pxPortInitialiseStack>
 800382c:	4602      	mov	r2, r0
 800382e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003830:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800383c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800383e:	bf00      	nop
 8003840:	3720      	adds	r7, #32
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003850:	f000 fd1c 	bl	800428c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003854:	4b2a      	ldr	r3, [pc, #168]	; (8003900 <prvAddNewTaskToReadyList+0xb8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	3301      	adds	r3, #1
 800385a:	4a29      	ldr	r2, [pc, #164]	; (8003900 <prvAddNewTaskToReadyList+0xb8>)
 800385c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800385e:	4b29      	ldr	r3, [pc, #164]	; (8003904 <prvAddNewTaskToReadyList+0xbc>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d109      	bne.n	800387a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003866:	4a27      	ldr	r2, [pc, #156]	; (8003904 <prvAddNewTaskToReadyList+0xbc>)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800386c:	4b24      	ldr	r3, [pc, #144]	; (8003900 <prvAddNewTaskToReadyList+0xb8>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d110      	bne.n	8003896 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003874:	f000 fabc 	bl	8003df0 <prvInitialiseTaskLists>
 8003878:	e00d      	b.n	8003896 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800387a:	4b23      	ldr	r3, [pc, #140]	; (8003908 <prvAddNewTaskToReadyList+0xc0>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d109      	bne.n	8003896 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003882:	4b20      	ldr	r3, [pc, #128]	; (8003904 <prvAddNewTaskToReadyList+0xbc>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388c:	429a      	cmp	r2, r3
 800388e:	d802      	bhi.n	8003896 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003890:	4a1c      	ldr	r2, [pc, #112]	; (8003904 <prvAddNewTaskToReadyList+0xbc>)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003896:	4b1d      	ldr	r3, [pc, #116]	; (800390c <prvAddNewTaskToReadyList+0xc4>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	3301      	adds	r3, #1
 800389c:	4a1b      	ldr	r2, [pc, #108]	; (800390c <prvAddNewTaskToReadyList+0xc4>)
 800389e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	2201      	movs	r2, #1
 80038a6:	409a      	lsls	r2, r3
 80038a8:	4b19      	ldr	r3, [pc, #100]	; (8003910 <prvAddNewTaskToReadyList+0xc8>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	4a18      	ldr	r2, [pc, #96]	; (8003910 <prvAddNewTaskToReadyList+0xc8>)
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4a15      	ldr	r2, [pc, #84]	; (8003914 <prvAddNewTaskToReadyList+0xcc>)
 80038c0:	441a      	add	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3304      	adds	r3, #4
 80038c6:	4619      	mov	r1, r3
 80038c8:	4610      	mov	r0, r2
 80038ca:	f7ff fe19 	bl	8003500 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038ce:	f000 fd0b 	bl	80042e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038d2:	4b0d      	ldr	r3, [pc, #52]	; (8003908 <prvAddNewTaskToReadyList+0xc0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00e      	beq.n	80038f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038da:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <prvAddNewTaskToReadyList+0xbc>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d207      	bcs.n	80038f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038e8:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <prvAddNewTaskToReadyList+0xd0>)
 80038ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	f3bf 8f4f 	dsb	sy
 80038f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038f8:	bf00      	nop
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	20000384 	.word	0x20000384
 8003904:	20000284 	.word	0x20000284
 8003908:	20000390 	.word	0x20000390
 800390c:	200003a0 	.word	0x200003a0
 8003910:	2000038c 	.word	0x2000038c
 8003914:	20000288 	.word	0x20000288
 8003918:	e000ed04 	.word	0xe000ed04

0800391c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003924:	2300      	movs	r3, #0
 8003926:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d016      	beq.n	800395c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800392e:	4b13      	ldr	r3, [pc, #76]	; (800397c <vTaskDelay+0x60>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d009      	beq.n	800394a <vTaskDelay+0x2e>
 8003936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393a:	f383 8811 	msr	BASEPRI, r3
 800393e:	f3bf 8f6f 	isb	sy
 8003942:	f3bf 8f4f 	dsb	sy
 8003946:	60bb      	str	r3, [r7, #8]
 8003948:	e7fe      	b.n	8003948 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800394a:	f000 f879 	bl	8003a40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800394e:	2100      	movs	r1, #0
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 fb0d 	bl	8003f70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003956:	f000 f881 	bl	8003a5c <xTaskResumeAll>
 800395a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d107      	bne.n	8003972 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003962:	4b07      	ldr	r3, [pc, #28]	; (8003980 <vTaskDelay+0x64>)
 8003964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003972:	bf00      	nop
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	200003ac 	.word	0x200003ac
 8003980:	e000ed04 	.word	0xe000ed04

08003984 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b08a      	sub	sp, #40	; 0x28
 8003988:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800398a:	2300      	movs	r3, #0
 800398c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800398e:	2300      	movs	r3, #0
 8003990:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003992:	463a      	mov	r2, r7
 8003994:	1d39      	adds	r1, r7, #4
 8003996:	f107 0308 	add.w	r3, r7, #8
 800399a:	4618      	mov	r0, r3
 800399c:	f7fc fdf8 	bl	8000590 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039a0:	6839      	ldr	r1, [r7, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	9202      	str	r2, [sp, #8]
 80039a8:	9301      	str	r3, [sp, #4]
 80039aa:	2300      	movs	r3, #0
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	2300      	movs	r3, #0
 80039b0:	460a      	mov	r2, r1
 80039b2:	491d      	ldr	r1, [pc, #116]	; (8003a28 <vTaskStartScheduler+0xa4>)
 80039b4:	481d      	ldr	r0, [pc, #116]	; (8003a2c <vTaskStartScheduler+0xa8>)
 80039b6:	f7ff fe2a 	bl	800360e <xTaskCreateStatic>
 80039ba:	4602      	mov	r2, r0
 80039bc:	4b1c      	ldr	r3, [pc, #112]	; (8003a30 <vTaskStartScheduler+0xac>)
 80039be:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80039c0:	4b1b      	ldr	r3, [pc, #108]	; (8003a30 <vTaskStartScheduler+0xac>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d002      	beq.n	80039ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80039c8:	2301      	movs	r3, #1
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	e001      	b.n	80039d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d115      	bne.n	8003a04 <vTaskStartScheduler+0x80>
 80039d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80039ea:	4b12      	ldr	r3, [pc, #72]	; (8003a34 <vTaskStartScheduler+0xb0>)
 80039ec:	f04f 32ff 	mov.w	r2, #4294967295
 80039f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80039f2:	4b11      	ldr	r3, [pc, #68]	; (8003a38 <vTaskStartScheduler+0xb4>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80039f8:	4b10      	ldr	r3, [pc, #64]	; (8003a3c <vTaskStartScheduler+0xb8>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80039fe:	f000 fba7 	bl	8004150 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a02:	e00d      	b.n	8003a20 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0a:	d109      	bne.n	8003a20 <vTaskStartScheduler+0x9c>
 8003a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a10:	f383 8811 	msr	BASEPRI, r3
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	60fb      	str	r3, [r7, #12]
 8003a1e:	e7fe      	b.n	8003a1e <vTaskStartScheduler+0x9a>
}
 8003a20:	bf00      	nop
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	080048d4 	.word	0x080048d4
 8003a2c:	08003dc1 	.word	0x08003dc1
 8003a30:	200003a8 	.word	0x200003a8
 8003a34:	200003a4 	.word	0x200003a4
 8003a38:	20000390 	.word	0x20000390
 8003a3c:	20000388 	.word	0x20000388

08003a40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003a44:	4b04      	ldr	r3, [pc, #16]	; (8003a58 <vTaskSuspendAll+0x18>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	4a03      	ldr	r2, [pc, #12]	; (8003a58 <vTaskSuspendAll+0x18>)
 8003a4c:	6013      	str	r3, [r2, #0]
}
 8003a4e:	bf00      	nop
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	200003ac 	.word	0x200003ac

08003a5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a66:	2300      	movs	r3, #0
 8003a68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a6a:	4b41      	ldr	r3, [pc, #260]	; (8003b70 <xTaskResumeAll+0x114>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d109      	bne.n	8003a86 <xTaskResumeAll+0x2a>
 8003a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a76:	f383 8811 	msr	BASEPRI, r3
 8003a7a:	f3bf 8f6f 	isb	sy
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	603b      	str	r3, [r7, #0]
 8003a84:	e7fe      	b.n	8003a84 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a86:	f000 fc01 	bl	800428c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a8a:	4b39      	ldr	r3, [pc, #228]	; (8003b70 <xTaskResumeAll+0x114>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	4a37      	ldr	r2, [pc, #220]	; (8003b70 <xTaskResumeAll+0x114>)
 8003a92:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a94:	4b36      	ldr	r3, [pc, #216]	; (8003b70 <xTaskResumeAll+0x114>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d161      	bne.n	8003b60 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a9c:	4b35      	ldr	r3, [pc, #212]	; (8003b74 <xTaskResumeAll+0x118>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d05d      	beq.n	8003b60 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003aa4:	e02e      	b.n	8003b04 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003aa6:	4b34      	ldr	r3, [pc, #208]	; (8003b78 <xTaskResumeAll+0x11c>)
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3318      	adds	r3, #24
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff fd81 	bl	80035ba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	3304      	adds	r3, #4
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff fd7c 	bl	80035ba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	409a      	lsls	r2, r3
 8003aca:	4b2c      	ldr	r3, [pc, #176]	; (8003b7c <xTaskResumeAll+0x120>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	4a2a      	ldr	r2, [pc, #168]	; (8003b7c <xTaskResumeAll+0x120>)
 8003ad2:	6013      	str	r3, [r2, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4a27      	ldr	r2, [pc, #156]	; (8003b80 <xTaskResumeAll+0x124>)
 8003ae2:	441a      	add	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4610      	mov	r0, r2
 8003aec:	f7ff fd08 	bl	8003500 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af4:	4b23      	ldr	r3, [pc, #140]	; (8003b84 <xTaskResumeAll+0x128>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d302      	bcc.n	8003b04 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003afe:	4b22      	ldr	r3, [pc, #136]	; (8003b88 <xTaskResumeAll+0x12c>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b04:	4b1c      	ldr	r3, [pc, #112]	; (8003b78 <xTaskResumeAll+0x11c>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1cc      	bne.n	8003aa6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b12:	f000 fa07 	bl	8003f24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003b16:	4b1d      	ldr	r3, [pc, #116]	; (8003b8c <xTaskResumeAll+0x130>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d010      	beq.n	8003b44 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b22:	f000 f837 	bl	8003b94 <xTaskIncrementTick>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003b2c:	4b16      	ldr	r3, [pc, #88]	; (8003b88 <xTaskResumeAll+0x12c>)
 8003b2e:	2201      	movs	r2, #1
 8003b30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3b01      	subs	r3, #1
 8003b36:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f1      	bne.n	8003b22 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003b3e:	4b13      	ldr	r3, [pc, #76]	; (8003b8c <xTaskResumeAll+0x130>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b44:	4b10      	ldr	r3, [pc, #64]	; (8003b88 <xTaskResumeAll+0x12c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d009      	beq.n	8003b60 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b50:	4b0f      	ldr	r3, [pc, #60]	; (8003b90 <xTaskResumeAll+0x134>)
 8003b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b60:	f000 fbc2 	bl	80042e8 <vPortExitCritical>

	return xAlreadyYielded;
 8003b64:	68bb      	ldr	r3, [r7, #8]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	200003ac 	.word	0x200003ac
 8003b74:	20000384 	.word	0x20000384
 8003b78:	20000344 	.word	0x20000344
 8003b7c:	2000038c 	.word	0x2000038c
 8003b80:	20000288 	.word	0x20000288
 8003b84:	20000284 	.word	0x20000284
 8003b88:	20000398 	.word	0x20000398
 8003b8c:	20000394 	.word	0x20000394
 8003b90:	e000ed04 	.word	0xe000ed04

08003b94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b9e:	4b50      	ldr	r3, [pc, #320]	; (8003ce0 <xTaskIncrementTick+0x14c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f040 808c 	bne.w	8003cc0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ba8:	4b4e      	ldr	r3, [pc, #312]	; (8003ce4 <xTaskIncrementTick+0x150>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3301      	adds	r3, #1
 8003bae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003bb0:	4a4c      	ldr	r2, [pc, #304]	; (8003ce4 <xTaskIncrementTick+0x150>)
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d11f      	bne.n	8003bfc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003bbc:	4b4a      	ldr	r3, [pc, #296]	; (8003ce8 <xTaskIncrementTick+0x154>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d009      	beq.n	8003bda <xTaskIncrementTick+0x46>
 8003bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bca:	f383 8811 	msr	BASEPRI, r3
 8003bce:	f3bf 8f6f 	isb	sy
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	603b      	str	r3, [r7, #0]
 8003bd8:	e7fe      	b.n	8003bd8 <xTaskIncrementTick+0x44>
 8003bda:	4b43      	ldr	r3, [pc, #268]	; (8003ce8 <xTaskIncrementTick+0x154>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	4b42      	ldr	r3, [pc, #264]	; (8003cec <xTaskIncrementTick+0x158>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a40      	ldr	r2, [pc, #256]	; (8003ce8 <xTaskIncrementTick+0x154>)
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	4a40      	ldr	r2, [pc, #256]	; (8003cec <xTaskIncrementTick+0x158>)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	4b40      	ldr	r3, [pc, #256]	; (8003cf0 <xTaskIncrementTick+0x15c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	4a3e      	ldr	r2, [pc, #248]	; (8003cf0 <xTaskIncrementTick+0x15c>)
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	f000 f994 	bl	8003f24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003bfc:	4b3d      	ldr	r3, [pc, #244]	; (8003cf4 <xTaskIncrementTick+0x160>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d34d      	bcc.n	8003ca2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c06:	4b38      	ldr	r3, [pc, #224]	; (8003ce8 <xTaskIncrementTick+0x154>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <xTaskIncrementTick+0x80>
 8003c10:	2301      	movs	r3, #1
 8003c12:	e000      	b.n	8003c16 <xTaskIncrementTick+0x82>
 8003c14:	2300      	movs	r3, #0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d004      	beq.n	8003c24 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c1a:	4b36      	ldr	r3, [pc, #216]	; (8003cf4 <xTaskIncrementTick+0x160>)
 8003c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c20:	601a      	str	r2, [r3, #0]
					break;
 8003c22:	e03e      	b.n	8003ca2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c24:	4b30      	ldr	r3, [pc, #192]	; (8003ce8 <xTaskIncrementTick+0x154>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d203      	bcs.n	8003c44 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c3c:	4a2d      	ldr	r2, [pc, #180]	; (8003cf4 <xTaskIncrementTick+0x160>)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6013      	str	r3, [r2, #0]
						break;
 8003c42:	e02e      	b.n	8003ca2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	3304      	adds	r3, #4
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff fcb6 	bl	80035ba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d004      	beq.n	8003c60 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	3318      	adds	r3, #24
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7ff fcad 	bl	80035ba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	2201      	movs	r2, #1
 8003c66:	409a      	lsls	r2, r3
 8003c68:	4b23      	ldr	r3, [pc, #140]	; (8003cf8 <xTaskIncrementTick+0x164>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	4a22      	ldr	r2, [pc, #136]	; (8003cf8 <xTaskIncrementTick+0x164>)
 8003c70:	6013      	str	r3, [r2, #0]
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c76:	4613      	mov	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4a1f      	ldr	r2, [pc, #124]	; (8003cfc <xTaskIncrementTick+0x168>)
 8003c80:	441a      	add	r2, r3
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	3304      	adds	r3, #4
 8003c86:	4619      	mov	r1, r3
 8003c88:	4610      	mov	r0, r2
 8003c8a:	f7ff fc39 	bl	8003500 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c92:	4b1b      	ldr	r3, [pc, #108]	; (8003d00 <xTaskIncrementTick+0x16c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d3b4      	bcc.n	8003c06 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ca0:	e7b1      	b.n	8003c06 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ca2:	4b17      	ldr	r3, [pc, #92]	; (8003d00 <xTaskIncrementTick+0x16c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca8:	4914      	ldr	r1, [pc, #80]	; (8003cfc <xTaskIncrementTick+0x168>)
 8003caa:	4613      	mov	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d907      	bls.n	8003cca <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	617b      	str	r3, [r7, #20]
 8003cbe:	e004      	b.n	8003cca <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003cc0:	4b10      	ldr	r3, [pc, #64]	; (8003d04 <xTaskIncrementTick+0x170>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	4a0f      	ldr	r2, [pc, #60]	; (8003d04 <xTaskIncrementTick+0x170>)
 8003cc8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003cca:	4b0f      	ldr	r3, [pc, #60]	; (8003d08 <xTaskIncrementTick+0x174>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003cd6:	697b      	ldr	r3, [r7, #20]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	200003ac 	.word	0x200003ac
 8003ce4:	20000388 	.word	0x20000388
 8003ce8:	2000033c 	.word	0x2000033c
 8003cec:	20000340 	.word	0x20000340
 8003cf0:	2000039c 	.word	0x2000039c
 8003cf4:	200003a4 	.word	0x200003a4
 8003cf8:	2000038c 	.word	0x2000038c
 8003cfc:	20000288 	.word	0x20000288
 8003d00:	20000284 	.word	0x20000284
 8003d04:	20000394 	.word	0x20000394
 8003d08:	20000398 	.word	0x20000398

08003d0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d12:	4b26      	ldr	r3, [pc, #152]	; (8003dac <vTaskSwitchContext+0xa0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d1a:	4b25      	ldr	r3, [pc, #148]	; (8003db0 <vTaskSwitchContext+0xa4>)
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d20:	e03e      	b.n	8003da0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003d22:	4b23      	ldr	r3, [pc, #140]	; (8003db0 <vTaskSwitchContext+0xa4>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003d28:	4b22      	ldr	r3, [pc, #136]	; (8003db4 <vTaskSwitchContext+0xa8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	fab3 f383 	clz	r3, r3
 8003d34:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003d36:	7afb      	ldrb	r3, [r7, #11]
 8003d38:	f1c3 031f 	rsb	r3, r3, #31
 8003d3c:	617b      	str	r3, [r7, #20]
 8003d3e:	491e      	ldr	r1, [pc, #120]	; (8003db8 <vTaskSwitchContext+0xac>)
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	4613      	mov	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d109      	bne.n	8003d66 <vTaskSwitchContext+0x5a>
	__asm volatile
 8003d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d56:	f383 8811 	msr	BASEPRI, r3
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	607b      	str	r3, [r7, #4]
 8003d64:	e7fe      	b.n	8003d64 <vTaskSwitchContext+0x58>
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4a11      	ldr	r2, [pc, #68]	; (8003db8 <vTaskSwitchContext+0xac>)
 8003d72:	4413      	add	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	605a      	str	r2, [r3, #4]
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	3308      	adds	r3, #8
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d104      	bne.n	8003d96 <vTaskSwitchContext+0x8a>
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	605a      	str	r2, [r3, #4]
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	4a07      	ldr	r2, [pc, #28]	; (8003dbc <vTaskSwitchContext+0xb0>)
 8003d9e:	6013      	str	r3, [r2, #0]
}
 8003da0:	bf00      	nop
 8003da2:	371c      	adds	r7, #28
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	200003ac 	.word	0x200003ac
 8003db0:	20000398 	.word	0x20000398
 8003db4:	2000038c 	.word	0x2000038c
 8003db8:	20000288 	.word	0x20000288
 8003dbc:	20000284 	.word	0x20000284

08003dc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003dc8:	f000 f852 	bl	8003e70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003dcc:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <prvIdleTask+0x28>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d9f9      	bls.n	8003dc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003dd4:	4b05      	ldr	r3, [pc, #20]	; (8003dec <prvIdleTask+0x2c>)
 8003dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003de4:	e7f0      	b.n	8003dc8 <prvIdleTask+0x8>
 8003de6:	bf00      	nop
 8003de8:	20000288 	.word	0x20000288
 8003dec:	e000ed04 	.word	0xe000ed04

08003df0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003df6:	2300      	movs	r3, #0
 8003df8:	607b      	str	r3, [r7, #4]
 8003dfa:	e00c      	b.n	8003e16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4a12      	ldr	r2, [pc, #72]	; (8003e50 <prvInitialiseTaskLists+0x60>)
 8003e08:	4413      	add	r3, r2
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff fb4b 	bl	80034a6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3301      	adds	r3, #1
 8003e14:	607b      	str	r3, [r7, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b06      	cmp	r3, #6
 8003e1a:	d9ef      	bls.n	8003dfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e1c:	480d      	ldr	r0, [pc, #52]	; (8003e54 <prvInitialiseTaskLists+0x64>)
 8003e1e:	f7ff fb42 	bl	80034a6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e22:	480d      	ldr	r0, [pc, #52]	; (8003e58 <prvInitialiseTaskLists+0x68>)
 8003e24:	f7ff fb3f 	bl	80034a6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e28:	480c      	ldr	r0, [pc, #48]	; (8003e5c <prvInitialiseTaskLists+0x6c>)
 8003e2a:	f7ff fb3c 	bl	80034a6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e2e:	480c      	ldr	r0, [pc, #48]	; (8003e60 <prvInitialiseTaskLists+0x70>)
 8003e30:	f7ff fb39 	bl	80034a6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e34:	480b      	ldr	r0, [pc, #44]	; (8003e64 <prvInitialiseTaskLists+0x74>)
 8003e36:	f7ff fb36 	bl	80034a6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e3a:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <prvInitialiseTaskLists+0x78>)
 8003e3c:	4a05      	ldr	r2, [pc, #20]	; (8003e54 <prvInitialiseTaskLists+0x64>)
 8003e3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e40:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <prvInitialiseTaskLists+0x7c>)
 8003e42:	4a05      	ldr	r2, [pc, #20]	; (8003e58 <prvInitialiseTaskLists+0x68>)
 8003e44:	601a      	str	r2, [r3, #0]
}
 8003e46:	bf00      	nop
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000288 	.word	0x20000288
 8003e54:	20000314 	.word	0x20000314
 8003e58:	20000328 	.word	0x20000328
 8003e5c:	20000344 	.word	0x20000344
 8003e60:	20000358 	.word	0x20000358
 8003e64:	20000370 	.word	0x20000370
 8003e68:	2000033c 	.word	0x2000033c
 8003e6c:	20000340 	.word	0x20000340

08003e70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e76:	e019      	b.n	8003eac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003e78:	f000 fa08 	bl	800428c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003e7c:	4b0f      	ldr	r3, [pc, #60]	; (8003ebc <prvCheckTasksWaitingTermination+0x4c>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	3304      	adds	r3, #4
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff fb96 	bl	80035ba <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e8e:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <prvCheckTasksWaitingTermination+0x50>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	4a0a      	ldr	r2, [pc, #40]	; (8003ec0 <prvCheckTasksWaitingTermination+0x50>)
 8003e96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e98:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <prvCheckTasksWaitingTermination+0x54>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	4a09      	ldr	r2, [pc, #36]	; (8003ec4 <prvCheckTasksWaitingTermination+0x54>)
 8003ea0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ea2:	f000 fa21 	bl	80042e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f80e 	bl	8003ec8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003eac:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <prvCheckTasksWaitingTermination+0x54>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1e1      	bne.n	8003e78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003eb4:	bf00      	nop
 8003eb6:	3708      	adds	r7, #8
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	20000358 	.word	0x20000358
 8003ec0:	20000384 	.word	0x20000384
 8003ec4:	2000036c 	.word	0x2000036c

08003ec8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d108      	bne.n	8003eec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 fb72 	bl	80045c8 <vPortFree>
				vPortFree( pxTCB );
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 fb6f 	bl	80045c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003eea:	e017      	b.n	8003f1c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d103      	bne.n	8003efe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 fb66 	bl	80045c8 <vPortFree>
	}
 8003efc:	e00e      	b.n	8003f1c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d009      	beq.n	8003f1c <prvDeleteTCB+0x54>
 8003f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0c:	f383 8811 	msr	BASEPRI, r3
 8003f10:	f3bf 8f6f 	isb	sy
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	60fb      	str	r3, [r7, #12]
 8003f1a:	e7fe      	b.n	8003f1a <prvDeleteTCB+0x52>
	}
 8003f1c:	bf00      	nop
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f2a:	4b0f      	ldr	r3, [pc, #60]	; (8003f68 <prvResetNextTaskUnblockTime+0x44>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <prvResetNextTaskUnblockTime+0x14>
 8003f34:	2301      	movs	r3, #1
 8003f36:	e000      	b.n	8003f3a <prvResetNextTaskUnblockTime+0x16>
 8003f38:	2300      	movs	r3, #0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d004      	beq.n	8003f48 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f3e:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <prvResetNextTaskUnblockTime+0x48>)
 8003f40:	f04f 32ff 	mov.w	r2, #4294967295
 8003f44:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f46:	e008      	b.n	8003f5a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f48:	4b07      	ldr	r3, [pc, #28]	; (8003f68 <prvResetNextTaskUnblockTime+0x44>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	4a05      	ldr	r2, [pc, #20]	; (8003f6c <prvResetNextTaskUnblockTime+0x48>)
 8003f58:	6013      	str	r3, [r2, #0]
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	2000033c 	.word	0x2000033c
 8003f6c:	200003a4 	.word	0x200003a4

08003f70 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f7a:	4b29      	ldr	r3, [pc, #164]	; (8004020 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f80:	4b28      	ldr	r3, [pc, #160]	; (8004024 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3304      	adds	r3, #4
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff fb17 	bl	80035ba <uxListRemove>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10b      	bne.n	8003faa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003f92:	4b24      	ldr	r3, [pc, #144]	; (8004024 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f98:	2201      	movs	r2, #1
 8003f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9e:	43da      	mvns	r2, r3
 8003fa0:	4b21      	ldr	r3, [pc, #132]	; (8004028 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	4a20      	ldr	r2, [pc, #128]	; (8004028 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003fa8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb0:	d10a      	bne.n	8003fc8 <prvAddCurrentTaskToDelayedList+0x58>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d007      	beq.n	8003fc8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fb8:	4b1a      	ldr	r3, [pc, #104]	; (8004024 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	481a      	ldr	r0, [pc, #104]	; (800402c <prvAddCurrentTaskToDelayedList+0xbc>)
 8003fc2:	f7ff fa9d 	bl	8003500 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003fc6:	e026      	b.n	8004016 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4413      	add	r3, r2
 8003fce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003fd0:	4b14      	ldr	r3, [pc, #80]	; (8004024 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d209      	bcs.n	8003ff4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fe0:	4b13      	ldr	r3, [pc, #76]	; (8004030 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	4b0f      	ldr	r3, [pc, #60]	; (8004024 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	4619      	mov	r1, r3
 8003fec:	4610      	mov	r0, r2
 8003fee:	f7ff faab 	bl	8003548 <vListInsert>
}
 8003ff2:	e010      	b.n	8004016 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ff4:	4b0f      	ldr	r3, [pc, #60]	; (8004034 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	4619      	mov	r1, r3
 8004000:	4610      	mov	r0, r2
 8004002:	f7ff faa1 	bl	8003548 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004006:	4b0c      	ldr	r3, [pc, #48]	; (8004038 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	429a      	cmp	r2, r3
 800400e:	d202      	bcs.n	8004016 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004010:	4a09      	ldr	r2, [pc, #36]	; (8004038 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	6013      	str	r3, [r2, #0]
}
 8004016:	bf00      	nop
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	20000388 	.word	0x20000388
 8004024:	20000284 	.word	0x20000284
 8004028:	2000038c 	.word	0x2000038c
 800402c:	20000370 	.word	0x20000370
 8004030:	20000340 	.word	0x20000340
 8004034:	2000033c 	.word	0x2000033c
 8004038:	200003a4 	.word	0x200003a4

0800403c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	3b04      	subs	r3, #4
 800404c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004054:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3b04      	subs	r3, #4
 800405a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f023 0201 	bic.w	r2, r3, #1
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3b04      	subs	r3, #4
 800406a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800406c:	4a0c      	ldr	r2, [pc, #48]	; (80040a0 <pxPortInitialiseStack+0x64>)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	3b14      	subs	r3, #20
 8004076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	3b04      	subs	r3, #4
 8004082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f06f 0202 	mvn.w	r2, #2
 800408a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	3b20      	subs	r3, #32
 8004090:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004092:	68fb      	ldr	r3, [r7, #12]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	080040a5 	.word	0x080040a5

080040a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80040aa:	2300      	movs	r3, #0
 80040ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80040ae:	4b11      	ldr	r3, [pc, #68]	; (80040f4 <prvTaskExitError+0x50>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b6:	d009      	beq.n	80040cc <prvTaskExitError+0x28>
 80040b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040bc:	f383 8811 	msr	BASEPRI, r3
 80040c0:	f3bf 8f6f 	isb	sy
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	e7fe      	b.n	80040ca <prvTaskExitError+0x26>
 80040cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d0:	f383 8811 	msr	BASEPRI, r3
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80040de:	bf00      	nop
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0fc      	beq.n	80040e0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80040e6:	bf00      	nop
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	20000010 	.word	0x20000010
	...

08004100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004100:	4b07      	ldr	r3, [pc, #28]	; (8004120 <pxCurrentTCBConst2>)
 8004102:	6819      	ldr	r1, [r3, #0]
 8004104:	6808      	ldr	r0, [r1, #0]
 8004106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800410a:	f380 8809 	msr	PSP, r0
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f04f 0000 	mov.w	r0, #0
 8004116:	f380 8811 	msr	BASEPRI, r0
 800411a:	4770      	bx	lr
 800411c:	f3af 8000 	nop.w

08004120 <pxCurrentTCBConst2>:
 8004120:	20000284 	.word	0x20000284
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004124:	bf00      	nop
 8004126:	bf00      	nop

08004128 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004128:	4808      	ldr	r0, [pc, #32]	; (800414c <prvPortStartFirstTask+0x24>)
 800412a:	6800      	ldr	r0, [r0, #0]
 800412c:	6800      	ldr	r0, [r0, #0]
 800412e:	f380 8808 	msr	MSP, r0
 8004132:	f04f 0000 	mov.w	r0, #0
 8004136:	f380 8814 	msr	CONTROL, r0
 800413a:	b662      	cpsie	i
 800413c:	b661      	cpsie	f
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	f3bf 8f6f 	isb	sy
 8004146:	df00      	svc	0
 8004148:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800414a:	bf00      	nop
 800414c:	e000ed08 	.word	0xe000ed08

08004150 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004156:	4b44      	ldr	r3, [pc, #272]	; (8004268 <xPortStartScheduler+0x118>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a44      	ldr	r2, [pc, #272]	; (800426c <xPortStartScheduler+0x11c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d109      	bne.n	8004174 <xPortStartScheduler+0x24>
 8004160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004164:	f383 8811 	msr	BASEPRI, r3
 8004168:	f3bf 8f6f 	isb	sy
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	613b      	str	r3, [r7, #16]
 8004172:	e7fe      	b.n	8004172 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004174:	4b3c      	ldr	r3, [pc, #240]	; (8004268 <xPortStartScheduler+0x118>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a3d      	ldr	r2, [pc, #244]	; (8004270 <xPortStartScheduler+0x120>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d109      	bne.n	8004192 <xPortStartScheduler+0x42>
 800417e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004182:	f383 8811 	msr	BASEPRI, r3
 8004186:	f3bf 8f6f 	isb	sy
 800418a:	f3bf 8f4f 	dsb	sy
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	e7fe      	b.n	8004190 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004192:	4b38      	ldr	r3, [pc, #224]	; (8004274 <xPortStartScheduler+0x124>)
 8004194:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	b2db      	uxtb	r3, r3
 800419c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	22ff      	movs	r2, #255	; 0xff
 80041a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041ac:	78fb      	ldrb	r3, [r7, #3]
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	4b30      	ldr	r3, [pc, #192]	; (8004278 <xPortStartScheduler+0x128>)
 80041b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80041ba:	4b30      	ldr	r3, [pc, #192]	; (800427c <xPortStartScheduler+0x12c>)
 80041bc:	2207      	movs	r2, #7
 80041be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041c0:	e009      	b.n	80041d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80041c2:	4b2e      	ldr	r3, [pc, #184]	; (800427c <xPortStartScheduler+0x12c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	3b01      	subs	r3, #1
 80041c8:	4a2c      	ldr	r2, [pc, #176]	; (800427c <xPortStartScheduler+0x12c>)
 80041ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041d6:	78fb      	ldrb	r3, [r7, #3]
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041de:	2b80      	cmp	r3, #128	; 0x80
 80041e0:	d0ef      	beq.n	80041c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041e2:	4b26      	ldr	r3, [pc, #152]	; (800427c <xPortStartScheduler+0x12c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f1c3 0307 	rsb	r3, r3, #7
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d009      	beq.n	8004202 <xPortStartScheduler+0xb2>
 80041ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f2:	f383 8811 	msr	BASEPRI, r3
 80041f6:	f3bf 8f6f 	isb	sy
 80041fa:	f3bf 8f4f 	dsb	sy
 80041fe:	60bb      	str	r3, [r7, #8]
 8004200:	e7fe      	b.n	8004200 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004202:	4b1e      	ldr	r3, [pc, #120]	; (800427c <xPortStartScheduler+0x12c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	021b      	lsls	r3, r3, #8
 8004208:	4a1c      	ldr	r2, [pc, #112]	; (800427c <xPortStartScheduler+0x12c>)
 800420a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800420c:	4b1b      	ldr	r3, [pc, #108]	; (800427c <xPortStartScheduler+0x12c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004214:	4a19      	ldr	r2, [pc, #100]	; (800427c <xPortStartScheduler+0x12c>)
 8004216:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	b2da      	uxtb	r2, r3
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004220:	4b17      	ldr	r3, [pc, #92]	; (8004280 <xPortStartScheduler+0x130>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a16      	ldr	r2, [pc, #88]	; (8004280 <xPortStartScheduler+0x130>)
 8004226:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800422a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800422c:	4b14      	ldr	r3, [pc, #80]	; (8004280 <xPortStartScheduler+0x130>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a13      	ldr	r2, [pc, #76]	; (8004280 <xPortStartScheduler+0x130>)
 8004232:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004236:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004238:	f000 f8d6 	bl	80043e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800423c:	4b11      	ldr	r3, [pc, #68]	; (8004284 <xPortStartScheduler+0x134>)
 800423e:	2200      	movs	r2, #0
 8004240:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004242:	f000 f8f5 	bl	8004430 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004246:	4b10      	ldr	r3, [pc, #64]	; (8004288 <xPortStartScheduler+0x138>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a0f      	ldr	r2, [pc, #60]	; (8004288 <xPortStartScheduler+0x138>)
 800424c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004250:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004252:	f7ff ff69 	bl	8004128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004256:	f7ff fd59 	bl	8003d0c <vTaskSwitchContext>
	prvTaskExitError();
 800425a:	f7ff ff23 	bl	80040a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3718      	adds	r7, #24
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	e000ed00 	.word	0xe000ed00
 800426c:	410fc271 	.word	0x410fc271
 8004270:	410fc270 	.word	0x410fc270
 8004274:	e000e400 	.word	0xe000e400
 8004278:	200003b0 	.word	0x200003b0
 800427c:	200003b4 	.word	0x200003b4
 8004280:	e000ed20 	.word	0xe000ed20
 8004284:	20000010 	.word	0x20000010
 8004288:	e000ef34 	.word	0xe000ef34

0800428c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80042a4:	4b0e      	ldr	r3, [pc, #56]	; (80042e0 <vPortEnterCritical+0x54>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3301      	adds	r3, #1
 80042aa:	4a0d      	ldr	r2, [pc, #52]	; (80042e0 <vPortEnterCritical+0x54>)
 80042ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80042ae:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <vPortEnterCritical+0x54>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d10e      	bne.n	80042d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80042b6:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <vPortEnterCritical+0x58>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d009      	beq.n	80042d4 <vPortEnterCritical+0x48>
 80042c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	603b      	str	r3, [r7, #0]
 80042d2:	e7fe      	b.n	80042d2 <vPortEnterCritical+0x46>
	}
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	20000010 	.word	0x20000010
 80042e4:	e000ed04 	.word	0xe000ed04

080042e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80042ee:	4b11      	ldr	r3, [pc, #68]	; (8004334 <vPortExitCritical+0x4c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d109      	bne.n	800430a <vPortExitCritical+0x22>
 80042f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fa:	f383 8811 	msr	BASEPRI, r3
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	f3bf 8f4f 	dsb	sy
 8004306:	607b      	str	r3, [r7, #4]
 8004308:	e7fe      	b.n	8004308 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800430a:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <vPortExitCritical+0x4c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3b01      	subs	r3, #1
 8004310:	4a08      	ldr	r2, [pc, #32]	; (8004334 <vPortExitCritical+0x4c>)
 8004312:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004314:	4b07      	ldr	r3, [pc, #28]	; (8004334 <vPortExitCritical+0x4c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d104      	bne.n	8004326 <vPortExitCritical+0x3e>
 800431c:	2300      	movs	r3, #0
 800431e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	20000010 	.word	0x20000010
	...

08004340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004340:	f3ef 8009 	mrs	r0, PSP
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	4b15      	ldr	r3, [pc, #84]	; (80043a0 <pxCurrentTCBConst>)
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	f01e 0f10 	tst.w	lr, #16
 8004350:	bf08      	it	eq
 8004352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800435a:	6010      	str	r0, [r2, #0]
 800435c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004360:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004364:	f380 8811 	msr	BASEPRI, r0
 8004368:	f3bf 8f4f 	dsb	sy
 800436c:	f3bf 8f6f 	isb	sy
 8004370:	f7ff fccc 	bl	8003d0c <vTaskSwitchContext>
 8004374:	f04f 0000 	mov.w	r0, #0
 8004378:	f380 8811 	msr	BASEPRI, r0
 800437c:	bc09      	pop	{r0, r3}
 800437e:	6819      	ldr	r1, [r3, #0]
 8004380:	6808      	ldr	r0, [r1, #0]
 8004382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004386:	f01e 0f10 	tst.w	lr, #16
 800438a:	bf08      	it	eq
 800438c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004390:	f380 8809 	msr	PSP, r0
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	f3af 8000 	nop.w

080043a0 <pxCurrentTCBConst>:
 80043a0:	20000284 	.word	0x20000284
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80043a4:	bf00      	nop
 80043a6:	bf00      	nop

080043a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
	__asm volatile
 80043ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80043c0:	f7ff fbe8 	bl	8003b94 <xTaskIncrementTick>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80043ca:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <SysTick_Handler+0x3c>)
 80043cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	2300      	movs	r3, #0
 80043d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80043dc:	bf00      	nop
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	e000ed04 	.word	0xe000ed04

080043e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80043ec:	4b0b      	ldr	r3, [pc, #44]	; (800441c <vPortSetupTimerInterrupt+0x34>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80043f2:	4b0b      	ldr	r3, [pc, #44]	; (8004420 <vPortSetupTimerInterrupt+0x38>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80043f8:	4b0a      	ldr	r3, [pc, #40]	; (8004424 <vPortSetupTimerInterrupt+0x3c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a0a      	ldr	r2, [pc, #40]	; (8004428 <vPortSetupTimerInterrupt+0x40>)
 80043fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004402:	099b      	lsrs	r3, r3, #6
 8004404:	4a09      	ldr	r2, [pc, #36]	; (800442c <vPortSetupTimerInterrupt+0x44>)
 8004406:	3b01      	subs	r3, #1
 8004408:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800440a:	4b04      	ldr	r3, [pc, #16]	; (800441c <vPortSetupTimerInterrupt+0x34>)
 800440c:	2207      	movs	r2, #7
 800440e:	601a      	str	r2, [r3, #0]
}
 8004410:	bf00      	nop
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	e000e010 	.word	0xe000e010
 8004420:	e000e018 	.word	0xe000e018
 8004424:	20000004 	.word	0x20000004
 8004428:	10624dd3 	.word	0x10624dd3
 800442c:	e000e014 	.word	0xe000e014

08004430 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004430:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004440 <vPortEnableVFP+0x10>
 8004434:	6801      	ldr	r1, [r0, #0]
 8004436:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800443a:	6001      	str	r1, [r0, #0]
 800443c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800443e:	bf00      	nop
 8004440:	e000ed88 	.word	0xe000ed88

08004444 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b08a      	sub	sp, #40	; 0x28
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800444c:	2300      	movs	r3, #0
 800444e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004450:	f7ff faf6 	bl	8003a40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004454:	4b57      	ldr	r3, [pc, #348]	; (80045b4 <pvPortMalloc+0x170>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800445c:	f000 f90c 	bl	8004678 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004460:	4b55      	ldr	r3, [pc, #340]	; (80045b8 <pvPortMalloc+0x174>)
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4013      	ands	r3, r2
 8004468:	2b00      	cmp	r3, #0
 800446a:	f040 808c 	bne.w	8004586 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d01c      	beq.n	80044ae <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004474:	2208      	movs	r2, #8
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4413      	add	r3, r2
 800447a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	2b00      	cmp	r3, #0
 8004484:	d013      	beq.n	80044ae <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f023 0307 	bic.w	r3, r3, #7
 800448c:	3308      	adds	r3, #8
 800448e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	2b00      	cmp	r3, #0
 8004498:	d009      	beq.n	80044ae <pvPortMalloc+0x6a>
	__asm volatile
 800449a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449e:	f383 8811 	msr	BASEPRI, r3
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	e7fe      	b.n	80044ac <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d068      	beq.n	8004586 <pvPortMalloc+0x142>
 80044b4:	4b41      	ldr	r3, [pc, #260]	; (80045bc <pvPortMalloc+0x178>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d863      	bhi.n	8004586 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80044be:	4b40      	ldr	r3, [pc, #256]	; (80045c0 <pvPortMalloc+0x17c>)
 80044c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80044c2:	4b3f      	ldr	r3, [pc, #252]	; (80045c0 <pvPortMalloc+0x17c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044c8:	e004      	b.n	80044d4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d903      	bls.n	80044e6 <pvPortMalloc+0xa2>
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f1      	bne.n	80044ca <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80044e6:	4b33      	ldr	r3, [pc, #204]	; (80045b4 <pvPortMalloc+0x170>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d04a      	beq.n	8004586 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2208      	movs	r2, #8
 80044f6:	4413      	add	r3, r2
 80044f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	1ad2      	subs	r2, r2, r3
 800450a:	2308      	movs	r3, #8
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	429a      	cmp	r2, r3
 8004510:	d91e      	bls.n	8004550 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4413      	add	r3, r2
 8004518:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	2b00      	cmp	r3, #0
 8004522:	d009      	beq.n	8004538 <pvPortMalloc+0xf4>
 8004524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	613b      	str	r3, [r7, #16]
 8004536:	e7fe      	b.n	8004536 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	1ad2      	subs	r2, r2, r3
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800454a:	69b8      	ldr	r0, [r7, #24]
 800454c:	f000 f8f6 	bl	800473c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004550:	4b1a      	ldr	r3, [pc, #104]	; (80045bc <pvPortMalloc+0x178>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	4a18      	ldr	r2, [pc, #96]	; (80045bc <pvPortMalloc+0x178>)
 800455c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800455e:	4b17      	ldr	r3, [pc, #92]	; (80045bc <pvPortMalloc+0x178>)
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	4b18      	ldr	r3, [pc, #96]	; (80045c4 <pvPortMalloc+0x180>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d203      	bcs.n	8004572 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800456a:	4b14      	ldr	r3, [pc, #80]	; (80045bc <pvPortMalloc+0x178>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a15      	ldr	r2, [pc, #84]	; (80045c4 <pvPortMalloc+0x180>)
 8004570:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	4b10      	ldr	r3, [pc, #64]	; (80045b8 <pvPortMalloc+0x174>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	431a      	orrs	r2, r3
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004586:	f7ff fa69 	bl	8003a5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	2b00      	cmp	r3, #0
 8004592:	d009      	beq.n	80045a8 <pvPortMalloc+0x164>
 8004594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	e7fe      	b.n	80045a6 <pvPortMalloc+0x162>
	return pvReturn;
 80045a8:	69fb      	ldr	r3, [r7, #28]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3728      	adds	r7, #40	; 0x28
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20003fc0 	.word	0x20003fc0
 80045b8:	20003fcc 	.word	0x20003fcc
 80045bc:	20003fc4 	.word	0x20003fc4
 80045c0:	20003fb8 	.word	0x20003fb8
 80045c4:	20003fc8 	.word	0x20003fc8

080045c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d046      	beq.n	8004668 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80045da:	2308      	movs	r3, #8
 80045dc:	425b      	negs	r3, r3
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	4413      	add	r3, r2
 80045e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	4b20      	ldr	r3, [pc, #128]	; (8004670 <vPortFree+0xa8>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4013      	ands	r3, r2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d109      	bne.n	800460a <vPortFree+0x42>
 80045f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fa:	f383 8811 	msr	BASEPRI, r3
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	e7fe      	b.n	8004608 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d009      	beq.n	8004626 <vPortFree+0x5e>
 8004612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004616:	f383 8811 	msr	BASEPRI, r3
 800461a:	f3bf 8f6f 	isb	sy
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	60bb      	str	r3, [r7, #8]
 8004624:	e7fe      	b.n	8004624 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	4b11      	ldr	r3, [pc, #68]	; (8004670 <vPortFree+0xa8>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4013      	ands	r3, r2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d019      	beq.n	8004668 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d115      	bne.n	8004668 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <vPortFree+0xa8>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	43db      	mvns	r3, r3
 8004646:	401a      	ands	r2, r3
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800464c:	f7ff f9f8 	bl	8003a40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	4b07      	ldr	r3, [pc, #28]	; (8004674 <vPortFree+0xac>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4413      	add	r3, r2
 800465a:	4a06      	ldr	r2, [pc, #24]	; (8004674 <vPortFree+0xac>)
 800465c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800465e:	6938      	ldr	r0, [r7, #16]
 8004660:	f000 f86c 	bl	800473c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004664:	f7ff f9fa 	bl	8003a5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004668:	bf00      	nop
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	20003fcc 	.word	0x20003fcc
 8004674:	20003fc4 	.word	0x20003fc4

08004678 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800467e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004682:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004684:	4b27      	ldr	r3, [pc, #156]	; (8004724 <prvHeapInit+0xac>)
 8004686:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f003 0307 	and.w	r3, r3, #7
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00c      	beq.n	80046ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	3307      	adds	r3, #7
 8004696:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0307 	bic.w	r3, r3, #7
 800469e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	4a1f      	ldr	r2, [pc, #124]	; (8004724 <prvHeapInit+0xac>)
 80046a8:	4413      	add	r3, r2
 80046aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80046b0:	4a1d      	ldr	r2, [pc, #116]	; (8004728 <prvHeapInit+0xb0>)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80046b6:	4b1c      	ldr	r3, [pc, #112]	; (8004728 <prvHeapInit+0xb0>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	4413      	add	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80046c4:	2208      	movs	r2, #8
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	1a9b      	subs	r3, r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f023 0307 	bic.w	r3, r3, #7
 80046d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4a15      	ldr	r2, [pc, #84]	; (800472c <prvHeapInit+0xb4>)
 80046d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80046da:	4b14      	ldr	r3, [pc, #80]	; (800472c <prvHeapInit+0xb4>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2200      	movs	r2, #0
 80046e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80046e2:	4b12      	ldr	r3, [pc, #72]	; (800472c <prvHeapInit+0xb4>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	1ad2      	subs	r2, r2, r3
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80046f8:	4b0c      	ldr	r3, [pc, #48]	; (800472c <prvHeapInit+0xb4>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	4a0a      	ldr	r2, [pc, #40]	; (8004730 <prvHeapInit+0xb8>)
 8004706:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	4a09      	ldr	r2, [pc, #36]	; (8004734 <prvHeapInit+0xbc>)
 800470e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004710:	4b09      	ldr	r3, [pc, #36]	; (8004738 <prvHeapInit+0xc0>)
 8004712:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004716:	601a      	str	r2, [r3, #0]
}
 8004718:	bf00      	nop
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	200003b8 	.word	0x200003b8
 8004728:	20003fb8 	.word	0x20003fb8
 800472c:	20003fc0 	.word	0x20003fc0
 8004730:	20003fc8 	.word	0x20003fc8
 8004734:	20003fc4 	.word	0x20003fc4
 8004738:	20003fcc 	.word	0x20003fcc

0800473c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004744:	4b28      	ldr	r3, [pc, #160]	; (80047e8 <prvInsertBlockIntoFreeList+0xac>)
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	e002      	b.n	8004750 <prvInsertBlockIntoFreeList+0x14>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	429a      	cmp	r2, r3
 8004758:	d8f7      	bhi.n	800474a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	4413      	add	r3, r2
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	429a      	cmp	r2, r3
 800476a:	d108      	bne.n	800477e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	441a      	add	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	441a      	add	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	429a      	cmp	r2, r3
 8004790:	d118      	bne.n	80047c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	4b15      	ldr	r3, [pc, #84]	; (80047ec <prvInsertBlockIntoFreeList+0xb0>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	429a      	cmp	r2, r3
 800479c:	d00d      	beq.n	80047ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	441a      	add	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	e008      	b.n	80047cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80047ba:	4b0c      	ldr	r3, [pc, #48]	; (80047ec <prvInsertBlockIntoFreeList+0xb0>)
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	e003      	b.n	80047cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d002      	beq.n	80047da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047da:	bf00      	nop
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	20003fb8 	.word	0x20003fb8
 80047ec:	20003fc0 	.word	0x20003fc0

080047f0 <__libc_init_array>:
 80047f0:	b570      	push	{r4, r5, r6, lr}
 80047f2:	4e0d      	ldr	r6, [pc, #52]	; (8004828 <__libc_init_array+0x38>)
 80047f4:	4c0d      	ldr	r4, [pc, #52]	; (800482c <__libc_init_array+0x3c>)
 80047f6:	1ba4      	subs	r4, r4, r6
 80047f8:	10a4      	asrs	r4, r4, #2
 80047fa:	2500      	movs	r5, #0
 80047fc:	42a5      	cmp	r5, r4
 80047fe:	d109      	bne.n	8004814 <__libc_init_array+0x24>
 8004800:	4e0b      	ldr	r6, [pc, #44]	; (8004830 <__libc_init_array+0x40>)
 8004802:	4c0c      	ldr	r4, [pc, #48]	; (8004834 <__libc_init_array+0x44>)
 8004804:	f000 f820 	bl	8004848 <_init>
 8004808:	1ba4      	subs	r4, r4, r6
 800480a:	10a4      	asrs	r4, r4, #2
 800480c:	2500      	movs	r5, #0
 800480e:	42a5      	cmp	r5, r4
 8004810:	d105      	bne.n	800481e <__libc_init_array+0x2e>
 8004812:	bd70      	pop	{r4, r5, r6, pc}
 8004814:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004818:	4798      	blx	r3
 800481a:	3501      	adds	r5, #1
 800481c:	e7ee      	b.n	80047fc <__libc_init_array+0xc>
 800481e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004822:	4798      	blx	r3
 8004824:	3501      	adds	r5, #1
 8004826:	e7f2      	b.n	800480e <__libc_init_array+0x1e>
 8004828:	080048fc 	.word	0x080048fc
 800482c:	080048fc 	.word	0x080048fc
 8004830:	080048fc 	.word	0x080048fc
 8004834:	08004900 	.word	0x08004900

08004838 <memset>:
 8004838:	4402      	add	r2, r0
 800483a:	4603      	mov	r3, r0
 800483c:	4293      	cmp	r3, r2
 800483e:	d100      	bne.n	8004842 <memset+0xa>
 8004840:	4770      	bx	lr
 8004842:	f803 1b01 	strb.w	r1, [r3], #1
 8004846:	e7f9      	b.n	800483c <memset+0x4>

08004848 <_init>:
 8004848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800484a:	bf00      	nop
 800484c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800484e:	bc08      	pop	{r3}
 8004850:	469e      	mov	lr, r3
 8004852:	4770      	bx	lr

08004854 <_fini>:
 8004854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004856:	bf00      	nop
 8004858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485a:	bc08      	pop	{r3}
 800485c:	469e      	mov	lr, r3
 800485e:	4770      	bx	lr
